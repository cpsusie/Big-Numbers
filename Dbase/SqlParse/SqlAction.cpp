/* DO NOT EDIT THIS FILE - it is machine generated */

#line 135 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
#include "stdafx.h"
#include "SqlParser.h"
#include <SqlApi.h>
#include <io.h>

#line 20 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
#line 23 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
#pragma warning(disable : 4060) // warning C4060: switch statement contains no 'case' or 'default' labels

int SqlParser::reduceAction(unsigned int prod) {
  switch(prod) {
  case 0: /* start -> stmt */
#line 144 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_tree.m_root = getStackTop(0); }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 10: /* update_stmt -> UPDATE name SET assign_list opt_where */
#line 158 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(1), UPDATE, getStackTop(3), getStackTop(1), getStackTop(0), nullptr ); }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 11: /* assign_list -> assign_list COMMA assign */
#line 161 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(2), COMMA, getStackTop(2), getStackTop(0), nullptr ); }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 13: /* assign -> name EQUAL expr */
#line 165 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(2), EQUAL, getStackTop(2), getStackTop(0), nullptr ); }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 14: /* insert_stmt -> INSERT INTO name LPAR name_list RPAR VALUES LPAR opt_expr_list RPAR opt_access */
#line 170 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(1), INSERT,
            getStackTop(8),
            newNode( getPos(5), COLUMN, getStackTop(6), nullptr ),
            newNode( getPos(7), VALUES, getStackTop(2), nullptr ),
            getStackTop(0),
            nullptr );
    }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 15: /* insert_stmt -> INSERT INTO name VALUES LPAR opt_expr_list RPAR opt_access */
#line 180 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(1), INSERT,
            getStackTop(5),
            newNode( getPos(4), COLUMN, nullptr     ),
            newNode( getPos(4), VALUES, getStackTop(2), nullptr ),
            getStackTop(0),
            nullptr );
    }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 16: /* insert_stmt -> INSERT INTO name LPAR name_list RPAR LPAR select_stmt RPAR opt_access */
#line 190 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(1), INSERT,
            getStackTop(7),
            newNode( getPos(5), COLUMN, getStackTop(5), nullptr ),
            getStackTop(2),
            getStackTop(0),
            nullptr );
    }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 17: /* insert_stmt -> INSERT INTO name LPAR select_stmt RPAR opt_access */
#line 200 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(1), INSERT,
            getStackTop(4),
            newNode( getPos(4), COLUMN, nullptr ),
            getStackTop(2),
            getStackTop(0),
            nullptr );
    }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 18: /* insert_stmt -> INSERT INTO name LPAR name_list RPAR select_stmt */
#line 210 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(1), INSERT,
            getStackTop(4),
            newNode( getPos(5), COLUMN, getStackTop(2), nullptr ),
            getStackTop(0),
            newNode( getPos(), ACCESSS, nullptr         ),
            nullptr );
    }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 19: /* insert_stmt -> INSERT INTO name select_stmt */
#line 220 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(1), INSERT,
            getStackTop(1),
            newNode( getPos(3), COLUMN, nullptr   ),
            getStackTop(0),
            newNode( getPos(), ACCESSS, nullptr       ),
            nullptr );
    }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 21: /* name_list -> name_list COMMA name */
#line 230 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(2), COMMA, getStackTop(2), getStackTop(0), nullptr );       }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 22: /* opt_expr_list -> epsilon */
#line 233 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = nullptr; }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 24: /* delete_stmt -> DELETESYM FROM name opt_where opt_access */
#line 237 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(1), DELETESYM, getStackTop(2), getStackTop(1), getStackTop(0), nullptr );     }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 25: /* select_stmt -> select_stmt UNION opt_all select_stmt */
#line 240 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(2), UNION        , getStackTop(3), getStackTop(0), getStackTop(1), nullptr ); }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 26: /* select_stmt -> select_stmt INTERSECT select_stmt */
#line 241 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(2), INTERSECT    , getStackTop(2), getStackTop(0), nullptr );     }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 27: /* select_stmt -> select_stmt SETDIFFERENCE select_stmt */
#line 242 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(2), SETDIFFERENCE, getStackTop(2), getStackTop(0), nullptr );     }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 28: /* select_stmt -> LPAR select_stmt RPAR */
#line 243 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = getStackTop(1);                                                    }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 30: /* simple_select -> SELECT opt_alldistinct select_list opt_into FROM from_table_list opt_where opt_groupby opt_having opt_orderby opt_access opt_lockmode */
#line 261 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(1), SELECT,
            getStackTop(10),
            getStackTop(9),
            getStackTop(8),
            newNode( getPos(5), FROM, getStackTop(6), nullptr ),
            getStackTop(5),
            getStackTop(4),
            getStackTop(3),
            getStackTop(2),
            getStackTop(1),
            getStackTop(0),
            nullptr );
    }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 31: /* opt_all -> epsilon */
#line 276 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = nullptr;                                      }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 32: /* opt_all -> ALL */
#line 277 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(1), ALL, nullptr );           }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 33: /* opt_alldistinct -> epsilon */
#line 280 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(0), ALL, nullptr );           }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 34: /* opt_alldistinct -> ALL */
#line 281 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(1), ALL, nullptr );           }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 35: /* opt_alldistinct -> DISTINCT */
#line 282 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(1), DISTINCT, nullptr );      }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 36: /* select_list -> select_list COMMA select_elem */
#line 285 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(2), COMMA, getStackTop(2), getStackTop(0), nullptr ); }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 38: /* select_elem -> STAR */
#line 289 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(1), STAR, nullptr );          }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 39: /* select_elem -> name DOT STAR */
#line 290 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(2), DOT,
            getStackTop(2),
            newNode( getPos(3), STAR, nullptr ),
            nullptr );
    }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 41: /* opt_into -> epsilon */
#line 298 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(0), INTO,nullptr );           }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 42: /* opt_into -> INTO hostvar_list */
#line 299 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(1), INTO, getStackTop(0), nullptr );      }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 43: /* hostvar_list -> hostvar_list COMMA hostindi_var */
#line 302 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(2), COMMA, getStackTop(2), getStackTop(0), nullptr ); }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 45: /* hostindi_var -> hostvar opt_indicator */
#line 307 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = getStackTop(1); } /*  newNode( HOSTVAR, $1, $2, nullptr ); } */
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 49: /* from_table_list -> from_table_list COMMA from_table */
#line 316 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(2), COMMA, getStackTop(2), getStackTop(0), nullptr ); }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 52: /* from_table -> name name */
#line 321 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(1), DOT, getStackTop(1), getStackTop(0), nullptr );   }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 53: /* from_table -> LPAR from_table opt_join_type JOIN from_table ON search_condition RPAR */
#line 324 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(2), JOIN, getStackTop(6), getStackTop(5), getStackTop(3), getStackTop(1), nullptr );
    }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 54: /* opt_join_type -> epsilon */
#line 328 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(0), INNER, nullptr );         }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 55: /* opt_join_type -> INNER */
#line 329 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(1), INNER, nullptr );         }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 56: /* opt_join_type -> LEFT */
#line 330 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(1), LEFT , nullptr );         }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 57: /* opt_where -> epsilon */
#line 333 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(0), WHERE, nullptr );         }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 58: /* opt_where -> WHERE search_condition */
#line 334 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(1), WHERE, getStackTop(0), nullptr );     }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 59: /* opt_having -> epsilon */
#line 337 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(0), HAVING, nullptr );        }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 60: /* opt_having -> HAVING search_condition */
#line 338 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(1), HAVING, getStackTop(0), nullptr );    }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 61: /* opt_groupby -> epsilon */
#line 341 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(0), GROUP, nullptr );         }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 62: /* opt_groupby -> GROUP BY expr_list */
#line 342 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(1), GROUP, getStackTop(0), nullptr );     }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 63: /* opt_orderby -> epsilon */
#line 345 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(0), ORDER, nullptr );         }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 64: /* opt_orderby -> ORDER BY order_elem_list */
#line 346 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(1), ORDER, getStackTop(0), nullptr );     }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 65: /* order_elem_list -> order_elem_list COMMA order_elem */
#line 349 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(2), COMMA, getStackTop(2), getStackTop(0), nullptr ); }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 67: /* order_elem -> expr opt_ascdesc */
#line 353 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(1), BY, getStackTop(1), getStackTop(0), nullptr );    }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 68: /* opt_ascdesc -> epsilon */
#line 356 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(0), ASCENDING , nullptr );    }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 69: /* opt_ascdesc -> ASCENDING */
#line 357 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(1), ASCENDING , nullptr );    }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 70: /* opt_ascdesc -> DESCENDING */
#line 358 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(1), DESCENDING, nullptr );    }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 71: /* opt_access -> epsilon */
#line 361 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(0), ACCESSS, nullptr      );  }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 72: /* opt_access -> FOR access_mode ACCESSS */
#line 362 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(2), ACCESSS, getStackTop(1), nullptr );  }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 73: /* opt_access -> access_mode ACCESSS */
#line 363 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(1), ACCESSS, getStackTop(1), nullptr );  }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 74: /* access_mode -> BROWSE */
#line 366 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(1), BROWSE    , nullptr );    }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 75: /* access_mode -> STABLE */
#line 367 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(1), STABLE    , nullptr );    }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 76: /* access_mode -> REPEATABLE */
#line 368 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(1), REPEATABLE, nullptr );    }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 77: /* opt_lockmode -> epsilon */
#line 371 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode ( getPos(0), MODE, nullptr     );     }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 78: /* opt_lockmode -> INSYM lockmode MODE */
#line 372 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode ( getPos(2), MODE, getStackTop(1), nullptr );     }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 79: /* opt_lockmode -> lockmode MODE */
#line 373 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode ( getPos(1), MODE, getStackTop(1), nullptr );     }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 80: /* lockmode -> SHARE */
#line 376 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(1), SHARE     , nullptr );    }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 81: /* lockmode -> EXCLUSIVE */
#line 377 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(1), EXCLUSIVE , nullptr );    }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 82: /* search_condition -> search_condition OR search_condition */
#line 380 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(2), OR , getStackTop(2), getStackTop(0), nullptr);    }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 83: /* search_condition -> search_condition AND search_condition */
#line 381 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(2), AND, getStackTop(2), getStackTop(0), nullptr);    }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 84: /* search_condition -> NOT boolean_primary */
#line 382 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(1), NOT, getStackTop(0), nullptr );       }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 87: /* boolean_primary -> LPAR search_condition RPAR */
#line 387 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = getStackTop(1); }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 88: /* predicate -> par_expr_list rel_op par_expr_list */
#line 390 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(2), getStackTop(1)->token(), getStackTop(2), getStackTop(0), nullptr );
    }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 89: /* predicate -> EXISTS LPAR select_stmt RPAR */
#line 392 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(1), EXISTS, getStackTop(1), nullptr );
    }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 90: /* predicate -> par_expr_list BETWEEN par_expr_list AND par_expr_list */
#line 395 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(2), BETWEEN, getStackTop(4), getStackTop(2), getStackTop(0), nullptr );
    }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 91: /* predicate -> par_expr_list NOT BETWEEN par_expr_list AND par_expr_list */
#line 398 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(2), NOT,
                                                                            newNode( getPos(3), BETWEEN, getStackTop(5), getStackTop(2), getStackTop(0), nullptr ),
                                                                            nullptr );
                                                                    }
    /* actually only 1 single expr. but this gives shift/reduce-conflicts. We check it in the compiler */

#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 92: /* predicate -> par_expr_list INSYM LPAR set_expr RPAR */
#line 403 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(2), INSYM, getStackTop(4), getStackTop(1), nullptr ); }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 93: /* predicate -> par_expr_list NOT INSYM LPAR set_expr RPAR */
#line 405 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(2), NOT,
                                                                            newNode( getPos(3), INSYM, getStackTop(5), getStackTop(1), nullptr ),
                                                                            nullptr );
                                                                    }
    /* actually only 1 single expr. but this gives shift/reduce-conflicts. We check it in the compiler */

#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 94: /* predicate -> par_expr_list LIKE expr */
#line 410 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(2), LIKE, getStackTop(2), getStackTop(0), nullptr );  }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 95: /* predicate -> par_expr_list NOT LIKE expr */
#line 411 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(2), NOT,
                                                                            newNode( getPos(3), LIKE, getStackTop(3), getStackTop(0), nullptr),
                                                                            nullptr );
                                                                    }
    /* actually only 1 single expr. but this gives shift/reduce-conflicts. We check it in the compiler */

#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 96: /* predicate -> par_expr_list IS NULLVAL */
#line 416 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(2), ISNULL, getStackTop(2), nullptr );    }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 97: /* predicate -> par_expr_list IS NOT NULLVAL */
#line 417 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(3), NOT,
            newNode( getPos(2), ISNULL, getStackTop(3), nullptr ),
            nullptr );
    }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 101: /* rel_op -> RELOPLE */
#line 432 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode(getPos(1), RELOPLE,nullptr);                }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 102: /* rel_op -> RELOPLT */
#line 433 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode(getPos(1), RELOPLT,nullptr);                }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 103: /* rel_op -> RELOPGE */
#line 434 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode(getPos(1), RELOPGE,nullptr);                }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 104: /* rel_op -> RELOPGT */
#line 435 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode(getPos(1), RELOPGT,nullptr);                }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 105: /* rel_op -> EQUAL */
#line 436 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode(getPos(1), EQUAL  ,nullptr);                }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 106: /* rel_op -> NOTEQ */
#line 437 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode(getPos(1), NOTEQ  ,nullptr);                }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 107: /* expr_list -> expr_list COMMA expr */
#line 440 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(2), COMMA, getStackTop(2), getStackTop(0), nullptr );   }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 109: /* expr -> expr PLUS expr */
#line 444 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(2), PLUS  , getStackTop(2), getStackTop(0), nullptr );  }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 110: /* expr -> expr MINUS expr */
#line 445 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(2), MINUS , getStackTop(2), getStackTop(0), nullptr );  }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 111: /* expr -> expr CONCAT expr */
#line 446 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(2), CONCAT, getStackTop(2), getStackTop(0), nullptr);   }
    /* need to be here to avoid shift/reduce-conflicts */

#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 112: /* expr -> expr STAR expr */
#line 448 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(2), MULT  , getStackTop(2), getStackTop(0), nullptr );  }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 113: /* expr -> expr DIVOP expr */
#line 449 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(2), DIVOP , getStackTop(2), getStackTop(0), nullptr );  }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 114: /* expr -> expr MODOP expr */
#line 450 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(2), MODOP , getStackTop(2), getStackTop(0), nullptr );  }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 115: /* expr -> expr EXPO expr */
#line 451 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(2), EXPO  , getStackTop(2), getStackTop(0), nullptr );  }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 116: /* expr -> MINUS unary */
#line 452 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(1), MINUS , getStackTop(0), nullptr );      }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 117: /* expr -> PLUS unary */
#line 453 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = getStackTop(0); }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 127: /* unary -> CURRENTDATE */
#line 465 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(1), CURRENTDATE, nullptr );      }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 128: /* unary -> CURRENTTIME */
#line 466 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(1), CURRENTTIME, nullptr );      }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 129: /* unary -> CURRENTTIMESTAMP */
#line 467 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(1), CURRENTTIMESTAMP, nullptr);  }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 130: /* unary -> NULLVAL */
#line 468 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(1), NULLVAL, nullptr );          }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 131: /* unary -> LPAR expr RPAR */
#line 469 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = getStackTop(1);                                              }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 132: /* unary -> CAST LPAR expr AS type_def RPAR */
#line 470 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(1), CAST, getStackTop(3), getStackTop(1), nullptr );     }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 133: /* unary -> LPAR select_stmt RPAR */
#line 471 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = getStackTop(1);                                              }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 134: /* unary -> SUBSTRING LPAR expr FROM expr FOR expr RPAR */
#line 472 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode(  getPos(1), SUBSTRING, getStackTop(5), getStackTop(3), getStackTop(1), nullptr ); }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 135: /* unary -> SUBSTRING LPAR expr COMMA expr COMMA expr RPAR */
#line 473 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    {m_leftSide = newNode(  getPos(1), SUBSTRING, getStackTop(5), getStackTop(3), getStackTop(1), nullptr ); }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 136: /* unary -> TYPEDATE LPAR expr COMMA expr COMMA expr RPAR */
#line 474 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(1), TYPEDATE , getStackTop(5), getStackTop(3), getStackTop(1), nullptr ); }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 137: /* unary -> TYPETIME LPAR expr COMMA expr COMMA expr RPAR */
#line 475 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(1), TYPETIME , getStackTop(5), getStackTop(3), getStackTop(1), nullptr ); }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 138: /* unary -> TYPETIMESTAMP LPAR expr COMMA expr COMMA expr COMMA expr COMMA expr COMMA expr RPAR */
#line 478 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(1), TYPETIMESTAMP, getStackTop(11), getStackTop(9), getStackTop(7), getStackTop(5), getStackTop(3), getStackTop(1), nullptr );
    }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 139: /* unary -> COUNT LPAR count_arg RPAR */
#line 480 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(1), COUNT, getStackTop(1), nullptr); }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 140: /* unary -> min_max_sum LPAR opt_alldistinct expr RPAR */
#line 481 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(1), getStackTop(4)->token(), getStackTop(2), getStackTop(1), nullptr ); }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 141: /* min_max_sum -> MIN */
#line 484 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode(getPos(1), MIN,nullptr); }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 142: /* min_max_sum -> MAX */
#line 485 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode(getPos(1), MAX,nullptr); }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 143: /* min_max_sum -> SUM */
#line 486 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode(getPos(1), SUM,nullptr); }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 144: /* count_arg -> opt_alldistinct expr */
#line 489 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode(getPos(1), getStackTop(1)->token(), getStackTop(0), nullptr );    }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 145: /* count_arg -> STAR */
#line 490 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode(getPos(1), STAR,nullptr);                 }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 147: /* tab_col -> name DOT name */
#line 494 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode ( getPos(2), DOT, getStackTop(2), getStackTop(0), nullptr );      }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 148: /* declare_stmt -> DECLARE name CURSOR FOR select_stmt */
#line 497 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode ( getPos(1), DECLARE, getStackTop(3), getStackTop(0), nullptr );  }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 149: /* fetch_stmt -> FETCH name INTO hostvar_list */
#line 500 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(1), FETCH, getStackTop(2), getStackTop(0), nullptr );     }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 150: /* create_stmt -> CREATE TABLE name LIKE name */
#line 503 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(1), CREATE,
            newNode(getPos(2), TABLE,nullptr),
            newNode(getPos(4), LIKE,nullptr),
            getStackTop(2),
            getStackTop(0),
            nullptr );
    }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 151: /* create_stmt -> CREATE TABLE name LPAR col_def_list COMMA PRIMARY KEY LPAR keyfield_list RPAR RPAR */
#line 513 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(1), CREATE,
            newNode(getPos(2), TABLE,nullptr),
            newNode(getPos(7), KEY, getStackTop(2), nullptr ),
            getStackTop(9),
            getStackTop(7),
            nullptr );
    }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 152: /* create_stmt -> CREATE opt_unique INDEX name ON name LPAR keyfield_list RPAR */
#line 521 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(1), CREATE,
            newNode(getPos(3), INDEX,nullptr),
            getStackTop(7),
            getStackTop(5),
            getStackTop(3),
            getStackTop(1),
            nullptr );
    }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 153: /* opt_unique -> epsilon */
#line 531 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(0), NOT,
            newNode(getPos(0), UNIQUE,nullptr),
            nullptr);
    }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 154: /* opt_unique -> UNIQUE */
#line 535 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(1), UNIQUE,nullptr);
    }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 155: /* keyfield_list -> keyfield_list COMMA keyfield */
#line 539 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(2), COMMA, getStackTop(2), getStackTop(0), nullptr );       }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 157: /* keyfield -> name opt_ascdesc */
#line 543 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(1), COLUMN, getStackTop(1), getStackTop(0), nullptr );      }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 158: /* col_def_list -> col_def_list COMMA col_def */
#line 546 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(2), COMMA, getStackTop(2), getStackTop(0), nullptr );       }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 160: /* col_def -> name type_def opt_not_null opt_defaultvalue */
#line 550 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(1), COLUMN, getStackTop(3), getStackTop(2), getStackTop(1), getStackTop(0), nullptr ); }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 161: /* type_def -> opt_sign TYPECHAR */
#line 553 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode(getPos(2), TYPECHAR     , getStackTop(1),     nullptr);  }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 162: /* type_def -> opt_sign TYPEWCHAR */
#line 554 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode(getPos(2), TYPEWCHAR    , getStackTop(1),     nullptr);  }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 163: /* type_def -> opt_sign TYPECHAR LPAR number_const RPAR */
#line 555 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode(getPos(2), TYPECHAR     , getStackTop(4), getStackTop(1), nullptr);  }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 164: /* type_def -> opt_sign TYPEWCHAR LPAR number_const RPAR */
#line 556 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode(getPos(2), TYPEWCHAR    , getStackTop(4), getStackTop(1), nullptr);  }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 165: /* type_def -> opt_sign TYPESHORT */
#line 557 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode(getPos(2), TYPESHORT    , getStackTop(1),     nullptr);  }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 166: /* type_def -> opt_sign TYPEINT */
#line 558 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode(getPos(2), TYPEINT      , getStackTop(1),     nullptr);  }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 167: /* type_def -> opt_sign TYPELONG */
#line 559 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode(getPos(2), TYPELONG     , getStackTop(1),     nullptr);  }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 168: /* type_def -> TYPEFLOAT */
#line 560 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode(getPos(1), TYPEFLOAT    ,         nullptr);  }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 169: /* type_def -> TYPEDOUBLE */
#line 561 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode(getPos(1), TYPEDOUBLE   ,         nullptr);  }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 170: /* type_def -> TYPEDATE */
#line 562 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode(getPos(1), TYPEDATE     ,         nullptr);  }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 171: /* type_def -> TYPETIME */
#line 563 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode(getPos(1), TYPETIME     ,         nullptr);  }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 172: /* type_def -> TYPETIMESTAMP */
#line 564 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode(getPos(1), TYPETIMESTAMP,         nullptr);  }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 173: /* type_def -> TYPEVARCHAR LPAR number_const RPAR */
#line 565 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode(getPos(1), TYPEVARCHAR  , getStackTop(1),     nullptr);  }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 174: /* opt_sign -> epsilon */
#line 568 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode(getPos(0), SIGNED,nullptr);                  }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 175: /* opt_sign -> SIGNED */
#line 569 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode(getPos(1), SIGNED,nullptr);                  }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 176: /* opt_sign -> UNSIGNED */
#line 570 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode(getPos(1), UNSIGNED,nullptr);                }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 177: /* opt_not_null -> epsilon */
#line 573 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode(getPos(0), NULLVAL,nullptr);                 } /* default null allowed */
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 178: /* opt_not_null -> NOT NULLVAL */
#line 574 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode(getPos(1), NOT,
            newNode(getPos(2), NULLVAL,nullptr),
            nullptr );
    }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 179: /* opt_defaultvalue -> epsilon */
#line 580 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode(getPos(0), DEFAULT, nullptr);                }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 180: /* opt_defaultvalue -> DEFAULT constant */
#line 581 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode(getPos(1), DEFAULT, getStackTop(0), nullptr);            }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 183: /* constant -> PLUS number_const */
#line 586 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = getStackTop(0);                                               }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 184: /* constant -> MINUS number_const */
#line 587 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(1), NUMBER, -getStackTop(0)->number());       }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 188: /* drop_stmt -> DROP TABLE name */
#line 593 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(1), DROP,
            newNode(getPos(2), TABLE    , nullptr),
            getStackTop(0), nullptr );
    }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 189: /* drop_stmt -> DROP INDEX name */
#line 597 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(1), DROP,
            newNode(getPos(2), INDEX    , nullptr),
            getStackTop(0), nullptr );
    }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 190: /* explain_stmt -> EXPLAIN stmt */
#line 603 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(1), EXPLAIN, getStackTop(0), nullptr    );      }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 191: /* name -> NAME */
#line 606 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(1), NAME, getText());               }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 192: /* hostvar -> HOSTVAR */
#line 609 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(1), HOSTVAR, getText());            }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 193: /* param -> PARAM */
#line 612 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(1), PARAM, getText());              }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 194: /* number_const -> NUMBER */
#line 615 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(1), NUMBER, _ttof(getText()));      }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 195: /* string_const -> STRING */
#line 618 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(1), STRING, getText());             }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 196: /* date_const -> DATECONST */
#line 621 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(1), DATECONST, ttoDate(getText())); }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 197: /* time_const -> TIMECONST */
#line 624 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(1), TIMECONST, ttoTime(getText())); }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  case 198: /* timestamp_const -> TIMESTAMPCONST */
#line 627 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
    { m_leftSide = newNode( getPos(1), TIMESTAMPCONST, ttoTimestamp(getText())); }
#line 27 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
    break;
  }
#line 30 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
  return 0;
}

#line 632 "C:\\Mytools2015\\Dbase\\SqlParse\\Sql.y"
Date SqlParser::ttoDate(const TCHAR *str) {
  try {
    return Date(str+1);
  } catch(Exception e) {
    error(getPos(),_T("%s"), e.what());
    return Date();
  }
}

Time SqlParser::ttoTime(const TCHAR *str) {
  try {
    return Time(str+1);
  } catch(Exception e) {
    error(getPos(), _T("%s"), e.what());
    return Time();
  }
}

Timestamp SqlParser::ttoTimestamp(const TCHAR *str) {
  try {
    return Timestamp(str+1);
  } catch(Exception e) {
    error(getPos(), _T("%s"), e.what());
    return Timestamp();
  }
}

void SqlParser::verror(const SourcePosition &pos, const TCHAR *format, va_list argptr) {
  m_tree.vAppendError(pos,SQL_SYNTAX_ERROR, format, argptr);
}

void SqlParser::parse(const SourcePosition &pos, const String &stmt) {
  LexStringStream stream(stmt);
  SqlLex lex(this);
  lex.newStream(&stream,pos);
  setScanner(&lex);
//  setdebug(true);
//  lex.setdebug(true);
  LRparser::parse();
}

SyntaxNode *SqlParser::newNode(const SourcePosition &pos, int token, ...) {
  va_list argptr;
  va_start(argptr,token);
  SyntaxNode *p = m_tree.vFetchTokenNode(token,argptr);
  va_end(argptr);
  p->setpos(pos);
  return p;
}
#line 33 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
