/* DO NOT EDIT THIS FILE - it is machine generated */
#line 32 "C:\\Mytools2015\\ParserGen\\dummy\\Dummy.y"
#include "stdafx.h"
#include "dummyparser.h"
#line 36 "C:\\mytools2015\\ParserGen\\lib\\parsergencpp.par"
#include <ParserTablesTemplate.h>
#define _tc0000 0x00000000 /*                                                       */
#define _tc0001 0x00068004 /* a   Split(_ts0000,_ts0001)                            */
#define _tc0002 0x00078000 /* b   Shift to    3 on states in shiftStateBitSet[0]    */
#define _ts0000 0x00058000 /* Shift to    2 on states in shiftStateBitSet[0]      Used by 1 terminal  [a]*/
#define _ts0001 0x00098001 /* Shift to    4 on states in shiftStateBitSet[1]      Used by 1 terminal  [a]*/

static const unsigned int shiftCodeArray[5] = {
   _tc0000,_tc0001,_tc0002
  ,_ts0000,_ts0001
}; // Size of table:20(x86)/24(x64) bytes.

#define shiftFromStateArrayTable nullptr
#define shiftToStateArrayTable   nullptr

static const unsigned char shiftStateBitSetTable[2] = { /* range:[0-5], bytes in bitset=1 */
   0x05 /*   0   2 states Used by 2 terminals [a b]              */
  ,0x22 /*   1   2 states Used by 1 terminal  [a]                */
}; // Size of table:4(x86)/8(x64) bytes.

#define _rc0000 0x00037fff /*                                                       */
#define _rc0001 0x00010000 /* Reduce by    0 (Accept) on EOI                        */
#define _rc0002 0x00090000 /* Reduce by    4 on EOI                                 */
#define _rc0003 0x00078000 /* Reduce by    3 on tokens in termBitSet[0]             */
#define _rc0004 0x00058000 /* Reduce by    2 on tokens in termBitSet[0]             */
#define _rc0005 0x00030000 /* Reduce by    1 on EOI                                 */

static const unsigned int reduceCodeArray[6] = {
   _rc0000,_rc0001,_rc0002,_rc0003,_rc0004,_rc0005
}; // Size of table:24(x86)/24(x64) bytes.

#define termArrayTable   nullptr
#define reduceArrayTable nullptr

static const unsigned char termBitSetTable[1] = { /* range:[0-2], bytes in bitset=1 */
   0x03 /*   0   2 tokens Used by 2 states [3-4]                 */
}; // Size of table:4(x86)/8(x64) bytes.

#define _nc0000 0x00000000 /*                                                       */
#define _nc0001 0x00000000 /* S     stateArray    0, newStateArray    0             */

static const unsigned int succCodeArray[2] = {
   _nc0000,_nc0001
}; // Size of table:8(x86)/8(x64) bytes.

static const unsigned char succFromStateArrayTable[3] = {
     2,   0,   2                                                                                             /*   0 Used by 1 ntIndex   [S]                           */
}; // Size of table:4(x86)/8(x64) bytes.

static const unsigned char succToStateArrayTable[2] = {
      1,   5                                                                                                 /*   0 Used by 1 ntIndex   [S]                           */
}; // Size of table:4(x86)/8(x64) bytes.

#define succStateBitSetTable nullptr

/************************************************************************************\
* The prodLengthArray[] is indexed by production number and holds the number of      *
* symbols on the right side of each production.                                      *
\************************************************************************************/
static const unsigned char prodLengthArray[5] = {
  /*   0 */    1,  2,  2,  1,  1
}; // Size of table:8(x86)/8(x64) bytes.

/************************************************************************************\
* leftSideArray[] is indexed by production number.                                   *
* leftSideArray[p] = A', A' = (A - termCount)                                        *
*                        where A is the left side of production p.                   *
* A' = [0..ntermCount-1]                                                             *
* p  = [0..productionCount-1]                                                        *
\************************************************************************************/
static const unsigned char leftSideArray[5] = {
  /*   0 */    0,  1,  1,  1,  1
}; // Size of table:8(x86)/8(x64) bytes.

/************************************************************************************\
* rightSideTable[] holds a compressed form of the rightsides of all productions in   *
* the grammar. Only used for debugging.                                              *
\************************************************************************************/
static const unsigned char rightSideTable[7] = {
  /*   0 */    4
  /*   1 */ ,  1,  4
  /*   2 */ ,  4,  1
  /*   3 */ ,  2
  /*   4 */ ,  1
}; // Size of table:8(x86)/8(x64) bytes.

/************************************************************************************\
* symbolNames is a space separated string with the names of all symbols used in the  *
* grammar, terminals and nonTerminals. Only used for debugging.                      *
\************************************************************************************/
static const char *symbolNames = {
  "EOI"                                               /* T     0               */
  " a"                                                /* T     1               */
  " b"                                                /* T     2               */
  " start"                                            /* NT    3 ntIndex=0     */
  " S"                                                /* NT    4 ntIndex=1     */
}; // Size of string:16(x86)/16(x64) bytes

static const ParserTablesTemplateTransShift<5,3,5,6,180,264,0,3,0,6,0,6
                                          ,unsigned char
                                          ,unsigned char
                                          ,unsigned char
                                          ,char
                                          ,unsigned char> DummyTables_s(prodLengthArray   , leftSideArray
                                                                       ,rightSideTable    , symbolNames
                                                                       ,shiftCodeArray    , shiftFromStateArrayTable, shiftToStateArrayTable, shiftStateBitSetTable
                                                                       ,reduceCodeArray   , termArrayTable          , reduceArrayTable      , termBitSetTable
                                                                       ,succCodeArray     , succFromStateArrayTable , succToStateArrayTable , succStateBitSetTable
                                                                       );

const AbstractParserTables *DummyParser::DummyTables = &DummyTables_s;
// Size of DummyTables_s: 68(x86)/128(x64) bytes. Size of DummyTables:4(x86)/8(x64) bytes

// Total size of table data:180(x86)/264(x64) bytes.
