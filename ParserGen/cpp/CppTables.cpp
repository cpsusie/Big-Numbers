/* DO NOT EDIT THIS FILE - it is machine generated */

#line 102 "C:\\Mytools2015\\ParserGen\\cpp\\Cpp.y"
#include "stdafx.h"
#include "CppParser.h"

#line 44 "C:\\mytools2015\\ParserGen\\lib\\parsergencpp.par"

#pragma warning(disable : 4312)



typedef short TableType;

/******************************************************************************\
* The action matrix holds the parse action(state,terminal)                     *
* Used in LRParser::parserStep() tp determine what to do in the current state  *
* and a given terminal on input. The interpretation of action is:              *
*                                                                              *
*   action <  0   - Reduce by production p, p == -action.                      *
*   action == 0   - Accept. Reduce by production 0.                            *
*   action >  0   - Go to state s (=action),                                   *
*                   and push [s,input,pos] to parser stack.                    *
*                   Then read next symbol from input.                          *
*   action == _ParserError - not found (=unexpected input).                    *
*                                                                              *
* 3 different formats are used:1 Uncompressed and 2 Compressed.                *
* Uncompressed state:                                                          *
*   The array uncompressedActions[] holds a list of numbers for each state     *
*   starting with number of items, M, belonging to the state, followed by M    *
*   pairs, each consisting of (token,action)                                   *
*     Item list for state NNNN with 2 items             2, 1, 2, 2,-3          *
*     Number of pairs in list---------------------------+  |  |  |  |          *
*     Legal input symbol-----------------------------------+  |  |  |          *
*     Action-(> 0 => shift input and goto state 1)------------+  |  |          *
*     Legal input symbol-----------------------------------------+  |          *
*     Action-(< 0 => reduce by production 3)------------------------+          *
*   A line containing "#define _acNNNN Index" is added, where Index is a       *
*   reference to the first number in list of numbers belonging to the state    *
*                                                                              *
* Compressed state:                                                            *
*   Single-item-state (SIS) ot Multi-item-state (MIS)                          *
*   SIS:If there is only 1 possible action in the state:                       *
*     A line containing "#define _acNNNN code" is added, where code is         *
*     encoded as:          ((Action&0x7fff) << 16) | (Token&0x7fff) )          *
*     Bit[16-30] = Action-------+                       |                      *
*     Bit[0 -14] = Legal token--------------------------+                      *
*     Bit 31     = 1 Compressed state indicator                                *
*     Bit 15     = 0 SIS compression                                           *
*                                                                              *
*   MIS:If all actions in the state are reduce by the same production:         *
*     A line containing "#define _acNNNN code" is added, where code is         *
*     encoded as:          ((Action&0x7fff) << 16) | (Index&0x7fff))           *
*     Bit[16-30] = Action-------+                       |                      *
*     Bit[0 -14] = Index into compressedLasets----------+                      *
*     Bit 31     = 1 Compressed state indicator                                *
*     Bit 15     = 1 MIS compression                                           *
*                                                                              *
* CompressedLasets is a list of bitsets, containing 1-bits for all legal       *
* inputsymbols in the given state (MIS). Many MIS may refer to the same bitset *
* Number of bytes in each bitset = (terminalcount-1)/8+1                       *
* Index in MIS-code refer to the first byte in the bitset belonging the state  *
*                                                                              *
* If any uncompressed state N has the same actionarray as a previous           *
* generated uncompressed state M, a #define _acN _acM                          *
*                                                                              *
\******************************************************************************/
static const BYTE compressedLasets[270] = {
  /*  0  10 tokens */  0x71,0x00,0x00,0x00,0x00,0x01,0x00,0x02,0xc1,0x01
  /*  1   4 tokens */ ,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x02,0x01,0x01
  /*  2   9 tokens */ ,0x70,0x00,0x00,0x00,0x00,0x41,0x00,0x02,0x81,0x01
  /*  3  12 tokens */ ,0x70,0x00,0x00,0x00,0x00,0x45,0x00,0x42,0x83,0x01
  /*  4   2 tokens */ ,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x01
  /*  5   2 tokens */ ,0x00,0x00,0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x00
  /*  6  15 tokens */ ,0x70,0x00,0x00,0x00,0xc0,0x4d,0x00,0x42,0x83,0x01
  /*  7  13 tokens */ ,0x70,0x00,0x00,0x00,0x40,0x45,0x00,0x42,0x83,0x01
  /*  8  31 tokens */ ,0x7e,0x00,0x00,0xff,0xef,0x01,0x08,0x3b,0x81,0x01
  /*  9   5 tokens */ ,0x70,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x80,0x00
  /* 10   2 tokens */ ,0x00,0x00,0x00,0x00,0x80,0x04,0x00,0x00,0x00,0x00
  /* 11   6 tokens */ ,0x00,0x00,0x00,0x00,0x40,0x05,0x00,0x40,0x03,0x00
  /* 12  25 tokens */ ,0x00,0x00,0x00,0x00,0x80,0xfd,0xff,0xe7,0x07,0x00
  /* 13   5 tokens */ ,0x00,0x00,0x00,0x00,0x80,0x45,0x00,0x80,0x00,0x00
  /* 14   9 tokens */ ,0x00,0x00,0x00,0x00,0x80,0x7d,0x00,0x80,0x02,0x00
  /* 15  10 tokens */ ,0x00,0x00,0x00,0x00,0x80,0xfd,0x00,0x80,0x02,0x00
  /* 16  26 tokens */ ,0x02,0x00,0x00,0x00,0x80,0xfd,0xff,0xe7,0x07,0x00
  /* 17   3 tokens */ ,0x00,0x00,0x00,0x00,0x80,0x05,0x00,0x00,0x00,0x00
  /* 18   7 tokens */ ,0x00,0x00,0x00,0x00,0x00,0x4d,0x00,0x40,0x03,0x00
  /* 19   2 tokens */ ,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x02,0x00
  /* 20   9 tokens */ ,0x70,0x00,0x00,0x00,0x00,0x04,0x00,0x42,0x03,0x01
  /* 21  35 tokens */ ,0x7f,0x00,0x00,0xff,0xff,0x01,0x08,0x3b,0xc1,0x03
  /* 22  32 tokens */ ,0x7e,0x00,0x00,0xff,0xef,0x01,0x08,0x3b,0x81,0x03
  /* 23   4 tokens */ ,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x40,0x03,0x00
  /* 24  21 tokens */ ,0x00,0x00,0x00,0x00,0x80,0xfd,0xff,0x87,0x02,0x00
  /* 25  33 tokens */ ,0x7e,0x00,0x00,0xff,0xff,0x01,0x08,0x3b,0x81,0x03
  /* 26   3 tokens */ ,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x40,0x02,0x00
}; // Size of table:272(x86)/272(x64) bytes.

static const TableType uncompressedActions[] = {
  /* state[1],Index=0                     */   10,   0,   0,   4,   9,   5,  12,   6,  14,  40,  -6
                                                 ,  57,  -6,  64,  -6,  70,   5,  71,   4,  72,  -6
  /* state[3],Index=21                    */ ,  4,  40,  16,  57,  21,  64,  22,  72,  23
  /* state[4],Index=30                    */ ,  9,   4, -13,   5, -13,   6, -13,  40, -13,  57, -13
                                                 ,  64, -13,  70,  24,  71, -13,  72, -13
  /* state[6],Index=49                    */ ,  8,   4,   9,   5,  12,   6,  14,  40,  -9,  57,  -9
                                                 ,  64,  -9,  71,  26,  72,  -9
  /* state[12],Index=66                   */ ,  2,  38, -56,  72,  29
  /* state[13],Index=71                   */ ,  2,  38,  31,  72,  23
  /* state[15],Index=76                   */ ,  2,  40,  32,  42,  33
  /* state[17],Index=81                   */ ,  5,  38,  37,  40, -21,  42, -21,  62,  35,  64,  36
  /* state[19],Index=92                   */ ,  5,  40, -19,  42, -19,  43,  38,  62,  40,  64,  39
  /* state[20],Index=103                  */ ,  7,  40, -22,  42, -22,  43, -22,  46, -22,  62, -22
                                                 ,  64,  41,  65, -22
  /* state[21],Index=118                  */ ,  3,  57,  21,  64,  22,  72,  23
  /* state[28],Index=125                  */ , 13,   4, -55,   5, -55,   6, -55,  38, -57,  40, -55
                                                 ,  42, -55,  46, -55,  57, -55,  62, -55,  64, -55
                                                 ,  65, -55,  71, -55,  72, -55
  /* state[30],Index=152                  */ , 13,   4, -72,   5, -72,   6, -72,  38,  48,  40, -72
                                                 ,  42, -72,  46, -72,  57, -72,  62, -72,  64, -72
                                                 ,  65, -72,  71, -72,  72, -72
  /* state[35],Index=179                  */ , 12,   1,  75,   2,  58,   3,  57,  51,  66,  56,  62
                                                 ,  57,  67,  59,  61,  60,  63,  61,  65,  63,  54
                                                 ,  64,  56,  72,  59
  /* state[38],Index=204                  */ , 12,   1,  75,   2,  58,   3,  57,  38,  80,  51,  66
                                                 ,  56,  62,  57,  67,  59,  61,  60,  63,  61,  65
                                                 ,  64,  56,  72,  59
  /* state[39],Index=229                  */ ,  6,   4,   9,   5,  12,   6,  14,  41,  86,  65,  81
                                                 ,  70,  88
  /* state[40],Index=242                  */ , 12,   1,  75,   2,  58,   3,  57,  51,  66,  56,  62
                                                 ,  57,  67,  59,  61,  60,  63,  61,  65,  63,  89
                                                 ,  64,  56,  72,  59
  /* state[41],Index=267                  */ ,  7,   4,   9,   5,  12,   6,  14,  41,  86,  65,  91
                                                 ,  70,  88,  72,  23
  /* state[42],Index=282                  */ ,  7,  40, -27,  42, -27,  43, -27,  46, -27,  62,  40
                                                 ,  64,  39,  65, -27
  /* state[43],Index=297                  */ ,  6,  38, -29,  40, -29,  42, -29,  62,  35,  64,  36
                                                 ,  65, -29
  /* state[44],Index=310                  */ ,  3,  62,  40,  64,  39,  65,  95
  /* state[45],Index=317                  */ ,  3,  62,  35,  64,  36,  65,  96
  /* state[49],Index=324                  */ ,  2,  39,  99,  42, 100
  /* state[51],Index=329                  */ ,  3,  39, -77,  42, -77,  43, 101
  /* state[53],Index=336                  */ ,  4,  40, -21,  42, -21,  62,  35,  64,  36
  /* state[56],Index=345                  */ , 15,   1,  75,   2,  58,   3,  57,   4,   9,   5,  12
                                                 ,   6,  14,  51,  66,  56,  62,  57,  67,  59,  61
                                                 ,  60,  63,  61,  65,  64,  56,  70,  88,  72,  59
  /* state[60],Index=376                  */ , 26,   1, 106,  39,-115,  40,-115,  42,-115,  43,-115
                                                 ,  44,-115,  45,-115,  46,-115,  47,-115,  48,-115
                                                 ,  49,-115,  50,-115,  51,-115,  52,-115,  53,-115
                                                 ,  54,-115,  55,-115,  56,-115,  57,-115,  58,-115
                                                 ,  61,-115,  62,-115,  63,-115,  64,-115,  65,-115
                                                 ,  66,-115
  /* state[62],Index=429                  */ , 11,   1,  75,   2,  58,   3,  57,  51,  66,  56,  62
                                                 ,  57,  67,  59,  61,  60,  63,  61,  65,  64,  56
                                                 ,  72,  59
  /* state[64],Index=452                  */ , 25,  39,-154,  40,-154,  42,-154,  43,-154,  44,-154
                                                 ,  45,-154,  46,-154,  47,-154,  48,-154,  49,-154
                                                 ,  50,-154,  51,-154,  52,-154,  53,-154,  54,-154
                                                 ,  55,-154,  56,-154,  57,-154,  58,-154,  61, 110
                                                 ,  62, 111,  63,-154,  64, 113,  65,-154,  66, 112
  /* state[69],Index=503                  */ ,  9,  39,-133,  40,-133,  42,-133,  43, 120,  44, 119
                                                 ,  45, 118,  46,-133,  63,-133,  65,-133
  /* state[71],Index=522                  */ , 10,  39,-138,  40,-138,  42,-138,  43,-138,  44,-138
                                                 ,  45,-138,  46,-138,  47, 121,  63,-138,  65,-138
  /* state[73],Index=543                  */ , 11,  39,-141,  40,-141,  42,-141,  43,-141,  44,-141
                                                 ,  45,-141,  46,-141,  47,-141,  48, 122,  63,-141
                                                 ,  65,-141
  /* state[74],Index=566                  */ , 21,  39,-143,  40,-143,  42,-143,  43,-143,  44,-143
                                                 ,  45,-143,  46,-143,  47,-143,  48,-143,  49, 130
                                                 ,  50, 129,  51, 128,  52, 124,  53, 123,  54, 127
                                                 ,  55, 131,  56, 132,  57, 125,  58, 126,  63,-143
                                                 ,  65,-143
  /* state[77],Index=609                  */ , 31,   1,  75,   2,  58,   3,  57,   4,   9,   5,  12
                                                 ,   6,  14,  24, 140,  25, 141,  26, 143,  27, 149
                                                 ,  28, 150,  29, 151,  30, 147,  31, 148,  32, 144
                                                 ,  33, 145,  34, 146,  35, 153,  37, 152,  38,  37
                                                 ,  39, 133,  40, 137,  51,  66,  56,  62,  57,  67
                                                 ,  59,  61,  60,  63,  61,  65,  64,  56,  71,  26
                                                 ,  72, 154
  /* state[82],Index=672                  */ ,  2,  42, 158,  65, 157
  /* state[84],Index=677                  */ ,  9,   4,   9,   5,  12,   6,  14,  42, -48,  57, 163
                                                 ,  62, -48,  64, 164,  65, -48,  72,  23
  /* state[88],Index=696                  */ ,  5,  42, -48,  57, 167,  62, -48,  64, 166,  65, -48
  /* state[92],Index=707                  */ ,  2,  42, 170,  65, 169
  /* state[93],Index=712                  */ ,  2,  42, 158,  65, 171
  /* state[97],Index=717                  */ ,  5,   4,   9,   5,  12,   6,  14,  39, 172,  71,  26
  /* state[98],Index=728                  */ ,  2,  39, 174,  42, 100
  /* state[103],Index=733                 */ ,  2,  42, 117,  65, 177
  /* state[105],Index=738                 */ ,  7,   4,   9,   5,  12,   6,  14,  57, 167,  62, -48
                                                 ,  64, 166,  65, -48
  /* state[108],Index=753                 */ , 25,  39,-120,  40,-120,  42,-120,  43,-120,  44,-120
                                                 ,  45,-120,  46,-120,  47,-120,  48,-120,  49,-120
                                                 ,  50,-120,  51,-120,  52,-120,  53,-120,  54,-120
                                                 ,  55,-120,  56,-120,  57,-120,  58,-120,  61, 110
                                                 ,  62, 111,  63,-120,  64, 113,  65,-120,  66, 112
  /* state[109],Index=804                 */ , 25,  39,-121,  40,-121,  42,-121,  43,-121,  44,-121
                                                 ,  45,-121,  46,-121,  47,-121,  48,-121,  49,-121
                                                 ,  50,-121,  51,-121,  52,-121,  53,-121,  54,-121
                                                 ,  55,-121,  56,-121,  57,-121,  58,-121,  61, 110
                                                 ,  62, 111,  63,-121,  64, 113,  65,-121,  66, 112
  /* state[113],Index=855                 */ , 12,   1,  75,   2,  58,   3,  57,  51,  66,  56,  62
                                                 ,  57,  67,  59,  61,  60,  63,  61,  65,  64,  56
                                                 ,  65, 185,  72,  59
  /* state[114],Index=880                 */ , 25,  39,-123,  40,-123,  42,-123,  43,-123,  44,-123
                                                 ,  45,-123,  46,-123,  47,-123,  48,-123,  49,-123
                                                 ,  50,-123,  51,-123,  52,-123,  53,-123,  54,-123
                                                 ,  55,-123,  56,-123,  57,-123,  58,-123,  61, 110
                                                 ,  62, 111,  63,-123,  64, 113,  65,-123,  66, 112
  /* state[115],Index=931                 */ , 25,  39,-124,  40,-124,  42,-124,  43,-124,  44,-124
                                                 ,  45,-124,  46,-124,  47,-124,  48,-124,  49,-124
                                                 ,  50,-124,  51,-124,  52,-124,  53,-124,  54,-124
                                                 ,  55,-124,  56,-124,  57,-124,  58,-124,  61, 110
                                                 ,  62, 111,  63,-124,  64, 113,  65,-124,  66, 112
  /* state[116],Index=982                 */ , 25,  39,-125,  40,-125,  42,-125,  43,-125,  44,-125
                                                 ,  45,-125,  46,-125,  47,-125,  48,-125,  49,-125
                                                 ,  50,-125,  51,-125,  52,-125,  53,-125,  54,-125
                                                 ,  55,-125,  56,-125,  57,-125,  58,-125,  61, 110
                                                 ,  62, 111,  63,-125,  64, 113,  65,-125,  66, 112
  /* state[136],Index=1033                */ ,  9,   4,   9,   5,  12,   6,  14,  40, 204,  46, 208
                                                 ,  57,  21,  64,  22,  71,  26,  72,  23
  /* state[139],Index=1052                */ ,  2,  40, 209,  42, 117
  /* state[140],Index=1057                */ , 12,   1,  75,   2,  58,   3,  57,  40, 210,  51,  66
                                                 ,  56,  62,  57,  67,  59,  61,  60,  63,  61,  65
                                                 ,  64,  56,  72,  59
  /* state[145],Index=1082                */ , 26,   1,  75,   2,  58,   3,  57,  24, 140,  25, 141
                                                 ,  26, 143,  27, 149,  28, 150,  29, 151,  30, 147
                                                 ,  31, 148,  32, 144,  33, 145,  34, 146,  35, 153
                                                 ,  37, 152,  38,  37,  40, 137,  51,  66,  56,  62
                                                 ,  57,  67,  59,  61,  60,  63,  61,  65,  64,  56
                                                 ,  72, 154
  /* state[154],Index=1135                */ , 22,  40,-114,  42,-114,  43,-114,  44,-114,  45,-114
                                                 ,  46,-108,  47,-114,  48,-114,  49,-114,  50,-114
                                                 ,  51,-114,  52,-114,  53,-114,  54,-114,  55,-114
                                                 ,  56,-114,  57,-114,  58,-114,  61,-114,  62,-114
                                                 ,  64,-114,  66,-114
  /* state[155],Index=1180                */ ,  2,  39, 226,  42, 227
  /* state[158],Index=1185                */ ,  5,   4,   9,   5,  12,   6,  14,  41,  86,  70,  88
  /* state[159],Index=1196                */ ,  4,  42, -41,  62,  40,  64,  39,  65, -41
  /* state[161],Index=1205                */ ,  3,  42, -46,  62, 229,  65, -46
  /* state[163],Index=1212                */ ,  6,  42, -48,  57, 163,  62, -48,  64, 164,  65, -48
                                                 ,  72,  23
  /* state[164],Index=1225                */ ,  5,  57, 163,  62, -48,  64, 164,  65, -48,  72,  23
  /* state[165],Index=1236                */ ,  3,  42, -47,  62, 229,  65, -47
  /* state[166],Index=1243                */ ,  4,  57, 167,  62, -48,  64, 166,  65, -48
  /* state[179],Index=1252                */ , 22,   1, 106,  42,-115,  43,-115,  44,-115,  45,-115
                                                 ,  47,-115,  48,-115,  49,-115,  50,-115,  51,-115
                                                 ,  52,-115,  53,-115,  54,-115,  55,-115,  56,-115
                                                 ,  57,-115,  58,-115,  61,-115,  62,-115,  64,-115
                                                 ,  65, 234,  66,-115
  /* state[180],Index=1297                */ ,  2,  42, 117,  65, 235
  /* state[182],Index=1302                */ ,  2,  42, 117,  63, 237
  /* state[186],Index=1307                */ ,  5,  42, 239,  43, 120,  44, 119,  45, 118,  65,-130
  /* state[187],Index=1318                */ ,  9,  39,-132,  40,-132,  42,-132,  43, 120,  44, 119
                                                 ,  45, 118,  46,-132,  63,-132,  65,-132
  /* state[188],Index=1337                */ ,  4,  43, 120,  44, 119,  45, 118,  46, 240
  /* state[189],Index=1346                */ ,  9,  39,-135,  40,-135,  42,-135,  43, 120,  44, 119
                                                 ,  45, 118,  46,-135,  63,-135,  65,-135
  /* state[190],Index=1365                */ ,  9,  39,-136,  40,-136,  42,-136,  43, 120,  44, 119
                                                 ,  45, 118,  46,-136,  63,-136,  65,-136
  /* state[192],Index=1384                */ , 21,  39,-142,  40,-142,  42,-142,  43,-142,  44,-142
                                                 ,  45,-142,  46,-142,  47,-142,  48,-142,  49, 130
                                                 ,  50, 129,  51, 128,  52, 124,  53, 123,  54, 127
                                                 ,  55, 131,  56, 132,  57, 125,  58, 126,  63,-142
                                                 ,  65,-142
  /* state[193],Index=1427                */ , 21,  39,-144,  40,-144,  42,-144,  43,-144,  44,-144
                                                 ,  45,-144,  46,-144,  47,-144,  48,-144,  49,-144
                                                 ,  50,-144,  51,-144,  52,-144,  53,-144,  54, 127
                                                 ,  55, 131,  56, 132,  57, 125,  58, 126,  63,-144
                                                 ,  65,-144
  /* state[194],Index=1470                */ , 21,  39,-145,  40,-145,  42,-145,  43,-145,  44,-145
                                                 ,  45,-145,  46,-145,  47,-145,  48,-145,  49,-145
                                                 ,  50,-145,  51,-145,  52,-145,  53, 123,  54, 127
                                                 ,  55, 131,  56, 132,  57, 125,  58, 126,  63,-145
                                                 ,  65,-145
  /* state[197],Index=1513                */ , 21,  39,-148,  40,-148,  42,-148,  43,-148,  44,-148
                                                 ,  45,-148,  46,-148,  47,-148,  48,-148,  49,-148
                                                 ,  50,-148,  51,-148,  52,-148,  53,-148,  54,-148
                                                 ,  55, 131,  56, 132,  57, 125,  58, 126,  63,-148
                                                 ,  65,-148
  /* state[198],Index=1556                */ , 21,  39,-149,  40,-149,  42,-149,  43,-149,  44,-149
                                                 ,  45,-149,  46,-149,  47,-149,  48,-149,  49,-149
                                                 ,  50,-149,  51,-149,  52, 124,  53, 123,  54, 127
                                                 ,  55, 131,  56, 132,  57, 125,  58, 126,  63,-149
                                                 ,  65,-149
  /* state[199],Index=1599                */ , 21,  39,-150,  40,-150,  42,-150,  43,-150,  44,-150
                                                 ,  45,-150,  46,-150,  47,-150,  48,-150,  49,-150
                                                 ,  50,-150,  51, 128,  52, 124,  53, 123,  54, 127
                                                 ,  55, 131,  56, 132,  57, 125,  58, 126,  63,-150
                                                 ,  65,-150
  /* state[200],Index=1642                */ , 21,  39,-151,  40,-151,  42,-151,  43,-151,  44,-151
                                                 ,  45,-151,  46,-151,  47,-151,  48,-151,  49,-151
                                                 ,  50, 129,  51, 128,  52, 124,  53, 123,  54, 127
                                                 ,  55, 131,  56, 132,  57, 125,  58, 126,  63,-151
                                                 ,  65,-151
  /* state[201],Index=1685                */ , 21,  39,-152,  40,-152,  42,-152,  43,-152,  44,-152
                                                 ,  45,-152,  46,-152,  47,-152,  48,-152,  49,-152
                                                 ,  50,-152,  51,-152,  52,-152,  53,-152,  54,-152
                                                 ,  55,-152,  56,-152,  57, 125,  58, 126,  63,-152
                                                 ,  65,-152
  /* state[202],Index=1728                */ , 21,  39,-153,  40,-153,  42,-153,  43,-153,  44,-153
                                                 ,  45,-153,  46,-153,  47,-153,  48,-153,  49,-153
                                                 ,  50,-153,  51,-153,  52,-153,  53,-153,  54,-153
                                                 ,  55,-153,  56,-153,  57, 125,  58, 126,  63,-153
                                                 ,  65,-153
  /* state[203],Index=1771                */ ,  2,  40, 241,  42, 242
  /* state[205],Index=1776                */ ,  6,  40, -66,  42, -66,  43, 243,  46, 244,  62,  40
                                                 ,  64,  39
  /* state[206],Index=1789                */ ,  4,  40, -65,  42, -65,  62,  35,  64,  36
  /* state[211],Index=1798                */ ,  2,  40, 246,  42, 117
  /* state[215],Index=1803                */ , 12,   1,  75,   2,  58,   3,  57,  51,  66,  56,  62
                                                 ,  57,  67,  59,  61,  60,  63,  61,  65,  64,  56
                                                 ,  65,-109,  72,  59
  /* state[218],Index=1828                */ , 12,   1,  75,   2,  58,   3,  57,  40,-155,  51,  66
                                                 ,  56,  62,  57,  67,  59,  61,  60,  63,  61,  65
                                                 ,  64,  56,  72,  59
  /* state[224],Index=1853                */ ,  2,  40, 257,  42, 117
  /* state[229],Index=1858                */ , 12,   1,  75,   2,  58,   3,  57,  51,  66,  56,  62
                                                 ,  57,  67,  59,  61,  60,  63,  61,  65,  63, 262
                                                 ,  64,  56,  72,  59
  /* state[230],Index=1883                */ ,  3,  42, -50,  62, 229,  65, -50
  /* state[231],Index=1890                */ ,  2,  62, 229,  65, 264
  /* state[233],Index=1895                */ , 25,  39,-119,  40,-119,  42,-119,  43,-119,  44,-119
                                                 ,  45,-119,  46,-119,  47,-119,  48,-119,  49,-119
                                                 ,  50,-119,  51,-119,  52,-119,  53,-119,  54,-119
                                                 ,  55,-119,  56,-119,  57,-119,  58,-119,  61, 110
                                                 ,  62, 111,  63,-119,  64, 113,  65,-119,  66, 112
  /* state[242],Index=1946                */ ,  4,  46, 208,  57,  21,  64,  22,  72,  23
  /* state[250],Index=1955                */ ,  3,  40,-110,  42, 117,  65,-110
  /* state[254],Index=1962                */ ,  3,  40,-156,  42, 117,  65,-156
  /* state[255],Index=1969                */ ,  2,  42, 117,  65, 274
  /* state[258],Index=1974                */ , 33,   1,-101,   2,-101,   3,-101,   4,-101,   5,-101
                                                 ,   6,-101,  24,-101,  25,-101,  26,-101,  27,-101
                                                 ,  28,-101,  29,-101,  30,-101,  31,-101,  32,-101
                                                 ,  33,-101,  34,-101,  35,-101,  36, 260,  37,-101
                                                 ,  38,-101,  39,-101,  40,-101,  51,-101,  56,-101
                                                 ,  57,-101,  59,-101,  60,-101,  61,-101,  64,-101
                                                 ,  71,-101,  72,-101,  73,-101
  /* state[264],Index=2041                */ ,  4,  42, -53,  62, -53,  64, 278,  65, -53
  /* state[266],Index=2050                */ ,  9,  39,-134,  40,-134,  42,-134,  43,-134,  44,-134
                                                 ,  45, 118,  46,-134,  63,-134,  65,-134
  /* state[273],Index=2069                */ , 12,   1,  75,   2,  58,   3,  57,  40,-109,  51,  66
                                                 ,  56,  62,  57,  67,  59,  61,  60,  63,  61,  65
                                                 ,  64,  56,  72,  59
  /* state[276],Index=2094                */ ,  4,   4,   9,   5,  12,   6,  14,  41, 286
  /* state[279],Index=2103                */ , 32,   1, -90,   2, -90,   3, -90,   4, -90,   5, -90
                                                 ,   6, -90,  24, -90,  25, -90,  26, -90,  27, -90
                                                 ,  28, -90,  29, -90,  30, -90,  31, -90,  32, -90
                                                 ,  33, -90,  34, -90,  35, -90,  37, -90,  38, -90
                                                 ,  39, -90,  40, -90,  51, -90,  56, -90,  57, -90
                                                 ,  59, -90,  60, -90,  61, -90,  64, -90,  71, -90
                                                 ,  72, -90,  73, 288
  /* state[285],Index=2168                */ ,  7,   4,   9,   5,  12,   6,  14,  57, 293,  64, 294
                                                 ,  65,-107,  72,  23
  /* state[290],Index=2183                */ , 12,   1,  75,   2,  58,   3,  57,  51,  66,  56,  62
                                                 ,  57,  67,  59,  61,  60,  63,  61,  65,  64,  56
                                                 ,  65,-155,  72,  59
  /* state[292],Index=2208                */ ,  3,  62,  40,  64,  39,  65,-106
  /* state[293],Index=2215                */ ,  3,  57, 293,  64, 294,  72,  23
}; // Size of table:4.444(x86)/4.448(x64) bytes.

#define _ac0000 0xffff8000 /* Reduce by 1 on tokens in set[0]         */
#define _ac0001 0          /* Index of uncompressed state[1]          */
#define _ac0002 0xfffe8000 /* Reduce by 2 on tokens in set[0]         */
#define _ac0003 21         /* Index of uncompressed state[3]          */
#define _ac0004 30         /* Index of uncompressed state[4]          */
#define _ac0005 0xfff8800a /* Reduce by 8 on tokens in set[1]         */
#define _ac0006 49         /* Index of uncompressed state[6]          */
#define _ac0007 0xfff68014 /* Reduce by 10 on tokens in set[2]        */
#define _ac0008 0xfff48014 /* Reduce by 12 on tokens in set[2]        */
#define _ac0009 0xfff2801e /* Reduce by 14 on tokens in set[3]        */
#define _ac0010 0xfff1801e /* Reduce by 15 on tokens in set[3]        */
#define _ac0011 0xfff0801e /* Reduce by 16 on tokens in set[3]        */
#define _ac0012 66         /* Index of uncompressed state[12]         */
#define _ac0013 71         /* Index of uncompressed state[13]         */
#define _ac0014 0xffb68028 /* Reduce by 74 on tokens in set[4]        */
#define _ac0015 76         /* Index of uncompressed state[15]         */
#define _ac0016 0xfffc8000 /* Reduce by 4 on tokens in set[0]         */
#define _ac0017 81         /* Index of uncompressed state[17]         */
#define _ac0018 0xffef8032 /* Reduce by 17 on tokens in set[5]        */
#define _ac0019 92         /* Index of uncompressed state[19]         */
#define _ac0020 103        /* Index of uncompressed state[20]         */
#define _ac0021 118        /* Index of uncompressed state[21]         */
#define _ac0022 _ac0021    /* Saved 14 bytes                          */
#define _ac0023 0xff5c803c /* Reduce by 164 on tokens in set[6]       */
#define _ac0024 0xfff9800a /* Reduce by 7 on tokens in set[1]         */
#define _ac0025 0xfff58014 /* Reduce by 11 on tokens in set[2]        */
#define _ac0026 0xfff38014 /* Reduce by 13 on tokens in set[2]        */
#define _ac0027 0x802e0026 /* Shift  to 46 on LC                      */
#define _ac0028 125        /* Index of uncompressed state[28]         */
#define _ac0029 0xffc68046 /* Reduce by 58 on tokens in set[7]        */
#define _ac0030 152        /* Index of uncompressed state[30]         */
#define _ac0031 0x80170048 /* Shift  to 23 on NAME                    */
#define _ac0032 0xfffd8000 /* Reduce by 3 on tokens in set[0]         */
#define _ac0033 _ac0021    /* Saved 14 bytes                          */
#define _ac0034 0xfffb8000 /* Reduce by 5 on tokens in set[0]         */
#define _ac0035 179        /* Index of uncompressed state[35]         */
#define _ac0036 0x804c0041 /* Shift  to 76 on RPAR                    */
#define _ac0037 0xffb08050 /* Reduce by 80 on tokens in set[8]        */
#define _ac0038 204        /* Index of uncompressed state[38]         */
#define _ac0039 229        /* Index of uncompressed state[39]         */
#define _ac0040 242        /* Index of uncompressed state[40]         */
#define _ac0041 267        /* Index of uncompressed state[41]         */
#define _ac0042 282        /* Index of uncompressed state[42]         */
#define _ac0043 297        /* Index of uncompressed state[43]         */
#define _ac0044 310        /* Index of uncompressed state[44]         */
#define _ac0045 317        /* Index of uncompressed state[45]         */
#define _ac0046 0xffc5805a /* Reduce by 59 on tokens in set[9]        */
#define _ac0047 0xffba801e /* Reduce by 70 on tokens in set[3]        */
#define _ac0048 0x80170048 /* Shift  to 23 on NAME                    */
#define _ac0049 324        /* Index of uncompressed state[49]         */
#define _ac0050 0xffb58064 /* Reduce by 75 on tokens in set[10]       */
#define _ac0051 329        /* Index of uncompressed state[51]         */
#define _ac0052 0xffee8032 /* Reduce by 18 on tokens in set[5]        */
#define _ac0053 336        /* Index of uncompressed state[53]         */
#define _ac0054 0xffe2806e /* Reduce by 30 on tokens in set[11]       */
#define _ac0055 0x8066003f /* Shift  to 102 on RB                     */
#define _ac0056 345        /* Index of uncompressed state[56]         */
#define _ac0057 0xff908078 /* Reduce by 112 on tokens in set[12]      */
#define _ac0058 0xff8f8078 /* Reduce by 113 on tokens in set[12]      */
#define _ac0059 0xff8e8078 /* Reduce by 114 on tokens in set[12]      */
#define _ac0060 376        /* Index of uncompressed state[60]         */
#define _ac0061 0x806b0040 /* Shift  to 107 on LPAR                   */
#define _ac0062 429        /* Index of uncompressed state[62]         */
#define _ac0063 _ac0062    /* Saved 46 bytes                          */
#define _ac0064 452        /* Index of uncompressed state[64]         */
#define _ac0065 _ac0062    /* Saved 46 bytes                          */
#define _ac0066 _ac0062    /* Saved 46 bytes                          */
#define _ac0067 _ac0062    /* Saved 46 bytes                          */
#define _ac0068 0xff638082 /* Reduce by 157 on tokens in set[13]      */
#define _ac0069 503        /* Index of uncompressed state[69]         */
#define _ac0070 0xff77808c /* Reduce by 137 on tokens in set[14]      */
#define _ac0071 522        /* Index of uncompressed state[71]         */
#define _ac0072 0xff748096 /* Reduce by 140 on tokens in set[15]      */
#define _ac0073 543        /* Index of uncompressed state[73]         */
#define _ac0074 566        /* Index of uncompressed state[74]         */
#define _ac0075 0xff5e80a0 /* Reduce by 162 on tokens in set[16]      */
#define _ac0076 0xffdf806e /* Reduce by 33 on tokens in set[11]       */
#define _ac0077 609        /* Index of uncompressed state[77]         */
#define _ac0078 0xffec8032 /* Reduce by 20 on tokens in set[5]        */
#define _ac0079 0xff6280aa /* Reduce by 158 on tokens in set[17]      */
#define _ac0080 _ac0038    /* Saved 50 bytes                          */
#define _ac0081 0xffe980b4 /* Reduce by 23 on tokens in set[18]       */
#define _ac0082 672        /* Index of uncompressed state[82]         */
#define _ac0083 0xffd980be /* Reduce by 39 on tokens in set[19]       */
#define _ac0084 677        /* Index of uncompressed state[84]         */
#define _ac0085 0xffd680be /* Reduce by 42 on tokens in set[19]       */
#define _ac0086 0xffd580be /* Reduce by 43 on tokens in set[19]       */
#define _ac0087 0xffd480c8 /* Reduce by 44 on tokens in set[20]       */
#define _ac0088 696        /* Index of uncompressed state[88]         */
#define _ac0089 0xffe780b4 /* Reduce by 25 on tokens in set[18]       */
#define _ac0090 0x80a8003f /* Shift  to 168 on RB                     */
#define _ac0091 0xffde806e /* Reduce by 34 on tokens in set[11]       */
#define _ac0092 707        /* Index of uncompressed state[92]         */
#define _ac0093 712        /* Index of uncompressed state[93]         */
#define _ac0094 0xffdb80be /* Reduce by 37 on tokens in set[19]       */
#define _ac0095 0xffe480b4 /* Reduce by 28 on tokens in set[18]       */
#define _ac0096 0xffe0806e /* Reduce by 32 on tokens in set[11]       */
#define _ac0097 717        /* Index of uncompressed state[97]         */
#define _ac0098 728        /* Index of uncompressed state[98]         */
#define _ac0099 0xffb9801e /* Reduce by 71 on tokens in set[3]        */
#define _ac0100 0x80170048 /* Shift  to 23 on NAME                    */
#define _ac0101 _ac0062    /* Saved 46 bytes                          */
#define _ac0102 0xffe1806e /* Reduce by 31 on tokens in set[11]       */
#define _ac0103 733        /* Index of uncompressed state[103]        */
#define _ac0104 0x80b20041 /* Shift  to 178 on RPAR                   */
#define _ac0105 738        /* Index of uncompressed state[105]        */
#define _ac0106 0xff5d80a0 /* Reduce by 163 on tokens in set[16]      */
#define _ac0107 _ac0056    /* Saved 62 bytes                          */
#define _ac0108 753        /* Index of uncompressed state[108]        */
#define _ac0109 804        /* Index of uncompressed state[109]        */
#define _ac0110 0xff868078 /* Reduce by 122 on tokens in set[12]      */
#define _ac0111 _ac0062    /* Saved 46 bytes                          */
#define _ac0112 0x80b70048 /* Shift  to 183 on NAME                   */
#define _ac0113 855        /* Index of uncompressed state[113]        */
#define _ac0114 880        /* Index of uncompressed state[114]        */
#define _ac0115 931        /* Index of uncompressed state[115]        */
#define _ac0116 982        /* Index of uncompressed state[116]        */
#define _ac0117 _ac0062    /* Saved 46 bytes                          */
#define _ac0118 _ac0062    /* Saved 46 bytes                          */
#define _ac0119 _ac0062    /* Saved 46 bytes                          */
#define _ac0120 _ac0062    /* Saved 46 bytes                          */
#define _ac0121 _ac0062    /* Saved 46 bytes                          */
#define _ac0122 _ac0062    /* Saved 46 bytes                          */
#define _ac0123 _ac0062    /* Saved 46 bytes                          */
#define _ac0124 _ac0062    /* Saved 46 bytes                          */
#define _ac0125 _ac0062    /* Saved 46 bytes                          */
#define _ac0126 _ac0062    /* Saved 46 bytes                          */
#define _ac0127 _ac0062    /* Saved 46 bytes                          */
#define _ac0128 _ac0062    /* Saved 46 bytes                          */
#define _ac0129 _ac0062    /* Saved 46 bytes                          */
#define _ac0130 _ac0062    /* Saved 46 bytes                          */
#define _ac0131 _ac0062    /* Saved 46 bytes                          */
#define _ac0132 _ac0062    /* Saved 46 bytes                          */
#define _ac0133 0xffb180d2 /* Reduce by 79 on tokens in set[21]       */
#define _ac0134 0xffaf8050 /* Reduce by 81 on tokens in set[8]        */
#define _ac0135 0xffae8050 /* Reduce by 82 on tokens in set[8]        */
#define _ac0136 1033       /* Index of uncompressed state[136]        */
#define _ac0137 0xffad80dc /* Reduce by 83 on tokens in set[22]       */
#define _ac0138 0xffac80dc /* Reduce by 84 on tokens in set[22]       */
#define _ac0139 1052       /* Index of uncompressed state[139]        */
#define _ac0140 1057       /* Index of uncompressed state[140]        */
#define _ac0141 0x80d50048 /* Shift  to 213 on NAME                   */
#define _ac0142 0x80d6002e /* Shift  to 214 on COLON                  */
#define _ac0143 0x80d70040 /* Shift  to 215 on LPAR                   */
#define _ac0144 0x80d80040 /* Shift  to 216 on LPAR                   */
#define _ac0145 1082       /* Index of uncompressed state[145]        */
#define _ac0146 0x80da0040 /* Shift  to 218 on LPAR                   */
#define _ac0147 0x80db0028 /* Shift  to 219 on SEMI                   */
#define _ac0148 0x80dc0028 /* Shift  to 220 on SEMI                   */
#define _ac0149 0x80dd0040 /* Shift  to 221 on LPAR                   */
#define _ac0150 _ac0062    /* Saved 46 bytes                          */
#define _ac0151 0x80df002e /* Shift  to 223 on COLON                  */
#define _ac0152 _ac0062    /* Saved 46 bytes                          */
#define _ac0153 0x80250026 /* Shift  to 37 on LC                      */
#define _ac0154 1135       /* Index of uncompressed state[154]        */
#define _ac0155 1180       /* Index of uncompressed state[155]        */
#define _ac0156 0xff608064 /* Reduce by 160 on tokens in set[10]      */
#define _ac0157 0xffe880b4 /* Reduce by 24 on tokens in set[18]       */
#define _ac0158 1185       /* Index of uncompressed state[158]        */
#define _ac0159 1196       /* Index of uncompressed state[159]        */
#define _ac0160 0xffd380c8 /* Reduce by 45 on tokens in set[20]       */
#define _ac0161 1205       /* Index of uncompressed state[161]        */
#define _ac0162 0xffea80e6 /* Reduce by 22 on tokens in set[23]       */
#define _ac0163 1212       /* Index of uncompressed state[163]        */
#define _ac0164 1225       /* Index of uncompressed state[164]        */
#define _ac0165 1236       /* Index of uncompressed state[165]        */
#define _ac0166 1243       /* Index of uncompressed state[166]        */
#define _ac0167 _ac0088    /* Saved 22 bytes                          */
#define _ac0168 0xffe680b4 /* Reduce by 26 on tokens in set[18]       */
#define _ac0169 0xffdd806e /* Reduce by 35 on tokens in set[11]       */
#define _ac0170 0x80170048 /* Shift  to 23 on NAME                    */
#define _ac0171 0xffdc806e /* Reduce by 36 on tokens in set[11]       */
#define _ac0172 0xffca801e /* Reduce by 54 on tokens in set[3]        */
#define _ac0173 0xffc4805a /* Reduce by 60 on tokens in set[9]        */
#define _ac0174 0xffb7801e /* Reduce by 73 on tokens in set[3]        */
#define _ac0175 0xffb48064 /* Reduce by 76 on tokens in set[10]       */
#define _ac0176 0xffb28064 /* Reduce by 78 on tokens in set[10]       */
#define _ac0177 0xff918078 /* Reduce by 111 on tokens in set[12]      */
#define _ac0178 _ac0062    /* Saved 46 bytes                          */
#define _ac0179 1252       /* Index of uncompressed state[179]        */
#define _ac0180 1297       /* Index of uncompressed state[180]        */
#define _ac0181 0x80ec0041 /* Shift  to 236 on RPAR                   */
#define _ac0182 1302       /* Index of uncompressed state[182]        */
#define _ac0183 0xff818078 /* Reduce by 127 on tokens in set[12]      */
#define _ac0184 0x80ee0041 /* Shift  to 238 on RPAR                   */
#define _ac0185 0xff7f8078 /* Reduce by 129 on tokens in set[12]      */
#define _ac0186 1307       /* Index of uncompressed state[186]        */
#define _ac0187 1318       /* Index of uncompressed state[187]        */
#define _ac0188 1337       /* Index of uncompressed state[188]        */
#define _ac0189 1346       /* Index of uncompressed state[189]        */
#define _ac0190 1365       /* Index of uncompressed state[190]        */
#define _ac0191 0xff758096 /* Reduce by 139 on tokens in set[15]      */
#define _ac0192 1384       /* Index of uncompressed state[192]        */
#define _ac0193 1427       /* Index of uncompressed state[193]        */
#define _ac0194 1470       /* Index of uncompressed state[194]        */
#define _ac0195 0xff6e80f0 /* Reduce by 146 on tokens in set[24]      */
#define _ac0196 0xff6d80f0 /* Reduce by 147 on tokens in set[24]      */
#define _ac0197 1513       /* Index of uncompressed state[197]        */
#define _ac0198 1556       /* Index of uncompressed state[198]        */
#define _ac0199 1599       /* Index of uncompressed state[199]        */
#define _ac0200 1642       /* Index of uncompressed state[200]        */
#define _ac0201 1685       /* Index of uncompressed state[201]        */
#define _ac0202 1728       /* Index of uncompressed state[202]        */
#define _ac0203 1771       /* Index of uncompressed state[203]        */
#define _ac0204 0xffc28050 /* Reduce by 62 on tokens in set[8]        */
#define _ac0205 1776       /* Index of uncompressed state[205]        */
#define _ac0206 1789       /* Index of uncompressed state[206]        */
#define _ac0207 0xffc18032 /* Reduce by 63 on tokens in set[5]        */
#define _ac0208 _ac0062    /* Saved 46 bytes                          */
#define _ac0209 0xffab80dc /* Reduce by 85 on tokens in set[22]       */
#define _ac0210 0xffaa80dc /* Reduce by 86 on tokens in set[22]       */
#define _ac0211 1798       /* Index of uncompressed state[211]        */
#define _ac0212 0x80f70028 /* Shift  to 247 on SEMI                   */
#define _ac0213 0xff940028 /* Reduce by 108 on SEMI                   */
#define _ac0214 _ac0145    /* Saved 106 bytes                         */
#define _ac0215 1803       /* Index of uncompressed state[215]        */
#define _ac0216 _ac0215    /* Saved 50 bytes                          */
#define _ac0217 0x80fc0020 /* Shift  to 252 on WHILE                  */
#define _ac0218 1828       /* Index of uncompressed state[218]        */
#define _ac0219 0xffa180dc /* Reduce by 95 on tokens in set[22]       */
#define _ac0220 0xffa080dc /* Reduce by 96 on tokens in set[22]       */
#define _ac0221 _ac0062    /* Saved 46 bytes                          */
#define _ac0222 0x8100002e /* Shift  to 256 on COLON                  */
#define _ac0223 0xff9d80dc /* Reduce by 99 on tokens in set[22]       */
#define _ac0224 1853       /* Index of uncompressed state[224]        */
#define _ac0225 0x81040024 /* Shift  to 260 on CATCH                  */
#define _ac0226 0xff6180aa /* Reduce by 159 on tokens in set[17]      */
#define _ac0227 _ac0038    /* Saved 50 bytes                          */
#define _ac0228 0xffd880be /* Reduce by 40 on tokens in set[19]       */
#define _ac0229 1858       /* Index of uncompressed state[229]        */
#define _ac0230 1883       /* Index of uncompressed state[230]        */
#define _ac0231 1890       /* Index of uncompressed state[231]        */
#define _ac0232 0xffda80be /* Reduce by 38 on tokens in set[19]       */
#define _ac0233 1895       /* Index of uncompressed state[233]        */
#define _ac0234 0xff8c8078 /* Reduce by 116 on tokens in set[12]      */
#define _ac0235 0xff8b8078 /* Reduce by 117 on tokens in set[12]      */
#define _ac0236 0xff8a8078 /* Reduce by 118 on tokens in set[12]      */
#define _ac0237 0xff828078 /* Reduce by 126 on tokens in set[12]      */
#define _ac0238 0xff808078 /* Reduce by 128 on tokens in set[12]      */
#define _ac0239 _ac0062    /* Saved 46 bytes                          */
#define _ac0240 _ac0062    /* Saved 46 bytes                          */
#define _ac0241 0xffc38050 /* Reduce by 61 on tokens in set[8]        */
#define _ac0242 1946       /* Index of uncompressed state[242]        */
#define _ac0243 _ac0038    /* Saved 50 bytes                          */
#define _ac0244 _ac0062    /* Saved 46 bytes                          */
#define _ac0245 0xffbb8032 /* Reduce by 69 on tokens in set[5]        */
#define _ac0246 0xffa980dc /* Reduce by 87 on tokens in set[22]       */
#define _ac0247 0xffa880dc /* Reduce by 88 on tokens in set[22]       */
#define _ac0248 0xffa780dc /* Reduce by 89 on tokens in set[22]       */
#define _ac0249 0x810e0041 /* Shift  to 270 on RPAR                   */
#define _ac0250 1955       /* Index of uncompressed state[250]        */
#define _ac0251 0x810f0041 /* Shift  to 271 on RPAR                   */
#define _ac0252 0x81100040 /* Shift  to 272 on LPAR                   */
#define _ac0253 0x81110028 /* Shift  to 273 on SEMI                   */
#define _ac0254 1962       /* Index of uncompressed state[254]        */
#define _ac0255 1969       /* Index of uncompressed state[255]        */
#define _ac0256 0xff9e80dc /* Reduce by 98 on tokens in set[22]       */
#define _ac0257 0xff9c80dc /* Reduce by 100 on tokens in set[22]      */
#define _ac0258 1974       /* Index of uncompressed state[258]        */
#define _ac0259 0xff9a80fa /* Reduce by 102 on tokens in set[25]      */
#define _ac0260 0x81140040 /* Shift  to 276 on LPAR                   */
#define _ac0261 0xff5f8064 /* Reduce by 161 on tokens in set[10]      */
#define _ac0262 0xffcd8104 /* Reduce by 51 on tokens in set[26]       */
#define _ac0263 0x8115003f /* Shift  to 277 on RB                     */
#define _ac0264 2041       /* Index of uncompressed state[264]        */
#define _ac0265 0xff7d0041 /* Reduce by 131 on RPAR                   */
#define _ac0266 2050       /* Index of uncompressed state[266]        */
#define _ac0267 0xffc08032 /* Reduce by 64 on tokens in set[5]        */
#define _ac0268 0xffbd8032 /* Reduce by 67 on tokens in set[5]        */
#define _ac0269 0xffbc8032 /* Reduce by 68 on tokens in set[5]        */
#define _ac0270 _ac0145    /* Saved 106 bytes                         */
#define _ac0271 _ac0145    /* Saved 106 bytes                         */
#define _ac0272 _ac0215    /* Saved 50 bytes                          */
#define _ac0273 2069       /* Index of uncompressed state[273]        */
#define _ac0274 0x80250026 /* Shift  to 37 on LC                      */
#define _ac0275 0xff9980fa /* Reduce by 103 on tokens in set[25]      */
#define _ac0276 2094       /* Index of uncompressed state[276]        */
#define _ac0277 0xffcc8104 /* Reduce by 52 on tokens in set[26]       */
#define _ac0278 0x811f0041 /* Shift  to 287 on RPAR                   */
#define _ac0279 2103       /* Index of uncompressed state[279]        */
#define _ac0280 0xffa480dc /* Reduce by 92 on tokens in set[22]       */
#define _ac0281 0x81210041 /* Shift  to 289 on RPAR                   */
#define _ac0282 0x81220028 /* Shift  to 290 on SEMI                   */
#define _ac0283 0xff9f80dc /* Reduce by 97 on tokens in set[22]       */
#define _ac0284 0x81230041 /* Shift  to 291 on RPAR                   */
#define _ac0285 2168       /* Index of uncompressed state[285]        */
#define _ac0286 0xff970041 /* Reduce by 105 on RPAR                   */
#define _ac0287 0xffcf8104 /* Reduce by 49 on tokens in set[26]       */
#define _ac0288 _ac0145    /* Saved 106 bytes                         */
#define _ac0289 0x81280028 /* Shift  to 296 on SEMI                   */
#define _ac0290 2183       /* Index of uncompressed state[290]        */
#define _ac0291 0x80250026 /* Shift  to 37 on LC                      */
#define _ac0292 2208       /* Index of uncompressed state[292]        */
#define _ac0293 2215       /* Index of uncompressed state[293]        */
#define _ac0294 _ac0293    /* Saved 14 bytes                          */
#define _ac0295 0xffa580dc /* Reduce by 91 on tokens in set[22]       */
#define _ac0296 0xffa380dc /* Reduce by 93 on tokens in set[22]       */
#define _ac0297 0x812b0041 /* Shift  to 299 on RPAR                   */
#define _ac0298 0xff9880fa /* Reduce by 104 on tokens in set[25]      */
#define _ac0299 _ac0145    /* Saved 106 bytes                         */
#define _ac0300 0xffa280dc /* Reduce by 94 on tokens in set[22]       */

static const unsigned int actionCode[301] = {
   _ac0000,_ac0001,_ac0002,_ac0003,_ac0004,_ac0005,_ac0006,_ac0007,_ac0008,_ac0009
  ,_ac0010,_ac0011,_ac0012,_ac0013,_ac0014,_ac0015,_ac0016,_ac0017,_ac0018,_ac0019
  ,_ac0020,_ac0021,_ac0022,_ac0023,_ac0024,_ac0025,_ac0026,_ac0027,_ac0028,_ac0029
  ,_ac0030,_ac0031,_ac0032,_ac0033,_ac0034,_ac0035,_ac0036,_ac0037,_ac0038,_ac0039
  ,_ac0040,_ac0041,_ac0042,_ac0043,_ac0044,_ac0045,_ac0046,_ac0047,_ac0048,_ac0049
  ,_ac0050,_ac0051,_ac0052,_ac0053,_ac0054,_ac0055,_ac0056,_ac0057,_ac0058,_ac0059
  ,_ac0060,_ac0061,_ac0062,_ac0063,_ac0064,_ac0065,_ac0066,_ac0067,_ac0068,_ac0069
  ,_ac0070,_ac0071,_ac0072,_ac0073,_ac0074,_ac0075,_ac0076,_ac0077,_ac0078,_ac0079
  ,_ac0080,_ac0081,_ac0082,_ac0083,_ac0084,_ac0085,_ac0086,_ac0087,_ac0088,_ac0089
  ,_ac0090,_ac0091,_ac0092,_ac0093,_ac0094,_ac0095,_ac0096,_ac0097,_ac0098,_ac0099
  ,_ac0100,_ac0101,_ac0102,_ac0103,_ac0104,_ac0105,_ac0106,_ac0107,_ac0108,_ac0109
  ,_ac0110,_ac0111,_ac0112,_ac0113,_ac0114,_ac0115,_ac0116,_ac0117,_ac0118,_ac0119
  ,_ac0120,_ac0121,_ac0122,_ac0123,_ac0124,_ac0125,_ac0126,_ac0127,_ac0128,_ac0129
  ,_ac0130,_ac0131,_ac0132,_ac0133,_ac0134,_ac0135,_ac0136,_ac0137,_ac0138,_ac0139
  ,_ac0140,_ac0141,_ac0142,_ac0143,_ac0144,_ac0145,_ac0146,_ac0147,_ac0148,_ac0149
  ,_ac0150,_ac0151,_ac0152,_ac0153,_ac0154,_ac0155,_ac0156,_ac0157,_ac0158,_ac0159
  ,_ac0160,_ac0161,_ac0162,_ac0163,_ac0164,_ac0165,_ac0166,_ac0167,_ac0168,_ac0169
  ,_ac0170,_ac0171,_ac0172,_ac0173,_ac0174,_ac0175,_ac0176,_ac0177,_ac0178,_ac0179
  ,_ac0180,_ac0181,_ac0182,_ac0183,_ac0184,_ac0185,_ac0186,_ac0187,_ac0188,_ac0189
  ,_ac0190,_ac0191,_ac0192,_ac0193,_ac0194,_ac0195,_ac0196,_ac0197,_ac0198,_ac0199
  ,_ac0200,_ac0201,_ac0202,_ac0203,_ac0204,_ac0205,_ac0206,_ac0207,_ac0208,_ac0209
  ,_ac0210,_ac0211,_ac0212,_ac0213,_ac0214,_ac0215,_ac0216,_ac0217,_ac0218,_ac0219
  ,_ac0220,_ac0221,_ac0222,_ac0223,_ac0224,_ac0225,_ac0226,_ac0227,_ac0228,_ac0229
  ,_ac0230,_ac0231,_ac0232,_ac0233,_ac0234,_ac0235,_ac0236,_ac0237,_ac0238,_ac0239
  ,_ac0240,_ac0241,_ac0242,_ac0243,_ac0244,_ac0245,_ac0246,_ac0247,_ac0248,_ac0249
  ,_ac0250,_ac0251,_ac0252,_ac0253,_ac0254,_ac0255,_ac0256,_ac0257,_ac0258,_ac0259
  ,_ac0260,_ac0261,_ac0262,_ac0263,_ac0264,_ac0265,_ac0266,_ac0267,_ac0268,_ac0269
  ,_ac0270,_ac0271,_ac0272,_ac0273,_ac0274,_ac0275,_ac0276,_ac0277,_ac0278,_ac0279
  ,_ac0280,_ac0281,_ac0282,_ac0283,_ac0284,_ac0285,_ac0286,_ac0287,_ac0288,_ac0289
  ,_ac0290,_ac0291,_ac0292,_ac0293,_ac0294,_ac0295,_ac0296,_ac0297,_ac0298,_ac0299
  ,_ac0300
}; // Size of table:1.204(x86)/1.208(x64) bytes.

/******************************************************************************\
* The successor matrix is used when the parser has reduced by prod A -> alfa   *
* The number of elements popped from the stack is the length of the alfa, L.   *
* and the state is taken from stacktop. The nonterminal A is leftside of the   *
* reduce production                                                            *
* Used by LRParser to find newstate = successor(state,A).                      *
* For each relevant state the array stateSuccessors contains a list of numbers *
*                                                                              *
*   Item list for state NNNN with 3 items   3, 5,3 , 6,2, 8,5                  *
*   Number of pairs in list ----------------+  | |                             *
*   NonTerminal A------------------------------+ |                             *
*   Goto this state------------------------------+                             *
*                                                                              *
* The array successorsIndex contains an index for each of these states         *
* referering to the first number belonging to the state (as actionCode)        *
* or 0 if a state has no items of the form B -> beta . A gamma                 *
\******************************************************************************/
static const TableType stateSuccessors[] = {
  /* successors state[0], Index=0         */    1,  75,   1
  /* successors state[1], Index=3         */ ,  8,  76,   2,  77,   3,  81,   6,  82,   7,  83,   8
                                                 ,  84,  10,  85,  11, 103,  13
  /* successors state[3], Index=20        */ ,  5,  78,  15,  79,  17,  86,  18,  87,  19,  89,  20
  /* successors state[6], Index=31        */ ,  5,  82,  25,  83,   8,  84,  10,  85,  11, 103,  13
  /* successors state[12], Index=42       */ ,  2,  97,  27,  99,  28
  /* successors state[13], Index=47       */ ,  1,  89,  30
  /* successors state[17], Index=50       */ ,  1,  80,  34
  /* successors state[21], Index=53       */ ,  3,  79,  43,  87,  42,  89,  20
  /* successors state[22], Index=60       */ ,  3,  79,  45,  87,  44,  89,  20
  /* successors state[30], Index=67       */ ,  1, 104,  47
  /* successors state[31], Index=70       */ ,  3,  89,  51, 105,  49, 106,  50
  /* successors state[33], Index=77       */ ,  4,  79,  53,  86,  52,  87,  19,  89,  20
  /* successors state[35], Index=86       */ , 10,  91,  55, 109,  68, 116,  64, 117,  60, 119,  69
                                                 , 120,  70, 121,  71, 122,  72, 123,  73, 124,  74
  /* successors state[37], Index=107      */ ,  1, 107,  77
  /* successors state[38], Index=110      */ , 10,  88,  78, 109,  79, 116,  64, 117,  60, 119,  69
                                                 , 120,  70, 121,  71, 122,  72, 123,  73, 124,  74
  /* successors state[39], Index=131      */ ,  8,  83,  87,  84,  10,  85,  11,  90,  82,  93,  83
                                                 ,  94,  84,  95,  85, 103,  13
  /* successors state[40], Index=148      */ , 10,  91,  90, 109,  68, 116,  64, 117,  60, 119,  69
                                                 , 120,  70, 121,  71, 122,  72, 123,  73, 124,  74
  /* successors state[41], Index=169      */ , 10,  83,  87,  84,  10,  85,  11,  89,  94,  90,  93
                                                 ,  92,  92,  93,  83,  94,  84,  95,  85, 103,  13
  /* successors state[46], Index=190      */ ,  1,  98,  97
  /* successors state[48], Index=193      */ ,  3,  89,  51, 105,  98, 106,  50
  /* successors state[56], Index=200      */ , 15,  83,  87,  84,  10,  85,  11,  94, 105,  95, 104
                                                 , 103,  13, 109, 103, 116,  64, 117,  60, 119,  69
                                                 , 120,  70, 121,  71, 122,  72, 123,  73, 124,  74
  /* successors state[62], Index=231      */ ,  2, 116, 108, 117,  60
  /* successors state[63], Index=236      */ ,  2, 116, 109, 117,  60
  /* successors state[65], Index=241      */ ,  2, 116, 114, 117,  60
  /* successors state[66], Index=246      */ ,  2, 116, 115, 117,  60
  /* successors state[67], Index=251      */ ,  2, 116, 116, 117,  60
  /* successors state[77], Index=256      */ , 19,  80, 138,  81, 136,  82,   7,  83,   8,  84,  10
                                                 ,  85,  11, 100, 135, 103,  13, 108, 134, 109, 139
                                                 , 110, 142, 116,  64, 117,  60, 119,  69, 120,  70
                                                 , 121,  71, 122,  72, 123,  73, 124,  74
  /* successors state[80], Index=295      */ , 11,  88, 156, 109,  79, 116,  64, 117,  60, 119,  69
                                                 , 120,  70, 121,  71, 122,  72, 123,  73, 124,  74
                                                 , 125, 155
  /* successors state[84], Index=318      */ ,  7,  83, 160,  84,  10,  85,  11,  87, 159,  89, 162
                                                 ,  96, 161, 103,  13
  /* successors state[88], Index=333      */ ,  1,  96, 165
  /* successors state[97], Index=336      */ ,  7,  81, 136,  82,   7,  83,   8,  84,  10,  85,  11
                                                 , 100, 173, 103,  13
  /* successors state[100], Index=351     */ ,  2,  89,  51, 106, 175
  /* successors state[101], Index=356     */ , 10,  91, 176, 109,  68, 116,  64, 117,  60, 119,  69
                                                 , 120,  70, 121,  71, 122,  72, 123,  73, 124,  74
  /* successors state[105], Index=377     */ ,  5,  83, 160,  84,  10,  85,  11,  96, 161, 103,  13
  /* successors state[107], Index=388     */ , 15,  83,  87,  84,  10,  85,  11,  94, 105,  95, 181
                                                 , 103,  13, 109, 180, 116,  64, 117, 179, 119,  69
                                                 , 120,  70, 121,  71, 122,  72, 123,  73, 124,  74
  /* successors state[111], Index=419     */ ,  9, 109, 182, 116,  64, 117,  60, 119,  69, 120,  70
                                                 , 121,  71, 122,  72, 123,  73, 124,  74
  /* successors state[113], Index=438     */ ,  9, 116,  64, 117,  60, 118, 184, 119, 186, 120,  70
                                                 , 121,  71, 122,  72, 123,  73, 124,  74
  /* successors state[117], Index=457     */ ,  8, 116,  64, 117,  60, 119, 187, 120,  70, 121,  71
                                                 , 122,  72, 123,  73, 124,  74
  /* successors state[118], Index=474     */ ,  8, 116,  64, 117,  60, 119, 188, 120,  70, 121,  71
                                                 , 122,  72, 123,  73, 124,  74
  /* successors state[119], Index=491     */ ,  8, 116,  64, 117,  60, 119, 189, 120,  70, 121,  71
                                                 , 122,  72, 123,  73, 124,  74
  /* successors state[120], Index=508     */ ,  8, 116,  64, 117,  60, 119, 190, 120,  70, 121,  71
                                                 , 122,  72, 123,  73, 124,  74
  /* successors state[121], Index=525     */ ,  5, 116,  64, 117,  60, 122, 191, 123,  73, 124,  74
  /* successors state[122], Index=536     */ ,  3, 116,  64, 117,  60, 124, 192
  /* successors state[123], Index=543     */ ,  3, 116,  64, 117,  60, 124, 193
  /* successors state[124], Index=550     */ ,  3, 116,  64, 117,  60, 124, 194
  /* successors state[125], Index=557     */ ,  3, 116,  64, 117,  60, 124, 195
  /* successors state[126], Index=564     */ ,  3, 116,  64, 117,  60, 124, 196
  /* successors state[127], Index=571     */ ,  3, 116,  64, 117,  60, 124, 197
  /* successors state[128], Index=578     */ ,  3, 116,  64, 117,  60, 124, 198
  /* successors state[129], Index=585     */ ,  3, 116,  64, 117,  60, 124, 199
  /* successors state[130], Index=592     */ ,  3, 116,  64, 117,  60, 124, 200
  /* successors state[131], Index=599     */ ,  3, 116,  64, 117,  60, 124, 201
  /* successors state[132], Index=606     */ ,  3, 116,  64, 117,  60, 124, 202
  /* successors state[136], Index=613     */ , 10,  79, 206,  82,  25,  83,   8,  84,  10,  85,  11
                                                 ,  87, 205,  89,  20, 101, 203, 102, 207, 103,  13
  /* successors state[140], Index=634     */ ,  9, 109, 211, 116,  64, 117,  60, 119,  69, 120,  70
                                                 , 121,  71, 122,  72, 123,  73, 124,  74
  /* successors state[141], Index=653     */ ,  1, 110, 212
  /* successors state[145], Index=656     */ , 12,  80, 138, 108, 217, 109, 139, 110, 142, 116,  64
                                                 , 117,  60, 119,  69, 120,  70, 121,  71, 122,  72
                                                 , 123,  73, 124,  74
  /* successors state[150], Index=681     */ , 10,  91, 222, 109,  68, 116,  64, 117,  60, 119,  69
                                                 , 120,  70, 121,  71, 122,  72, 123,  73, 124,  74
  /* successors state[152], Index=702     */ ,  9, 109, 224, 116,  64, 117,  60, 119,  69, 120,  70
                                                 , 121,  71, 122,  72, 123,  73, 124,  74
  /* successors state[153], Index=721     */ ,  1,  80, 225
  /* successors state[158], Index=724     */ ,  7,  83,  87,  84,  10,  85,  11,  93, 228,  94,  84
                                                 ,  95,  85, 103,  13
  /* successors state[163], Index=739     */ ,  3,  87,  42,  89, 162,  96, 230
  /* successors state[164], Index=746     */ ,  3,  87,  44,  89, 162,  96, 231
  /* successors state[166], Index=753     */ ,  1,  96, 231
  /* successors state[167], Index=756     */ ,  1,  96, 230
  /* successors state[170], Index=759     */ ,  1,  89, 232
  /* successors state[178], Index=762     */ ,  2, 116, 233, 117,  60
  /* successors state[208], Index=767     */ , 10,  91, 245, 109,  68, 116,  64, 117,  60, 119,  69
                                                 , 120,  70, 121,  71, 122,  72, 123,  73, 124,  74
  /* successors state[214], Index=788     */ , 12,  80, 138, 108, 248, 109, 139, 110, 142, 116,  64
                                                 , 117,  60, 119,  69, 120,  70, 121,  71, 122,  72
                                                 , 123,  73, 124,  74
  /* successors state[215], Index=813     */ , 10, 109, 250, 111, 249, 116,  64, 117,  60, 119,  69
                                                 , 120,  70, 121,  71, 122,  72, 123,  73, 124,  74
  /* successors state[216], Index=834     */ , 10, 109, 250, 111, 251, 116,  64, 117,  60, 119,  69
                                                 , 120,  70, 121,  71, 122,  72, 123,  73, 124,  74
  /* successors state[218], Index=855     */ , 10, 109, 254, 112, 253, 116,  64, 117,  60, 119,  69
                                                 , 120,  70, 121,  71, 122,  72, 123,  73, 124,  74
  /* successors state[221], Index=876     */ ,  9, 109, 255, 116,  64, 117,  60, 119,  69, 120,  70
                                                 , 121,  71, 122,  72, 123,  73, 124,  74
  /* successors state[225], Index=895     */ ,  2, 113, 258, 114, 259
  /* successors state[227], Index=900     */ , 10,  88, 261, 109,  79, 116,  64, 117,  60, 119,  69
                                                 , 120,  70, 121,  71, 122,  72, 123,  73, 124,  74
  /* successors state[229], Index=921     */ , 10,  91, 263, 109,  68, 116,  64, 117,  60, 119,  69
                                                 , 120,  70, 121,  71, 122,  72, 123,  73, 124,  74
  /* successors state[239], Index=942     */ ,  9, 116,  64, 117,  60, 118, 265, 119, 186, 120,  70
                                                 , 121,  71, 122,  72, 123,  73, 124,  74
  /* successors state[240], Index=961     */ ,  8, 116,  64, 117,  60, 119, 266, 120,  70, 121,  71
                                                 , 122,  72, 123,  73, 124,  74
  /* successors state[242], Index=978     */ ,  4,  79, 206,  87, 205,  89,  20, 102, 267
  /* successors state[243], Index=987     */ , 10,  88, 268, 109,  79, 116,  64, 117,  60, 119,  69
                                                 , 120,  70, 121,  71, 122,  72, 123,  73, 124,  74
  /* successors state[244], Index=1008    */ , 10,  91, 269, 109,  68, 116,  64, 117,  60, 119,  69
                                                 , 120,  70, 121,  71, 122,  72, 123,  73, 124,  74
  /* successors state[258], Index=1029    */ ,  1, 114, 275
  /* successors state[270], Index=1032    */ , 12,  80, 138, 108, 279, 109, 139, 110, 142, 116,  64
                                                 , 117,  60, 119,  69, 120,  70, 121,  71, 122,  72
                                                 , 123,  73, 124,  74
  /* successors state[271], Index=1057    */ , 12,  80, 138, 108, 280, 109, 139, 110, 142, 116,  64
                                                 , 117,  60, 119,  69, 120,  70, 121,  71, 122,  72
                                                 , 123,  73, 124,  74
  /* successors state[272], Index=1082    */ , 10, 109, 250, 111, 281, 116,  64, 117,  60, 119,  69
                                                 , 120,  70, 121,  71, 122,  72, 123,  73, 124,  74
  /* successors state[273], Index=1103    */ , 10, 109, 250, 111, 282, 116,  64, 117,  60, 119,  69
                                                 , 120,  70, 121,  71, 122,  72, 123,  73, 124,  74
  /* successors state[274], Index=1124    */ ,  1,  80, 283
  /* successors state[276], Index=1127    */ ,  6,  83,  87,  84,  10,  85,  11,  94, 285, 103,  13
                                                 , 115, 284
  /* successors state[285], Index=1140    */ ,  6,  83, 160,  84,  10,  85,  11,  87, 292,  89, 162
                                                 , 103,  13
  /* successors state[288], Index=1153    */ , 12,  80, 138, 108, 295, 109, 139, 110, 142, 116,  64
                                                 , 117,  60, 119,  69, 120,  70, 121,  71, 122,  72
                                                 , 123,  73, 124,  74
  /* successors state[290], Index=1178    */ , 10, 109, 254, 112, 297, 116,  64, 117,  60, 119,  69
                                                 , 120,  70, 121,  71, 122,  72, 123,  73, 124,  74
  /* successors state[291], Index=1199    */ ,  1,  80, 298
  /* successors state[293], Index=1202    */ ,  2,  87,  42,  89, 162
  /* successors state[294], Index=1207    */ ,  2,  87,  44,  89, 162
  /* successors state[299], Index=1212    */ , 12,  80, 138, 108, 300, 109, 139, 110, 142, 116,  64
                                                 , 117,  60, 119,  69, 120,  70, 121,  71, 122,  72
                                                 , 123,  73, 124,  74
}; // Size of table:2.476(x86)/2.480(x64) bytes.

#define nil (unsigned short)-1
static const unsigned short successorsIndex[301] = {
       0,    3,  nil,   20,  nil,  nil,   31,  nil,  nil,  nil
  ,  nil,  nil,   42,   47,  nil,  nil,  nil,   50,  nil,  nil
  ,  nil,   53,   60,  nil,  nil,  nil,  nil,  nil,  nil,  nil
  ,   67,   70,  nil,   77,  nil,   86,  nil,  107,  110,  131
  ,  148,  169,  nil,  nil,  nil,  nil,  190,  nil,  193,  nil
  ,  nil,  nil,  nil,  nil,  nil,  nil,  200,  nil,  nil,  nil
  ,  nil,  nil,  231,  236,  nil,  241,  246,  251,  nil,  nil
  ,  nil,  nil,  nil,  nil,  nil,  nil,  nil,  256,  nil,  nil
  ,  295,  nil,  nil,  nil,  318,  nil,  nil,  nil,  333,  nil
  ,  nil,  nil,  nil,  nil,  nil,  nil,  nil,  336,  nil,  nil
  ,  351,  356,  nil,  nil,  nil,  377,  nil,  388,  nil,  nil
  ,  nil,  419,  nil,  438,  nil,  nil,  nil,  457,  474,  491
  ,  508,  525,  536,  543,  550,  557,  564,  571,  578,  585
  ,  592,  599,  606,  nil,  nil,  nil,  613,  nil,  nil,  nil
  ,  634,  653,  nil,  nil,  nil,  656,  nil,  nil,  nil,  nil
  ,  681,  nil,  702,  721,  nil,  nil,  nil,  nil,  724,  nil
  ,  nil,  nil,  nil,  739,  746,  nil,  753,  756,  nil,  nil
  ,  759,  nil,  nil,  nil,  nil,  nil,  nil,  nil,  762,  nil
  ,  nil,  nil,  nil,  nil,  nil,  nil,  nil,  nil,  nil,  nil
  ,  nil,  nil,  nil,  nil,  nil,  nil,  nil,  nil,  nil,  nil
  ,  nil,  nil,  nil,  nil,  nil,  nil,  nil,  nil,  767,  nil
  ,  nil,  nil,  nil,  nil,  788,  813,  834,  nil,  855,  nil
  ,  nil,  876,  nil,  nil,  nil,  895,  nil,  900,  nil,  921
  ,  nil,  nil,  nil,  nil,  nil,  nil,  nil,  nil,  nil,  942
  ,  961,  nil,  978,  987, 1008,  nil,  nil,  nil,  nil,  nil
  ,  nil,  nil,  nil,  nil,  nil,  nil,  nil,  nil, 1029,  nil
  ,  nil,  nil,  nil,  nil,  nil,  nil,  nil,  nil,  nil,  nil
  , 1032, 1057, 1082, 1103, 1124,  nil, 1127,  nil,  nil,  nil
  ,  nil,  nil,  nil,  nil,  nil, 1140,  nil,  nil, 1153,  nil
  , 1178, 1199,  nil, 1202, 1207,  nil,  nil,  nil,  nil, 1212
  ,  nil
}; // Size of table:604(x86)/608(x64) bytes.

/******************************************************************************\
* The productionLength[] array is indexed by production number and holds       *
* the number of symbols on the right side of each production.                  *
\******************************************************************************/
static const unsigned char productionLength[165] = {
  /*   0 */    1,   0,   2,   3,   2,   3,   0,   2,   1,   1,
  /*  10 */    1,   2,   1,   1,   1,   1,   1,   1,   3,   1,
  /*  20 */    3,   1,   1,   3,   4,   3,   4,   2,   3,   2,
  /*  30 */    3,   4,   3,   3,   3,   4,   4,   1,   3,   1,
  /*  40 */    3,   2,   1,   1,   1,   2,   2,   2,   0,   5,
  /*  50 */    2,   3,   4,   3,   5,   2,   0,   1,   1,   0,
  /*  60 */    2,   3,   2,   1,   3,   1,   1,   3,   3,   2,
  /*  70 */    3,   4,   0,   3,   1,   1,   3,   1,   3,   3,
  /*  80 */    0,   2,   2,   1,   1,   2,   2,   3,   3,   3,
  /*  90 */    5,   7,   5,   7,   9,   2,   2,   5,   3,   2,
  /* 100 */    3,   3,   1,   2,   5,   1,   2,   1,   1,   0,
  /* 110 */    1,   3,   1,   1,   1,   1,   4,   4,   4,   4,
  /* 120 */    2,   2,   2,   2,   2,   2,   4,   3,   4,   3,
  /* 130 */    1,   3,   3,   1,   5,   3,   3,   1,   1,   3,
  /* 140 */    1,   1,   3,   1,   3,   3,   3,   3,   3,   3,
  /* 150 */    3,   3,   3,   3,   1,   0,   1,   1,   1,   3,
  /* 160 */    1,   3,   1,   2,   1
}; // Size of table:168(x86)/168(x64) bytes.

/******************************************************************************\
* The leftSide[] array is indexed by production number, and holds the          *
* nonTerminal A on the left side of each production.                           *
\******************************************************************************/
static const TableType leftSide[165] = {
  /*   0 */   74,  75,  75,  76,  76,  76,  77,  77,  77,  77,
  /*  10 */   81,  81,  82,  82,  83,  83,  83,  78,  78,  86,
  /*  20 */   86,  86,  87,  87,  87,  87,  87,  87,  87,  79,
  /*  30 */   79,  79,  79,  79,  79,  79,  79,  92,  92,  90,
  /*  40 */   90,  93,  93,  93,  94,  94,  95,  95,  96,  96,
  /*  50 */   96,  96,  96,  96,  85,  85,  97,  97,  99,  98,
  /*  60 */   98, 100, 100, 101, 101, 102, 102, 102, 102, 102,
  /*  70 */   84,  84, 104, 104, 103, 105, 105, 106, 106,  80,
  /*  80 */  107, 107, 107, 108, 108, 108, 108, 108, 108, 108,
  /*  90 */  108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
  /* 100 */  108, 108, 113, 113, 114, 115, 115, 115, 110, 111,
  /* 110 */  111, 116, 116, 116, 116, 116, 116, 116, 116, 116,
  /* 120 */  116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
  /* 130 */  118, 118, 109, 109, 119, 119, 119, 119, 120, 121,
  /* 140 */  121, 122, 123, 123, 124, 124, 124, 124, 124, 124,
  /* 150 */  124, 124, 124, 124, 124, 112, 112,  91,  88,  88,
  /* 160 */  125, 125, 117, 117,  89
}; // Size of table:332(x86)/336(x64) bytes.

/******************************************************************************\
* The rightSide[] matrix is indexed by production number and holds             *
* the right side symbols of each production.                                   *
* Compressed and only used for debugging.                                      *
\******************************************************************************/
static const TableType rightSideTable[376] = {
  /*   0 */   75
  /*   2 */ , 75, 76
  /*   3 */ , 77, 78, 40
  /*   4 */ , 77, 40
  /*   5 */ , 77, 79, 80
  /*   7 */ , 71, 70
  /*   8 */ , 70
  /*   9 */ , 81
  /*  10 */ , 82
  /*  11 */ , 81, 82
  /*  12 */ , 83
  /*  13 */ , 71
  /*  14 */ ,  4
  /*  15 */ , 84
  /*  16 */ , 85
  /*  17 */ , 86
  /*  18 */ , 78, 42, 86
  /*  19 */ , 87
  /*  20 */ , 87, 43, 88
  /*  21 */ , 79
  /*  22 */ , 89
  /*  23 */ , 87, 64, 65
  /*  24 */ , 87, 64, 90, 65
  /*  25 */ , 87, 62, 63
  /*  26 */ , 87, 62, 91, 63
  /*  27 */ , 57, 87
  /*  28 */ , 64, 87, 65
  /*  29 */ , 57, 79
  /*  30 */ , 79, 62, 63
  /*  31 */ , 79, 62, 91, 63
  /*  32 */ , 64, 79, 65
  /*  33 */ , 79, 64, 65
  /*  34 */ , 89, 64, 65
  /*  35 */ , 89, 64, 92, 65
  /*  36 */ , 89, 64, 90, 65
  /*  37 */ , 89
  /*  38 */ , 92, 42, 89
  /*  39 */ , 93
  /*  40 */ , 90, 42, 93
  /*  41 */ , 94, 87
  /*  42 */ , 95
  /*  43 */ , 41
  /*  44 */ , 83
  /*  45 */ , 94, 83
  /*  46 */ , 94, 96
  /*  47 */ , 70, 96
  /*  49 */ , 64, 96, 65, 64, 65
  /*  50 */ , 57, 96
  /*  51 */ , 96, 62, 63
  /*  52 */ , 96, 62, 91, 63
  /*  53 */ , 64, 96, 65
  /*  54 */ ,  5, 97, 38, 98, 39
  /*  55 */ ,  5, 99
  /*  57 */ , 99
  /*  58 */ , 72
  /*  60 */ , 98,100
  /*  61 */ , 81,101, 40
  /*  62 */ , 81, 40
  /*  63 */ ,102
  /*  64 */ ,101, 42,102
  /*  65 */ , 79
  /*  66 */ , 87
  /*  67 */ , 87, 43, 88
  /*  68 */ , 87, 46, 91
  /*  69 */ , 46, 91
  /*  70 */ ,103, 89,104
  /*  71 */ ,103, 38,105, 39
  /*  73 */ , 38,105, 39
  /*  74 */ ,  6
  /*  75 */ ,106
  /*  76 */ ,105, 42,106
  /*  77 */ , 89
  /*  78 */ , 89, 43, 91
  /*  79 */ , 38,107, 39
  /*  81 */ ,107,108
  /*  82 */ ,107,100
  /*  83 */ , 40
  /*  84 */ , 80
  /*  85 */ ,109, 40
  /*  86 */ , 24, 40
  /*  87 */ , 24,109, 40
  /*  88 */ , 25,110, 40
  /*  89 */ ,110, 46,108
  /*  90 */ , 26, 64,111, 65,108
  /*  91 */ , 26, 64,111, 65,108, 73,108
  /*  92 */ , 32, 64,111, 65,108
  /*  93 */ , 33,108, 32, 64,111, 65, 40
  /*  94 */ , 34, 64,112, 40,111, 40,112, 65,108
  /*  95 */ , 30, 40
  /*  96 */ , 31, 40
  /*  97 */ , 27, 64,109, 65, 80
  /*  98 */ , 28, 91, 46
  /*  99 */ , 29, 46
  /* 100 */ , 37,109, 40
  /* 101 */ , 35, 80,113
  /* 102 */ ,114
  /* 103 */ ,113,114
  /* 104 */ , 36, 64,115, 65, 80
  /* 105 */ , 41
  /* 106 */ , 94, 87
  /* 107 */ , 94
  /* 108 */ , 72
  /* 110 */ ,109
  /* 111 */ , 64,109, 65
  /* 112 */ ,  3
  /* 113 */ ,  2
  /* 114 */ , 72
  /* 115 */ ,117
  /* 116 */ , 59, 64,117, 65
  /* 117 */ , 59, 64,109, 65
  /* 118 */ , 59, 64, 95, 65
  /* 119 */ , 64, 95, 65,116
  /* 120 */ , 56,116
  /* 121 */ , 60,116
  /* 122 */ ,116, 61
  /* 123 */ , 61,116
  /* 124 */ , 51,116
  /* 125 */ , 57,116
  /* 126 */ ,116, 62,109, 63
  /* 127 */ ,116, 66, 72
  /* 128 */ ,116, 64,118, 65
  /* 129 */ ,116, 64, 65
  /* 130 */ ,119
  /* 131 */ ,119, 42,118
  /* 132 */ ,109, 42,119
  /* 133 */ ,119
  /* 134 */ ,119, 45,119, 46,119
  /* 135 */ ,119, 44,119
  /* 136 */ ,119, 43,119
  /* 137 */ ,120
  /* 138 */ ,121
  /* 139 */ ,121, 47,122
  /* 140 */ ,122
  /* 141 */ ,123
  /* 142 */ ,123, 48,124
  /* 143 */ ,124
  /* 144 */ ,124, 53,124
  /* 145 */ ,124, 52,124
  /* 146 */ ,124, 57,124
  /* 147 */ ,124, 58,124
  /* 148 */ ,124, 54,124
  /* 149 */ ,124, 51,124
  /* 150 */ ,124, 50,124
  /* 151 */ ,124, 49,124
  /* 152 */ ,124, 55,124
  /* 153 */ ,124, 56,124
  /* 154 */ ,116
  /* 156 */ ,109
  /* 157 */ ,109
  /* 158 */ ,109
  /* 159 */ , 38,125, 39
  /* 160 */ , 88
  /* 161 */ ,125, 42, 88
  /* 162 */ ,  1
  /* 163 */ ,117,  1
  /* 164 */ , 72
}; // Size of table:752(x86)/752(x64) bytes.

/******************************************************************************\
* symbolNames contains names of terminal and nonTerminal separated by space    *
* Used for debugging.                                                          *
\******************************************************************************/
static const char *symbolNames = {
  "EOI"
  " STRING"
  " ICON"
  " FCON"
  " TYPE"
  " STRUCT"
  " ENUM"
  " DEFINE"
  " ENDIF"
  " IFDEF"
  " IFNDEF"
  " INCLUDE"
  " UNDEF"
  " EXTERN"
  " STATIC"
  " VIRTUAL"
  " REGISTER"
  " AUTO"
  " OPERATOR"
  " SIGNED"
  " PRIVATE"
  " PUBLIC"
  " PROTECTED"
  " TEMPLATE"
  " RETURN"
  " GOTO"
  " IF"
  " SWITCH"
  " CASE"
  " DEFAULT"
  " BREAK"
  " CONTINUE"
  " WHILE"
  " DO"
  " FOR"
  " TRYSTMT"
  " CATCH"
  " THROW"
  " LC"
  " RC"
  " SEMI"
  " ELLIPSIS"
  " COMMA"
  " EQUAL"
  " ASSIGNOP"
  " QUEST"
  " COLON"
  " OROR"
  " ANDAND"
  " OR"
  " XOR"
  " AND"
  " EQUOP"
  " RELOP"
  " SHIFTOP"
  " PLUS"
  " MINUS"
  " STAR"
  " DIVOP"
  " SIZEOF"
  " UNOP"
  " INCOP"
  " LB"
  " RB"
  " LPAR"
  " RPAR"
  " STRUCTOP"
  " COLONCOLON"
  " NEWOP"
  " DELETEOP"
  " TTYPE"
  " CLASS"
  " NAME"
  " ELSE"
  " program"
  " ext_def_list"
  " ext_def"
  " opt_specifiers"
  " ext_decl_list"
  " funct_decl"
  " compound_stmt"
  " specifiers"
  " type_or_class"
  " type_specifier"
  " enum_specifier"
  " struct_specifier"
  " ext_decl"
  " var_decl"
  " initializer"
  " name"
  " var_list"
  " const_expr"
  " name_list"
  " param_declaration"
  " type"
  " abstract_decl"
  " abs_decl"
  " opt_tag"
  " def_list"
  " tag"
  " def"
  " decl_list"
  " decl"
  " enum"
  " opt_enum_list"
  " enumerator_list"
  " enumerator"
  " stmt_list"
  " statement"
  " expr"
  " target"
  " test"
  " opt_expr"
  " handler_list"
  " exception_handler"
  " catch_type"
  " unary"
  " string_const"
  " args"
  " non_comma_expr"
  " or_expr"
  " or_list"
  " and_expr"
  " and_list"
  " binary"
  " initializer_list"
}; // Total size of strings:996(x86)/1.000(x64) bytes

static const ParserTablesTemplate<TableType, unsigned short> CppTables_s(actionCode, compressedLasets, uncompressedActions
                                                                        ,successorsIndex , stateSuccessors
                                                                        ,productionLength, leftSide
                                                                        ,rightSideTable  , symbolNames
                                                                        ,74, 126, 165, 301, 11320, 11400);

const ParserTables *CppParser::CppTables = &CppTables_s;
// Size of CppTables_s: 68(x86)/120(x64) bytes. Size of CppTables:4(x86)/8(x64) bytes

// Total size of table data:11.320(x86)/11.400(x64) bytes.


