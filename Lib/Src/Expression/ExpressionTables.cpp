/* DO NOT EDIT THIS FILE - it is machine generated */

#line 57 "C:\\Mytools2015\\Lib\\Src\\Expression\\Expression.y"
#include "pch.h"
#include <Math/Real.h>
#include "Math/Expression/ExpressionParser.h"

#line 44 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"

#pragma warning(disable : 4312)

namespace Expr {

typedef short TableType;

/******************************************************************************\
* The action matrix holds the parse action(state,terminal)                     *
* Used in LRParser::parserStep() tp determine what to do in the current state  *
* and a given terminal on input. The interpretation of action is:              *
*                                                                              *
*   action <  0   - Reduce by production p, p == -action.                      *
*   action == 0   - Accept. Reduce by production 0.                            *
*   action >  0   - Go to state s (=action),                                   *
*                   and push [s,input,pos] to parser stack.                    *
*                   Then read next symbol from input.                          *
*   action == _ParserError - not found (=unexpected input).                    *
*                                                                              *
* 3 different formats are used:1 Uncompressed and 2 Compressed.                *
* Uncompressed state:                                                          *
*   The array uncompressedActions[] holds a list of numbers for each state     *
*   starting with number of items, M, belonging to the state, followed by M    *
*   pairs, each consisting of (token,action)                                   *
*     Item list for state NNNN with 2 items             2, 1, 2, 2,-3          *
*     Number of pairs in list---------------------------+  |  |  |  |          *
*     Legal input symbol-----------------------------------+  |  |  |          *
*     Action-(> 0 => shift input and goto state 1)------------+  |  |          *
*     Legal input symbol-----------------------------------------+  |          *
*     Action-(< 0 => reduce by production 3)------------------------+          *
*   A line containing "#define _acNNNN Index" is added, where Index is a       *
*   reference to the first number in list of numbers belonging to the state    *
*                                                                              *
* Compressed state:                                                            *
*   Single-item-state (SIS) ot Multi-item-state (MIS)                          *
*   SIS:If there is only 1 possible action in the state:                       *
*     A line containing "#define _acNNNN code" is added, where code is         *
*     encoded as:          ((Action&0x7fff) << 16) | (Token&0x7fff) )          *
*     Bit[16-30] = Action-------+                       |                      *
*     Bit[0 -14] = Legal token--------------------------+                      *
*     Bit 31     = 1 Compressed state indicator                                *
*     Bit 15     = 0 SIS compression                                           *
*                                                                              *
*   MIS:If all actions in the state are reduce by the same production:         *
*     A line containing "#define _acNNNN code" is added, where code is         *
*     encoded as:          ((Action&0x7fff) << 16) | (Index&0x7fff))           *
*     Bit[16-30] = Action-------+                       |                      *
*     Bit[0 -14] = Index into compressedLasets----------+                      *
*     Bit 31     = 1 Compressed state indicator                                *
*     Bit 15     = 1 MIS compression                                           *
*                                                                              *
* CompressedLasets is a list of bitsets, containing 1-bits for all legal       *
* inputsymbols in the given state (MIS). Many MIS may refer to the same bitset *
* Number of bytes in each bitset = (terminalcount-1)/8+1                       *
* Index in MIS-code refer to the first byte in the bitset belonging the state  *
*                                                                              *
* If any uncompressed state N has the same actionarray as a previous           *
* generated uncompressed state M, a #define _acN _acM                          *
*                                                                              *
\******************************************************************************/
static const BYTE compressedLasets[44] = {
  /*  0  59 tokens */  0x1a,0x4c,0x80,0x81,0xff,0xff,0xff,0xff,0xff,0xff,0x05
  /*  1  20 tokens */ ,0x81,0xb3,0x9f,0x79,0x00,0x00,0x00,0x00,0x00,0x00,0x0a
  /*  2  21 tokens */ ,0xc1,0xb3,0x9f,0x79,0x00,0x00,0x00,0x00,0x00,0x00,0x0a
  /*  3   6 tokens */ ,0x01,0x31,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0a
}; // Size of table:44(x86)/48(x64) bytes.

static const TableType uncompressedActions[] = {
  /* state[0],Index=0                     */   59,   1,  75,   3,  74,   4,  21,  10,  22,  11,  23
                                                 ,  14,  62,  23,  15,  24,  14,  31,  26,  32,  27
                                                 ,  33,  28,  34,  29,  35,  30,  36,  31,  37,  32
                                                 ,  38,  33,  39,  72,  40,  34,  41,  36,  42,  37
                                                 ,  43,  38,  44,  39,  45,  54,  46,  56,  47,  57
                                                 ,  48,  60,  49,  61,  50,  25,  51,  35,  52,  40
                                                 ,  53,  41,  54,  42,  55,  43,  56,  44,  57,  45
                                                 ,  58,  73,  59,  46,  60,  47,  61,  48,  62,  49
                                                 ,  63,  50,  64,  51,  65,  52,  66,  53,  67,  70
                                                 ,  68,  69,  69,  71,  70,  67,  71,  55,  72,  58
                                                 ,  73,  59,  74,  68,  75,  63,  76,  64,  77,  65
                                                 ,  78,  24,  79,  66,  80,  13,  82,  20
  /* state[4],Index=119                   */ , 13,   0,  -3,  15,  84,  16,  88,  17,  89,  18,  86
                                                 ,  19,  87,  20,  85,  23,  78,  24,  79,  27,  80
                                                 ,  28,  81,  29,  82,  30,  83
  /* state[5],Index=146                   */ ,  3,   0,  -4,  12,  91,  13,  90
  /* state[8],Index=153                   */ , 14,   0, -17,   6,  93,  15, -17,  16, -17,  17, -17
                                                 ,  18, -17,  19, -17,  20, -17,  23, -17,  24, -17
                                                 ,  27, -17,  28, -17,  29, -17,  30, -17
  /* state[14],Index=182                  */ , 58,   1,  75,   3,  74,   4,  21,  10,  22,  11,  23
                                                 ,  23,  15,  24,  14,  31,  26,  32,  27,  33,  28
                                                 ,  34,  29,  35,  30,  36,  31,  37,  32,  38,  33
                                                 ,  39,  72,  40,  34,  41,  36,  42,  37,  43,  38
                                                 ,  44,  39,  45,  54,  46,  56,  47,  57,  48,  60
                                                 ,  49,  61,  50,  25,  51,  35,  52,  40,  53,  41
                                                 ,  54,  42,  55,  43,  56,  44,  57,  45,  58,  73
                                                 ,  59,  46,  60,  47,  61,  48,  62,  49,  63,  50
                                                 ,  64,  51,  65,  52,  66,  53,  67,  70,  68,  69
                                                 ,  69,  71,  70,  67,  71,  55,  72,  58,  73,  59
                                                 ,  74,  68,  75,  63,  76,  64,  77,  65,  78,  24
                                                 ,  79,  66,  80, 100,  82,  20
  /* state[96],Index=299                  */ , 13,  15,  84,  16,  88,  17,  89,  18,  86,  19,  87
                                                 ,  20,  85,  23,  78,  24,  79,  27,  80,  28,  81
                                                 ,  29,  82,  30,  83,  81, 126
  /* state[97],Index=326                  */ ,  3,  12,  91,  13,  90,  81, 127
  /* state[99],Index=333                  */ , 20,   0, -21,   7, -21,   8, -21,   9, -21,  12, -21
                                                 ,  13, -21,  15, -21,  16, -21,  17, -21,  18, -21
                                                 ,  19, -21,  20, -21,  23, -21,  24, -21,  27,  80
                                                 ,  28,  81,  29,  82,  30,  83,  81, -21,  83, -21
  /* state[101],Index=374                 */ , 20,   0, -22,   7, -22,   8, -22,   9, -22,  12, -22
                                                 ,  13, -22,  15, -22,  16, -22,  17, -22,  18, -22
                                                 ,  19, -22,  20, -22,  23, -22,  24, -22,  27,  80
                                                 ,  28,  81,  29,  82,  30,  83,  81, -22,  83, -22
  /* state[102],Index=415                 */ ,  3,  12,  91,  13,  90,  83, 129
  /* state[103],Index=422                 */ , 12,  15,  84,  16,  88,  17,  89,  18,  86,  19,  87
                                                 ,  20,  85,  23,  78,  24,  79,  27,  80,  28,  81
                                                 ,  29,  82,  30,  83
  /* state[109],Index=447                 */ , 20,   0,  -9,   7,  -9,   8,  -9,   9,  -9,  12,  -9
                                                 ,  13,  -9,  15,  -9,  16,  -9,  17,  -9,  18,  -9
                                                 ,  19,  -9,  20,  -9,  23,  -9,  24,  -9,  27,  80
                                                 ,  28,  81,  29,  82,  30,  83,  81,  -9,  83,  -9
  /* state[110],Index=488                 */ , 20,   0, -10,   7, -10,   8, -10,   9, -10,  12, -10
                                                 ,  13, -10,  15, -10,  16, -10,  17, -10,  18, -10
                                                 ,  19, -10,  20, -10,  23, -10,  24, -10,  27,  80
                                                 ,  28,  81,  29,  82,  30,  83,  81, -10,  83, -10
  /* state[111],Index=529                 */ , 20,   0, -11,   7, -11,   8, -11,   9, -11,  12, -11
                                                 ,  13, -11,  15, -11,  16, -11,  17, -11,  18, -11
                                                 ,  19, -11,  20, -11,  23, -11,  24, -11,  27, -11
                                                 ,  28, -11,  29, -11,  30,  83,  81, -11,  83, -11
  /* state[112],Index=570                 */ , 20,   0, -12,   7, -12,   8, -12,   9, -12,  12, -12
                                                 ,  13, -12,  15, -12,  16, -12,  17, -12,  18, -12
                                                 ,  19, -12,  20, -12,  23, -12,  24, -12,  27, -12
                                                 ,  28, -12,  29, -12,  30,  83,  81, -12,  83, -12
  /* state[113],Index=611                 */ , 20,   0, -13,   7, -13,   8, -13,   9, -13,  12, -13
                                                 ,  13, -13,  15, -13,  16, -13,  17, -13,  18, -13
                                                 ,  19, -13,  20, -13,  23, -13,  24, -13,  27, -13
                                                 ,  28, -13,  29, -13,  30,  83,  81, -13,  83, -13
  /* state[115],Index=652                 */ , 12,   0, -71,   8, -71,  12, -71,  13, -71,  23,  78
                                                 ,  24,  79,  27,  80,  28,  81,  29,  82,  30,  83
                                                 ,  81, -71,  83, -71
  /* state[116],Index=677                 */ , 12,   0, -72,   8, -72,  12, -72,  13, -72,  23,  78
                                                 ,  24,  79,  27,  80,  28,  81,  29,  82,  30,  83
                                                 ,  81, -72,  83, -72
  /* state[117],Index=702                 */ , 12,   0, -73,   8, -73,  12, -73,  13, -73,  23,  78
                                                 ,  24,  79,  27,  80,  28,  81,  29,  82,  30,  83
                                                 ,  81, -73,  83, -73
  /* state[118],Index=727                 */ , 12,   0, -74,   8, -74,  12, -74,  13, -74,  23,  78
                                                 ,  24,  79,  27,  80,  28,  81,  29,  82,  30,  83
                                                 ,  81, -74,  83, -74
  /* state[119],Index=752                 */ , 12,   0, -75,   8, -75,  12, -75,  13, -75,  23,  78
                                                 ,  24,  79,  27,  80,  28,  81,  29,  82,  30,  83
                                                 ,  81, -75,  83, -75
  /* state[120],Index=777                 */ , 12,   0, -76,   8, -76,  12, -76,  13, -76,  23,  78
                                                 ,  24,  79,  27,  80,  28,  81,  29,  82,  30,  83
                                                 ,  81, -76,  83, -76
  /* state[122],Index=802                 */ ,  6,   0, -78,   8, -78,  12, -78,  13,  90,  81, -78
                                                 ,  83, -78
  /* state[123],Index=815                 */ ,  8,   7,  -8,   9,  -8,  23,  78,  24,  79,  27,  80
                                                 ,  28,  81,  29,  82,  30,  83
  /* state[124],Index=832                 */ ,  7,  23,  78,  24,  79,  27,  80,  28,  81,  29,  82
                                                 ,  30,  83,  81, 136
  /* state[125],Index=847                 */ ,  7,   8, 137,  23,  78,  24,  79,  27,  80,  28,  81
                                                 ,  29,  82,  30,  83
  /* state[128],Index=862                 */ ,  7,  23,  78,  24,  79,  27,  80,  28,  81,  29,  82
                                                 ,  30,  83,  81, 126
  /* state[130],Index=877                 */ ,  3,   8, 138,  12,  91,  13,  90
  /* state[134],Index=884                 */ ,  2,   8, 142,  83, 141
  /* state[135],Index=889                 */ ,  8,   8, -33,  23,  78,  24,  79,  27,  80,  28,  81
                                                 ,  29,  82,  30,  83,  83, -33
  /* state[143],Index=906                 */ ,  7,  23,  78,  24,  79,  27,  80,  28,  81,  29,  82
                                                 ,  30,  83,  81, 149
  /* state[144],Index=921                 */ ,  7,   8, 150,  23,  78,  24,  79,  27,  80,  28,  81
                                                 ,  29,  82,  30,  83
  /* state[145],Index=936                 */ ,  7,  23,  78,  24,  79,  27,  80,  28,  81,  29,  82
                                                 ,  30,  83,  81, 151
  /* state[146],Index=951                 */ ,  7,  23,  78,  24,  79,  27,  80,  28,  81,  29,  82
                                                 ,  30,  83,  81, 152
  /* state[148],Index=966                 */ ,  8,   8, -32,  23,  78,  24,  79,  27,  80,  28,  81
                                                 ,  29,  82,  30,  83,  83, -32
  /* state[153],Index=983                 */ ,  7,  23,  78,  24,  79,  27,  80,  28,  81,  29,  82
                                                 ,  30,  83,  81, 157
  /* state[154],Index=998                 */ ,  7,  23,  78,  24,  79,  27,  80,  28,  81,  29,  82
                                                 ,  30,  83,  81, 158
  /* state[155],Index=1013                */ , 20,   0, -29,   7, -29,   8, -29,   9, -29,  12, -29
                                                 ,  13, -29,  15, -29,  16, -29,  17, -29,  18, -29
                                                 ,  19, -29,  20, -29,  23,  78,  24,  79,  27,  80
                                                 ,  28,  81,  29,  82,  30,  83,  81, -29,  83, -29
  /* state[156],Index=1054                */ , 20,   0, -30,   7, -30,   8, -30,   9, -30,  12, -30
                                                 ,  13, -30,  15, -30,  16, -30,  17, -30,  18, -30
                                                 ,  19, -30,  20, -30,  23,  78,  24,  79,  27,  80
                                                 ,  28,  81,  29,  82,  30,  83,  81, -30,  83, -30
}; // Size of table:2.192(x86)/2.192(x64) bytes.

#define _ac0000 0          /* Index of uncompressed state[0]          */
#define _ac0001 0x80000000 /* Reduce by 0 on EOI                      */
#define _ac0002 0xffff0000 /* Reduce by 1 on EOI                      */
#define _ac0003 _ac0000    /* Saved 238 bytes                         */
#define _ac0004 119        /* Index of uncompressed state[4]          */
#define _ac0005 146        /* Index of uncompressed state[5]          */
#define _ac0006 0xfffb8000 /* Reduce by 5 on tokens in set[0]         */
#define _ac0007 0x805c0007 /* Shift  to 92 on SEMI                    */
#define _ac0008 153        /* Index of uncompressed state[8]          */
#define _ac0009 0xfff1800b /* Reduce by 15 on tokens in set[1]        */
#define _ac0010 0xfff0800b /* Reduce by 16 on tokens in set[1]        */
#define _ac0011 0x805e0050 /* Shift  to 94 on LPAR                    */
#define _ac0012 0x805f0050 /* Shift  to 95 on LPAR                    */
#define _ac0013 _ac0000    /* Saved 238 bytes                         */
#define _ac0014 182        /* Index of uncompressed state[14]         */
#define _ac0015 _ac0014    /* Saved 234 bytes                         */
#define _ac0016 0xffe9800b /* Reduce by 23 on tokens in set[1]        */
#define _ac0017 0xffe8800b /* Reduce by 24 on tokens in set[1]        */
#define _ac0018 0xffe7800b /* Reduce by 25 on tokens in set[1]        */
#define _ac0019 0xffe6800b /* Reduce by 26 on tokens in set[1]        */
#define _ac0020 _ac0000    /* Saved 238 bytes                         */
#define _ac0021 0x80680050 /* Shift  to 104 on LPAR                   */
#define _ac0022 0x80690050 /* Shift  to 105 on LPAR                   */
#define _ac0023 0x806a0050 /* Shift  to 106 on LPAR                   */
#define _ac0024 0x806b0052 /* Shift  to 107 on LB                     */
#define _ac0025 0xffde0050 /* Reduce by 34 on LPAR                    */
#define _ac0026 0xffdd0050 /* Reduce by 35 on LPAR                    */
#define _ac0027 0xffdc0050 /* Reduce by 36 on LPAR                    */
#define _ac0028 0xffdb0050 /* Reduce by 37 on LPAR                    */
#define _ac0029 0xffda0050 /* Reduce by 38 on LPAR                    */
#define _ac0030 0xffd90050 /* Reduce by 39 on LPAR                    */
#define _ac0031 0xffd80050 /* Reduce by 40 on LPAR                    */
#define _ac0032 0xffd70050 /* Reduce by 41 on LPAR                    */
#define _ac0033 0xffd60050 /* Reduce by 42 on LPAR                    */
#define _ac0034 0xffd50050 /* Reduce by 43 on LPAR                    */
#define _ac0035 0xffd40050 /* Reduce by 44 on LPAR                    */
#define _ac0036 0xffd30050 /* Reduce by 45 on LPAR                    */
#define _ac0037 0xffd20050 /* Reduce by 46 on LPAR                    */
#define _ac0038 0xffd10050 /* Reduce by 47 on LPAR                    */
#define _ac0039 0xffd00050 /* Reduce by 48 on LPAR                    */
#define _ac0040 0xffcf0050 /* Reduce by 49 on LPAR                    */
#define _ac0041 0xffce0050 /* Reduce by 50 on LPAR                    */
#define _ac0042 0xffcd0050 /* Reduce by 51 on LPAR                    */
#define _ac0043 0xffcc0050 /* Reduce by 52 on LPAR                    */
#define _ac0044 0xffcb0050 /* Reduce by 53 on LPAR                    */
#define _ac0045 0xffca0050 /* Reduce by 54 on LPAR                    */
#define _ac0046 0xffc90050 /* Reduce by 55 on LPAR                    */
#define _ac0047 0xffc80050 /* Reduce by 56 on LPAR                    */
#define _ac0048 0xffc70050 /* Reduce by 57 on LPAR                    */
#define _ac0049 0xffc60050 /* Reduce by 58 on LPAR                    */
#define _ac0050 0xffc50050 /* Reduce by 59 on LPAR                    */
#define _ac0051 0xffc40050 /* Reduce by 60 on LPAR                    */
#define _ac0052 0xffc30050 /* Reduce by 61 on LPAR                    */
#define _ac0053 0xffc20050 /* Reduce by 62 on LPAR                    */
#define _ac0054 0xffc10050 /* Reduce by 63 on LPAR                    */
#define _ac0055 0xffc00050 /* Reduce by 64 on LPAR                    */
#define _ac0056 0xffbf0050 /* Reduce by 65 on LPAR                    */
#define _ac0057 0xffbe0050 /* Reduce by 66 on LPAR                    */
#define _ac0058 0xffbd0050 /* Reduce by 67 on LPAR                    */
#define _ac0059 0xffbc0050 /* Reduce by 68 on LPAR                    */
#define _ac0060 0xffbb0050 /* Reduce by 69 on LPAR                    */
#define _ac0061 0xffba0050 /* Reduce by 70 on LPAR                    */
#define _ac0062 _ac0000    /* Saved 238 bytes                         */
#define _ac0063 0xffaf0050 /* Reduce by 81 on LPAR                    */
#define _ac0064 0xffae0050 /* Reduce by 82 on LPAR                    */
#define _ac0065 0xffad0050 /* Reduce by 83 on LPAR                    */
#define _ac0066 0xffac0050 /* Reduce by 84 on LPAR                    */
#define _ac0067 0xffab0050 /* Reduce by 85 on LPAR                    */
#define _ac0068 0xffaa0050 /* Reduce by 86 on LPAR                    */
#define _ac0069 0xffa90050 /* Reduce by 87 on LPAR                    */
#define _ac0070 0xffa80050 /* Reduce by 88 on LPAR                    */
#define _ac0071 0xffa70050 /* Reduce by 89 on LPAR                    */
#define _ac0072 0xffa60050 /* Reduce by 90 on LPAR                    */
#define _ac0073 0xffa50050 /* Reduce by 91 on LPAR                    */
#define _ac0074 0xffa48016 /* Reduce by 92 on tokens in set[2]        */
#define _ac0075 0xffa3800b /* Reduce by 93 on tokens in set[1]        */
#define _ac0076 0xfffe0000 /* Reduce by 2 on EOI                      */
#define _ac0077 0xfffa8000 /* Reduce by 6 on tokens in set[0]         */
#define _ac0078 _ac0014    /* Saved 234 bytes                         */
#define _ac0079 _ac0014    /* Saved 234 bytes                         */
#define _ac0080 _ac0014    /* Saved 234 bytes                         */
#define _ac0081 _ac0014    /* Saved 234 bytes                         */
#define _ac0082 _ac0014    /* Saved 234 bytes                         */
#define _ac0083 _ac0014    /* Saved 234 bytes                         */
#define _ac0084 _ac0014    /* Saved 234 bytes                         */
#define _ac0085 _ac0014    /* Saved 234 bytes                         */
#define _ac0086 _ac0014    /* Saved 234 bytes                         */
#define _ac0087 _ac0014    /* Saved 234 bytes                         */
#define _ac0088 _ac0014    /* Saved 234 bytes                         */
#define _ac0089 _ac0014    /* Saved 234 bytes                         */
#define _ac0090 _ac0000    /* Saved 238 bytes                         */
#define _ac0091 _ac0000    /* Saved 238 bytes                         */
#define _ac0092 0xfff98000 /* Reduce by 7 on tokens in set[0]         */
#define _ac0093 _ac0014    /* Saved 234 bytes                         */
#define _ac0094 _ac0014    /* Saved 234 bytes                         */
#define _ac0095 _ac0014    /* Saved 234 bytes                         */
#define _ac0096 299        /* Index of uncompressed state[96]         */
#define _ac0097 326        /* Index of uncompressed state[97]         */
#define _ac0098 0xffef800b /* Reduce by 17 on tokens in set[1]        */
#define _ac0099 333        /* Index of uncompressed state[99]         */
#define _ac0100 _ac0014    /* Saved 234 bytes                         */
#define _ac0101 374        /* Index of uncompressed state[101]        */
#define _ac0102 415        /* Index of uncompressed state[102]        */
#define _ac0103 422        /* Index of uncompressed state[103]        */
#define _ac0104 _ac0000    /* Saved 238 bytes                         */
#define _ac0105 0x804a0003 /* Shift  to 74 on NAME                    */
#define _ac0106 0x804a0003 /* Shift  to 74 on NAME                    */
#define _ac0107 _ac0014    /* Saved 234 bytes                         */
#define _ac0108 0xffb18021 /* Reduce by 79 on tokens in set[3]        */
#define _ac0109 447        /* Index of uncompressed state[109]        */
#define _ac0110 488        /* Index of uncompressed state[110]        */
#define _ac0111 529        /* Index of uncompressed state[111]        */
#define _ac0112 570        /* Index of uncompressed state[112]        */
#define _ac0113 611        /* Index of uncompressed state[113]        */
#define _ac0114 0xfff2800b /* Reduce by 14 on tokens in set[1]        */
#define _ac0115 652        /* Index of uncompressed state[115]        */
#define _ac0116 677        /* Index of uncompressed state[116]        */
#define _ac0117 702        /* Index of uncompressed state[117]        */
#define _ac0118 727        /* Index of uncompressed state[118]        */
#define _ac0119 752        /* Index of uncompressed state[119]        */
#define _ac0120 777        /* Index of uncompressed state[120]        */
#define _ac0121 0xffb38021 /* Reduce by 77 on tokens in set[3]        */
#define _ac0122 802        /* Index of uncompressed state[122]        */
#define _ac0123 815        /* Index of uncompressed state[123]        */
#define _ac0124 832        /* Index of uncompressed state[124]        */
#define _ac0125 847        /* Index of uncompressed state[125]        */
#define _ac0126 0xffec800b /* Reduce by 20 on tokens in set[1]        */
#define _ac0127 0xffb08021 /* Reduce by 80 on tokens in set[3]        */
#define _ac0128 862        /* Index of uncompressed state[128]        */
#define _ac0129 0xffe5800b /* Reduce by 27 on tokens in set[1]        */
#define _ac0130 877        /* Index of uncompressed state[130]        */
#define _ac0131 0x808b0009 /* Shift  to 139 on TO                     */
#define _ac0132 0x805d0006 /* Shift  to 93 on ASSIGN                  */
#define _ac0133 0x808c0009 /* Shift  to 140 on TO                     */
#define _ac0134 884        /* Index of uncompressed state[134]        */
#define _ac0135 889        /* Index of uncompressed state[135]        */
#define _ac0136 0xffee800b /* Reduce by 18 on tokens in set[1]        */
#define _ac0137 _ac0014    /* Saved 234 bytes                         */
#define _ac0138 _ac0014    /* Saved 234 bytes                         */
#define _ac0139 _ac0014    /* Saved 234 bytes                         */
#define _ac0140 _ac0014    /* Saved 234 bytes                         */
#define _ac0141 0x80930050 /* Shift  to 147 on LPAR                   */
#define _ac0142 _ac0014    /* Saved 234 bytes                         */
#define _ac0143 906        /* Index of uncompressed state[143]        */
#define _ac0144 921        /* Index of uncompressed state[144]        */
#define _ac0145 936        /* Index of uncompressed state[145]        */
#define _ac0146 951        /* Index of uncompressed state[146]        */
#define _ac0147 _ac0014    /* Saved 234 bytes                         */
#define _ac0148 966        /* Index of uncompressed state[148]        */
#define _ac0149 0xffed800b /* Reduce by 19 on tokens in set[1]        */
#define _ac0150 _ac0014    /* Saved 234 bytes                         */
#define _ac0151 _ac0014    /* Saved 234 bytes                         */
#define _ac0152 _ac0014    /* Saved 234 bytes                         */
#define _ac0153 983        /* Index of uncompressed state[153]        */
#define _ac0154 998        /* Index of uncompressed state[154]        */
#define _ac0155 1013       /* Index of uncompressed state[155]        */
#define _ac0156 1054       /* Index of uncompressed state[156]        */
#define _ac0157 0xffe1800b /* Reduce by 31 on tokens in set[1]        */
#define _ac0158 0xffe4800b /* Reduce by 28 on tokens in set[1]        */

static const unsigned int actionCode[159] = {
   _ac0000,_ac0001,_ac0002,_ac0003,_ac0004,_ac0005,_ac0006,_ac0007,_ac0008,_ac0009
  ,_ac0010,_ac0011,_ac0012,_ac0013,_ac0014,_ac0015,_ac0016,_ac0017,_ac0018,_ac0019
  ,_ac0020,_ac0021,_ac0022,_ac0023,_ac0024,_ac0025,_ac0026,_ac0027,_ac0028,_ac0029
  ,_ac0030,_ac0031,_ac0032,_ac0033,_ac0034,_ac0035,_ac0036,_ac0037,_ac0038,_ac0039
  ,_ac0040,_ac0041,_ac0042,_ac0043,_ac0044,_ac0045,_ac0046,_ac0047,_ac0048,_ac0049
  ,_ac0050,_ac0051,_ac0052,_ac0053,_ac0054,_ac0055,_ac0056,_ac0057,_ac0058,_ac0059
  ,_ac0060,_ac0061,_ac0062,_ac0063,_ac0064,_ac0065,_ac0066,_ac0067,_ac0068,_ac0069
  ,_ac0070,_ac0071,_ac0072,_ac0073,_ac0074,_ac0075,_ac0076,_ac0077,_ac0078,_ac0079
  ,_ac0080,_ac0081,_ac0082,_ac0083,_ac0084,_ac0085,_ac0086,_ac0087,_ac0088,_ac0089
  ,_ac0090,_ac0091,_ac0092,_ac0093,_ac0094,_ac0095,_ac0096,_ac0097,_ac0098,_ac0099
  ,_ac0100,_ac0101,_ac0102,_ac0103,_ac0104,_ac0105,_ac0106,_ac0107,_ac0108,_ac0109
  ,_ac0110,_ac0111,_ac0112,_ac0113,_ac0114,_ac0115,_ac0116,_ac0117,_ac0118,_ac0119
  ,_ac0120,_ac0121,_ac0122,_ac0123,_ac0124,_ac0125,_ac0126,_ac0127,_ac0128,_ac0129
  ,_ac0130,_ac0131,_ac0132,_ac0133,_ac0134,_ac0135,_ac0136,_ac0137,_ac0138,_ac0139
  ,_ac0140,_ac0141,_ac0142,_ac0143,_ac0144,_ac0145,_ac0146,_ac0147,_ac0148,_ac0149
  ,_ac0150,_ac0151,_ac0152,_ac0153,_ac0154,_ac0155,_ac0156,_ac0157,_ac0158
}; // Size of table:636(x86)/640(x64) bytes.

/******************************************************************************\
* The successor matrix is used when the parser has reduced by prod A -> alfa   *
* The number of elements popped from the stack is the length of the alfa, L.   *
* and the state is taken from stacktop. The nonterminal A is leftside of the   *
* reduce production                                                            *
* Used by LRParser to find newstate = successor(state,A).                      *
* For each relevant state the array stateSuccessors contains a list of numbers *
*                                                                              *
*   Item list for state NNNN with 3 items   3, 5,3 , 6,2, 8,5                  *
*   Number of pairs in list ----------------+  | |                             *
*   NonTerminal A------------------------------+ |                             *
*   Goto this state------------------------------+                             *
*                                                                              *
* The array successorsIndex contains an index for each of these states         *
* referering to the first number belonging to the state (as actionCode)        *
* or 0 if a state has no items of the form B -> beta . A gamma                 *
\******************************************************************************/
static const TableType stateSuccessors[] = {
  /* successors state[0], Index=0         */   16,  85,   1,  86,   2,  87,   3,  88,   4,  89,   5
                                                 ,  90,   6,  91,   7,  92,   8,  93,   9,  94,  10
                                                 ,  95,  11,  96,  12,  97,  16,  98,  17,  99,  18
                                                 , 100,  19
  /* successors state[3], Index=33        */ , 14,  86,  76,  88,   4,  89,   5,  90,  77,  91,   7
                                                 ,  92,   8,  93,   9,  94,  10,  95,  11,  96,  12
                                                 ,  97,  16,  98,  17,  99,  18, 100,  19
  /* successors state[13], Index=62       */ , 11,  88,  96,  89,  97,  92,  98,  93,   9,  94,  10
                                                 ,  95,  11,  96,  12,  97,  16,  98,  17,  99,  18
                                                 , 100,  19
  /* successors state[14], Index=85       */ , 10,  88,  99,  92,  98,  93,   9,  94,  10,  95,  11
                                                 ,  96,  12,  97,  16,  98,  17,  99,  18, 100,  19
  /* successors state[15], Index=106      */ , 10,  88, 101,  92,  98,  93,   9,  94,  10,  95,  11
                                                 ,  96,  12,  97,  16,  98,  17,  99,  18, 100,  19
  /* successors state[20], Index=127      */ , 11,  88, 103,  89, 102,  92,  98,  93,   9,  94,  10
                                                 ,  95,  11,  96,  12,  97,  16,  98,  17,  99,  18
                                                 , 100,  19
  /* successors state[62], Index=150      */ , 11,  88, 103,  89, 108,  92,  98,  93,   9,  94,  10
                                                 ,  95,  11,  96,  12,  97,  16,  98,  17,  99,  18
                                                 , 100,  19
  /* successors state[78], Index=173      */ , 10,  88, 109,  92,  98,  93,   9,  94,  10,  95,  11
                                                 ,  96,  12,  97,  16,  98,  17,  99,  18, 100,  19
  /* successors state[79], Index=194      */ , 10,  88, 110,  92,  98,  93,   9,  94,  10,  95,  11
                                                 ,  96,  12,  97,  16,  98,  17,  99,  18, 100,  19
  /* successors state[80], Index=215      */ , 10,  88, 111,  92,  98,  93,   9,  94,  10,  95,  11
                                                 ,  96,  12,  97,  16,  98,  17,  99,  18, 100,  19
  /* successors state[81], Index=236      */ , 10,  88, 112,  92,  98,  93,   9,  94,  10,  95,  11
                                                 ,  96,  12,  97,  16,  98,  17,  99,  18, 100,  19
  /* successors state[82], Index=257      */ , 10,  88, 113,  92,  98,  93,   9,  94,  10,  95,  11
                                                 ,  96,  12,  97,  16,  98,  17,  99,  18, 100,  19
  /* successors state[83], Index=278      */ , 10,  88, 114,  92,  98,  93,   9,  94,  10,  95,  11
                                                 ,  96,  12,  97,  16,  98,  17,  99,  18, 100,  19
  /* successors state[84], Index=299      */ , 10,  88, 115,  92,  98,  93,   9,  94,  10,  95,  11
                                                 ,  96,  12,  97,  16,  98,  17,  99,  18, 100,  19
  /* successors state[85], Index=320      */ , 10,  88, 116,  92,  98,  93,   9,  94,  10,  95,  11
                                                 ,  96,  12,  97,  16,  98,  17,  99,  18, 100,  19
  /* successors state[86], Index=341      */ , 10,  88, 117,  92,  98,  93,   9,  94,  10,  95,  11
                                                 ,  96,  12,  97,  16,  98,  17,  99,  18, 100,  19
  /* successors state[87], Index=362      */ , 10,  88, 118,  92,  98,  93,   9,  94,  10,  95,  11
                                                 ,  96,  12,  97,  16,  98,  17,  99,  18, 100,  19
  /* successors state[88], Index=383      */ , 10,  88, 119,  92,  98,  93,   9,  94,  10,  95,  11
                                                 ,  96,  12,  97,  16,  98,  17,  99,  18, 100,  19
  /* successors state[89], Index=404      */ , 10,  88, 120,  92,  98,  93,   9,  94,  10,  95,  11
                                                 ,  96,  12,  97,  16,  98,  17,  99,  18, 100,  19
  /* successors state[90], Index=425      */ , 11,  88, 103,  89, 121,  92,  98,  93,   9,  94,  10
                                                 ,  95,  11,  96,  12,  97,  16,  98,  17,  99,  18
                                                 , 100,  19
  /* successors state[91], Index=448      */ , 11,  88, 103,  89, 122,  92,  98,  93,   9,  94,  10
                                                 ,  95,  11,  96,  12,  97,  16,  98,  17,  99,  18
                                                 , 100,  19
  /* successors state[93], Index=471      */ , 10,  88, 123,  92,  98,  93,   9,  94,  10,  95,  11
                                                 ,  96,  12,  97,  16,  98,  17,  99,  18, 100,  19
  /* successors state[94], Index=492      */ , 10,  88, 124,  92,  98,  93,   9,  94,  10,  95,  11
                                                 ,  96,  12,  97,  16,  98,  17,  99,  18, 100,  19
  /* successors state[95], Index=513      */ , 10,  88, 125,  92,  98,  93,   9,  94,  10,  95,  11
                                                 ,  96,  12,  97,  16,  98,  17,  99,  18, 100,  19
  /* successors state[100], Index=534     */ , 10,  88, 128,  92,  98,  93,   9,  94,  10,  95,  11
                                                 ,  96,  12,  97,  16,  98,  17,  99,  18, 100,  19
  /* successors state[104], Index=555     */ , 11,  88, 103,  89, 130,  92,  98,  93,   9,  94,  10
                                                 ,  95,  11,  96,  12,  97,  16,  98,  17,  99,  18
                                                 , 100,  19
  /* successors state[105], Index=578     */ ,  2,  91, 131,  92, 132
  /* successors state[106], Index=583     */ ,  2,  91, 133,  92, 132
  /* successors state[107], Index=588     */ , 11,  88, 135,  92,  98,  93,   9,  94,  10,  95,  11
                                                 ,  96,  12,  97,  16,  98,  17,  99,  18, 100,  19
                                                 , 101, 134
  /* successors state[137], Index=611     */ , 10,  88, 143,  92,  98,  93,   9,  94,  10,  95,  11
                                                 ,  96,  12,  97,  16,  98,  17,  99,  18, 100,  19
  /* successors state[138], Index=632     */ , 10,  88, 144,  92,  98,  93,   9,  94,  10,  95,  11
                                                 ,  96,  12,  97,  16,  98,  17,  99,  18, 100,  19
  /* successors state[139], Index=653     */ , 10,  88, 145,  92,  98,  93,   9,  94,  10,  95,  11
                                                 ,  96,  12,  97,  16,  98,  17,  99,  18, 100,  19
  /* successors state[140], Index=674     */ , 10,  88, 146,  92,  98,  93,   9,  94,  10,  95,  11
                                                 ,  96,  12,  97,  16,  98,  17,  99,  18, 100,  19
  /* successors state[142], Index=695     */ , 10,  88, 148,  92,  98,  93,   9,  94,  10,  95,  11
                                                 ,  96,  12,  97,  16,  98,  17,  99,  18, 100,  19
  /* successors state[147], Index=716     */ , 10,  88, 153,  92,  98,  93,   9,  94,  10,  95,  11
                                                 ,  96,  12,  97,  16,  98,  17,  99,  18, 100,  19
  /* successors state[150], Index=737     */ , 10,  88, 154,  92,  98,  93,   9,  94,  10,  95,  11
                                                 ,  96,  12,  97,  16,  98,  17,  99,  18, 100,  19
  /* successors state[151], Index=758     */ , 10,  88, 155,  92,  98,  93,   9,  94,  10,  95,  11
                                                 ,  96,  12,  97,  16,  98,  17,  99,  18, 100,  19
  /* successors state[152], Index=779     */ , 10,  88, 156,  92,  98,  93,   9,  94,  10,  95,  11
                                                 ,  96,  12,  97,  16,  98,  17,  99,  18, 100,  19
}; // Size of table:1.600(x86)/1.600(x64) bytes.

#define nil (unsigned short)-1
static const unsigned short successorsIndex[159] = {
       0,  nil,  nil,   33,  nil,  nil,  nil,  nil,  nil,  nil
  ,  nil,  nil,  nil,   62,   85,  106,  nil,  nil,  nil,  nil
  ,  127,  nil,  nil,  nil,  nil,  nil,  nil,  nil,  nil,  nil
  ,  nil,  nil,  nil,  nil,  nil,  nil,  nil,  nil,  nil,  nil
  ,  nil,  nil,  nil,  nil,  nil,  nil,  nil,  nil,  nil,  nil
  ,  nil,  nil,  nil,  nil,  nil,  nil,  nil,  nil,  nil,  nil
  ,  nil,  nil,  150,  nil,  nil,  nil,  nil,  nil,  nil,  nil
  ,  nil,  nil,  nil,  nil,  nil,  nil,  nil,  nil,  173,  194
  ,  215,  236,  257,  278,  299,  320,  341,  362,  383,  404
  ,  425,  448,  nil,  471,  492,  513,  nil,  nil,  nil,  nil
  ,  534,  nil,  nil,  nil,  555,  578,  583,  588,  nil,  nil
  ,  nil,  nil,  nil,  nil,  nil,  nil,  nil,  nil,  nil,  nil
  ,  nil,  nil,  nil,  nil,  nil,  nil,  nil,  nil,  nil,  nil
  ,  nil,  nil,  nil,  nil,  nil,  nil,  nil,  611,  632,  653
  ,  674,  nil,  695,  nil,  nil,  nil,  nil,  716,  nil,  nil
  ,  737,  758,  779,  nil,  nil,  nil,  nil,  nil,  nil
}; // Size of table:320(x86)/320(x64) bytes.

/******************************************************************************\
* The productionLength[] array is indexed by production number and holds       *
* the number of symbols on the right side of each production.                  *
\******************************************************************************/
static const unsigned char productionLength[94] = {
  /*   0 */    1,   1,   2,   1,   1,   1,   2,   2,   3,   3,
  /*  10 */    3,   3,   3,   3,   3,   1,   1,   1,   4,   6,
  /*  20 */    3,   2,   2,   1,   1,   1,   1,   3,   8,   7,
  /*  30 */    7,   7,   3,   1,   1,   1,   1,   1,   1,   1,
  /*  40 */    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
  /*  50 */    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
  /*  60 */    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
  /*  70 */    1,   3,   3,   3,   3,   3,   3,   3,   3,   2,
  /*  80 */    3,   1,   1,   1,   1,   1,   1,   1,   1,   1,
  /*  90 */    1,   1,   1,   1
}; // Size of table:96(x86)/96(x64) bytes.

/******************************************************************************\
* The leftSide[] array is indexed by production number, and holds the          *
* nonTerminal A on the left side of each production.                           *
\******************************************************************************/
static const TableType leftSide[94] = {
  /*   0 */   84,  85,  85,  86,  86,  87,  87,  90,  91,  88,
  /*  10 */   88,  88,  88,  88,  88,  88,  93,  93,  93,  93,
  /*  20 */   93,  93,  93,  93,  93,  93,  93,  93,  97,  98,
  /*  30 */   99, 100, 101, 101,  95,  95,  95,  95,  95,  95,
  /*  40 */   95,  95,  95,  95,  95,  95,  95,  95,  95,  95,
  /*  50 */   95,  95,  95,  95,  95,  95,  95,  95,  95,  95,
  /*  60 */   95,  95,  95,  95,  95,  95,  95,  95,  95,  95,
  /*  70 */   95,  89,  89,  89,  89,  89,  89,  89,  89,  89,
  /*  80 */   89,  96,  96,  96,  96,  96,  96,  96,  96,  96,
  /*  90 */   96,  96,  92,  94
}; // Size of table:188(x86)/192(x64) bytes.

/******************************************************************************\
* The rightSide[] matrix is indexed by production number and holds             *
* the right side symbols of each production.                                   *
* Compressed and only used for debugging.                                      *
\******************************************************************************/
static const TableType rightSideTable[171] = {
  /*   0 */   85
  /*   1 */ , 86
  /*   2 */ , 87, 86
  /*   3 */ , 88
  /*   4 */ , 89
  /*   5 */ , 90
  /*   6 */ , 87, 90
  /*   7 */ , 91,  7
  /*   8 */ , 92,  6, 88
  /*   9 */ , 88, 23, 88
  /*  10 */ , 88, 24, 88
  /*  11 */ , 88, 27, 88
  /*  12 */ , 88, 28, 88
  /*  13 */ , 88, 29, 88
  /*  14 */ , 88, 30, 88
  /*  15 */ , 93
  /*  16 */ , 94
  /*  17 */ , 92
  /*  18 */ , 95, 80, 88, 81
  /*  19 */ , 96, 80, 88,  8, 88, 81
  /*  20 */ , 80, 88, 81
  /*  21 */ , 24, 88
  /*  22 */ , 23, 88
  /*  23 */ , 97
  /*  24 */ , 98
  /*  25 */ , 99
  /*  26 */ ,100
  /*  27 */ , 82, 89, 83
  /*  28 */ ,  4, 80, 89,  8, 88,  8, 88, 81
  /*  29 */ , 10, 80, 91,  9, 88, 81, 88
  /*  30 */ , 11, 80, 91,  9, 88, 81, 88
  /*  31 */ , 78, 82,101, 83, 80, 88, 81
  /*  32 */ ,101,  8, 88
  /*  33 */ , 88
  /*  34 */ , 50
  /*  35 */ , 31
  /*  36 */ , 32
  /*  37 */ , 33
  /*  38 */ , 34
  /*  39 */ , 35
  /*  40 */ , 36
  /*  41 */ , 37
  /*  42 */ , 38
  /*  43 */ , 40
  /*  44 */ , 51
  /*  45 */ , 41
  /*  46 */ , 42
  /*  47 */ , 43
  /*  48 */ , 44
  /*  49 */ , 52
  /*  50 */ , 53
  /*  51 */ , 54
  /*  52 */ , 55
  /*  53 */ , 56
  /*  54 */ , 57
  /*  55 */ , 59
  /*  56 */ , 60
  /*  57 */ , 61
  /*  58 */ , 62
  /*  59 */ , 63
  /*  60 */ , 64
  /*  61 */ , 65
  /*  62 */ , 66
  /*  63 */ , 45
  /*  64 */ , 71
  /*  65 */ , 46
  /*  66 */ , 47
  /*  67 */ , 72
  /*  68 */ , 73
  /*  69 */ , 48
  /*  70 */ , 49
  /*  71 */ , 88, 15, 88
  /*  72 */ , 88, 20, 88
  /*  73 */ , 88, 18, 88
  /*  74 */ , 88, 19, 88
  /*  75 */ , 88, 16, 88
  /*  76 */ , 88, 17, 88
  /*  77 */ , 89, 13, 89
  /*  78 */ , 89, 12, 89
  /*  79 */ , 14, 89
  /*  80 */ , 80, 89, 81
  /*  81 */ , 75
  /*  82 */ , 76
  /*  83 */ , 77
  /*  84 */ , 79
  /*  85 */ , 70
  /*  86 */ , 74
  /*  87 */ , 68
  /*  88 */ , 67
  /*  89 */ , 69
  /*  90 */ , 39
  /*  91 */ , 58
  /*  92 */ ,  3
  /*  93 */ ,  1
}; // Size of table:344(x86)/344(x64) bytes.

/******************************************************************************\
* symbolNames contains names of terminal and nonTerminal separated by space    *
* Used for debugging.                                                          *
\******************************************************************************/
static const char *symbolNames = {
  "EOI"
  " NUMBER"
  " BOOLCONST"
  " NAME"
  " IIF"
  " STMTLIST"
  " ASSIGN"
  " SEMI"
  " COMMA"
  " TO"
  " INDEXEDSUM"
  " INDEXEDPRODUCT"
  " OR"
  " AND"
  " NOT"
  " EQ"
  " GE"
  " GT"
  " LE"
  " LT"
  " NE"
  " SUM"
  " ADDENT"
  " PLUS"
  " MINUS"
  " UNARYMINUS"
  " PRODUCT"
  " PROD"
  " QUOT"
  " MOD"
  " POW"
  " ACOS"
  " ACOSH"
  " ACOT"
  " ACSC"
  " ASEC"
  " ASIN"
  " ASINH"
  " ATAN"
  " ATAN2"
  " ATANH"
  " COS"
  " COSH"
  " COT"
  " CSC"
  " SEC"
  " SIN"
  " SINH"
  " TAN"
  " TANH"
  " ABS"
  " CEIL"
  " ERF"
  " EXP"
  " EXP10"
  " EXP2"
  " FAC"
  " FLOOR"
  " HYPOT"
  " GAMMA"
  " GAUSS"
  " INVERF"
  " LN"
  " LOG10"
  " LOG2"
  " NORM"
  " PROBIT"
  " CHI2DIST"
  " CHI2DENS"
  " LINCGAMMA"
  " ROOT"
  " SIGN"
  " SQR"
  " SQRT"
  " BINOMIAL"
  " MAX"
  " MIN"
  " NORMRAND"
  " POLY"
  " RAND"
  " LPAR"
  " RPAR"
  " LB"
  " RB"
  " start"
  " function"
  " final_expr"
  " assignStmtList"
  " expr"
  " boolExpr"
  " assignStmt"
  " assign"
  " name"
  " unary"
  " number"
  " function1"
  " function2"
  " conditionalExpr"
  " sumExpr"
  " productExpr"
  " polyExpr"
  " exprList"
}; // Total size of strings:620(x86)/624(x64) bytes

static const ParserTablesTemplate<TableType, unsigned short> ExpressionTables_s(actionCode, compressedLasets, uncompressedActions
                                                                               ,successorsIndex , stateSuccessors
                                                                               ,productionLength, leftSide
                                                                               ,rightSideTable  , symbolNames
                                                                               ,84, 102, 94, 159, 6112, 6184);

const ParserTables *ExpressionParser::ExpressionTables = &ExpressionTables_s;
// Size of ExpressionTables_s: 68(x86)/120(x64) bytes. Size of ExpressionTables:4(x86)/8(x64) bytes

// Total size of table data:6.112(x86)/6.184(x64) bytes.

}; // namespace Expr
