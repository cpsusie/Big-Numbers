/* DO NOT EDIT THIS FILE - it is machine generated */
#line 57 "C:\\Mytools2015\\Lib\\Src\\Expression\\Expression.y"
#include "pch.h"
#include <Math/Real.h>
#include <Math/Expression/ExpressionParser.h>

#line 36 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
#include <ParserTablesTemplate.h>

namespace Expr {

/************************************************************************************\
* The 4 arrays actionCode, termListTable, actionListTable and termSetTable           *
* holds a compressed action-matrix, used by LRParser to find                         *
* action = getAction(S,T), where S is current state, T is next terminal on input     *
*                                                                                    *
* The interpretation of action is:                                                   *
*   action <  0 - Reduce by production p, p == -action.                              *
*   action == 0 - Accept. Reduce by production 0.                                    *
*   action >  0 - Shift to newstate (=action),                                       *
*                 ie. push(newstate), set current state=newstate                     *
*                 and advance input 1 symbol.                                        *
*   action == _ParserError - Unexpected input. Do some recovery, to try to           *
*                 synchronize input and stack, in order to continue parse.           *
*                 (See LRParser::recover() in LRParser.cpp)                          *
*                                                                                    *
* For each state S, a #define is generated and used as element S in array            *
* actionCode. Each define looks as:                                                  *
*                                                                                    *
* #define _acDDDD Code                                                               *
*                                                                                    *
* where DDDD is the statenumber S and Code is an unsigned int with the following     *
* format:                                                                            *
*            0         1         2         3                                         *
* Bit index: 01234567890123456789012345678901                                        *
* Code     : tttttttttttttttCCaaaaaaaaaaaaaaa                                        *
*                                                                                    *
* t        : Bit[ 0-14] : unsigned short                                             *
* a        : Bit[17-31] : signed short                                               *
* CC       : Bit[15-16] : Indicates how to interpret t and a:                        *
*                                                                                    *
* CC == 0: CompCodeTermList (uncompressed)                                           *
*       t: Index into array termListTable, pointing at the first element of          *
*          termList                                                                  *
*       a: Index into array actionListTable, pointing at the first element of        *
*          actionList                                                                *
*                                                                                    *
*       n                  : termListTable[t] = number of elements in termList.      *
*       termList[0..n-1]   : termListTable[t+1..t+n]                                 *
*                            Ordered list of legal terminals                         *
*       actionList[0..n-1] : actionListTable[a..a+n-1] (same length as termList).    *
*                                                                                    *
*       To get action, find index k in termList, so termList[k] == T,k=[0..n-1]      *
*       and set action = actionList[k].                                              *
*       If T is not found, set action = _ParseError.                                 *
*       Note that both termList and actionList may be shared by several states.      *
*                                                                                    *
* CC == 1: CompCodeSplitNode                                                         *
*       t and a are both indices to 2 child entries in actionCode, which can be      *
*       another _acNNNN or an extra node, _snNNNN, whichever is needed (values are   *
*       reused as much as possible, ie. if _snNNNN equals some _acNNNN then no       *
*       _snNNNN is added, but parent entry will point to _acNNNN instead.            *
*       Recursive tree search, with max-recursion level specified in                 *
*       parsegen +c options                                                          *
*                                                                                    *
* CC == 2: CompCodeOneItem (Only 1 legal terminal in the state)                      *
*       t: Legal terminal.                                                           *
*       a: Action.                                                                   *
*                                                                                    *
* CC == 3: CompCodeTermSet (always reduce by same reduce production P = -a)          *
*       t: Index into termSetTable, pointing at the first element of termSet         *
*       a: Action.                                                                   *
*                                                                                    *
*       termSetTable is a list of termSet, bitsets, each with terminalCount bits     *
*       1-bits for legal terminals, 0-bits for illegal terminals.                    *
*                                                                                    *
*       b                  : Number of bytes in each termSet=(terminalCount-1)/8+1   *
*       termSet[0..b-1]    : termSetTable[t..t+b-1]                                  *
*                                                                                    *
*       As for uncompressed states, the same check for existence is done.            *
*       If terminal T is not present in termSet, set action = _ParseError.           *
*       Note that each termSet may be shared by several states.                      *
\************************************************************************************/

#define _ac0000 0x00000000 /* termArray    0, actionArray    0                      */
#define _ac0001 0x00000000 /* termArray    0, actionArray    0                      */
#define _ac0002 0x00000000 /* termArray    0, actionArray    0                      */
#define _ac0003 0x0076003c /* termArray    1, actionArray    1                      */
#define _ac0004 0x0076003c /* termArray    1, actionArray    1                      */
#define _ac0005 0x00000000 /* termArray    0, actionArray    0                      */
#define _ac0006 0x00000000 /* termArray    0, actionArray    0                      */
#define _ac0007 0x0076003c /* termArray    1, actionArray    1                      */
#define _ac0008 0x0076003c /* termArray    1, actionArray    1                      */
#define _ac0009 0x0076003c /* termArray    1, actionArray    1                      */
#define _ac0010 0x0076003c /* termArray    1, actionArray    1                      */
#define _ac0011 0x0076003c /* termArray    1, actionArray    1                      */
#define _ac0012 0x0076003c /* termArray    1, actionArray    1                      */
#define _ac0013 0x0076003c /* termArray    1, actionArray    1                      */
#define _ac0014 0x0076003c /* termArray    1, actionArray    1                      */
#define _ac0015 0x0076003c /* termArray    1, actionArray    1                      */
#define _ac0016 0x0076003c /* termArray    1, actionArray    1                      */
#define _ac0017 0x0076003c /* termArray    1, actionArray    1                      */
#define _ac0018 0x0076003c /* termArray    1, actionArray    1                      */
#define _ac0019 0x00000000 /* termArray    0, actionArray    0                      */
#define _ac0020 0x00000000 /* termArray    0, actionArray    0                      */
#define _ac0021 0x0076003c /* termArray    1, actionArray    1                      */
#define _ac0022 0x0076003c /* termArray    1, actionArray    1                      */
#define _ac0023 0x0076003c /* termArray    1, actionArray    1                      */
#define _ac0024 0x0076003c /* termArray    1, actionArray    1                      */
#define _ac0025 0x00000000 /* termArray    0, actionArray    0                      */
#define _ac0026 0x0076003c /* termArray    1, actionArray    1                      */
#define _ac0027 0x0076003c /* termArray    1, actionArray    1                      */
#define _ac0028 0x0076003c /* termArray    1, actionArray    1                      */
#define _ac0029 0x0076003c /* termArray    1, actionArray    1                      */
#define _ac0030 0x0076003c /* termArray    1, actionArray    1                      */
#define _ac0031 0x0076003c /* termArray    1, actionArray    1                      */
#define _ac0032 0x0076003c /* termArray    1, actionArray    1                      */
#define _ac0033 0x0076003c /* termArray    1, actionArray    1                      */
#define _ac0034 0x0076003c /* termArray    1, actionArray    1                      */
#define _ac0035 0x0076003c /* termArray    1, actionArray    1                      */
#define _ac0036 0x00010000 /* Reduce by    0 (Accept) on EOI                        */
#define _ac0037 0xffff0000 /* Reduce by    1 on EOI                                 */
#define _ac0038 0x00ea0077 /* termArray    2, actionArray    2                      */
#define _ac0039 0x01040085 /* termArray    3, actionArray    3                      */
#define _ac0040 0xfff78000 /* Reduce by    5 on tokens in termBitSet[0]             */
#define _ac0041 0x00d70005 /* Shift  to  107 on SEMI                                */
#define _ac0042 0x013e80a0 /* Split(_as0000,_as0001)                                */
#define _ac0043 0xffe38014 /* Reduce by   15 on tokens in termBitSet[2]             */
#define _ac0044 0xffe18014 /* Reduce by   16 on tokens in termBitSet[2]             */
#define _ac0045 0x002d004a /* Shift  to   22 on LPAR                                */
#define _ac0046 0x002f004a /* Shift  to   23 on LPAR                                */
#define _ac0047 0xffd38014 /* Reduce by   23 on tokens in termBitSet[2]             */
#define _ac0048 0xffd18014 /* Reduce by   24 on tokens in termBitSet[2]             */
#define _ac0049 0xffcf8014 /* Reduce by   25 on tokens in termBitSet[2]             */
#define _ac0050 0xffcd8014 /* Reduce by   26 on tokens in termBitSet[2]             */
#define _ac0051 0x0033004a /* Shift  to   25 on LPAR                                */
#define _ac0052 0x00e7004a /* Shift  to  115 on LPAR                                */
#define _ac0053 0x00e9004a /* Shift  to  116 on LPAR                                */
#define _ac0054 0x0035004c /* Shift  to   26 on LB                                  */
#define _ac0055 0xffbd004a /* Reduce by   34 on LPAR                                */
#define _ac0056 0xffbb004a /* Reduce by   35 on LPAR                                */
#define _ac0057 0xffb9004a /* Reduce by   36 on LPAR                                */
#define _ac0058 0xffb7004a /* Reduce by   37 on LPAR                                */
#define _ac0059 0xffb5004a /* Reduce by   38 on LPAR                                */
#define _ac0060 0xffb3004a /* Reduce by   39 on LPAR                                */
#define _ac0061 0xffb1004a /* Reduce by   40 on LPAR                                */
#define _ac0062 0xffaf004a /* Reduce by   41 on LPAR                                */
#define _ac0063 0xffad004a /* Reduce by   42 on LPAR                                */
#define _ac0064 0xffab004a /* Reduce by   43 on LPAR                                */
#define _ac0065 0xffa9004a /* Reduce by   44 on LPAR                                */
#define _ac0066 0xffa7004a /* Reduce by   45 on LPAR                                */
#define _ac0067 0xffa5004a /* Reduce by   46 on LPAR                                */
#define _ac0068 0xffa3004a /* Reduce by   47 on LPAR                                */
#define _ac0069 0xffa1004a /* Reduce by   48 on LPAR                                */
#define _ac0070 0xff9f004a /* Reduce by   49 on LPAR                                */
#define _ac0071 0xff9d004a /* Reduce by   50 on LPAR                                */
#define _ac0072 0xff9b004a /* Reduce by   51 on LPAR                                */
#define _ac0073 0xff99004a /* Reduce by   52 on LPAR                                */
#define _ac0074 0xff97004a /* Reduce by   53 on LPAR                                */
#define _ac0075 0xff95004a /* Reduce by   54 on LPAR                                */
#define _ac0076 0xff93004a /* Reduce by   55 on LPAR                                */
#define _ac0077 0xff91004a /* Reduce by   56 on LPAR                                */
#define _ac0078 0xff8f004a /* Reduce by   57 on LPAR                                */
#define _ac0079 0xff8d004a /* Reduce by   58 on LPAR                                */
#define _ac0080 0xff8b004a /* Reduce by   59 on LPAR                                */
#define _ac0081 0xff89004a /* Reduce by   60 on LPAR                                */
#define _ac0082 0xff87004a /* Reduce by   61 on LPAR                                */
#define _ac0083 0xff85004a /* Reduce by   62 on LPAR                                */
#define _ac0084 0xff83004a /* Reduce by   63 on LPAR                                */
#define _ac0085 0xff81004a /* Reduce by   64 on LPAR                                */
#define _ac0086 0xff7f004a /* Reduce by   65 on LPAR                                */
#define _ac0087 0xff7d004a /* Reduce by   66 on LPAR                                */
#define _ac0088 0xff7b004a /* Reduce by   67 on LPAR                                */
#define _ac0089 0xff79004a /* Reduce by   68 on LPAR                                */
#define _ac0090 0xff77004a /* Reduce by   69 on LPAR                                */
#define _ac0091 0xff75004a /* Reduce by   70 on LPAR                                */
#define _ac0092 0xff5f004a /* Reduce by   81 on LPAR                                */
#define _ac0093 0xff5d004a /* Reduce by   82 on LPAR                                */
#define _ac0094 0xff5b004a /* Reduce by   83 on LPAR                                */
#define _ac0095 0xff59004a /* Reduce by   84 on LPAR                                */
#define _ac0096 0xff57004a /* Reduce by   85 on LPAR                                */
#define _ac0097 0xff55004a /* Reduce by   86 on LPAR                                */
#define _ac0098 0xff53004a /* Reduce by   87 on LPAR                                */
#define _ac0099 0xff51004a /* Reduce by   88 on LPAR                                */
#define _ac0100 0xff4f004a /* Reduce by   89 on LPAR                                */
#define _ac0101 0xff4d004a /* Reduce by   90 on LPAR                                */
#define _ac0102 0xff4b004a /* Reduce by   91 on LPAR                                */
#define _ac0103 0xff49801e /* Reduce by   92 on tokens in termBitSet[3]             */
#define _ac0104 0xff478014 /* Reduce by   93 on tokens in termBitSet[2]             */
#define _ac0105 0xfffd0000 /* Reduce by    2 on EOI                                 */
#define _ac0106 0xfff58000 /* Reduce by    6 on tokens in termBitSet[0]             */
#define _ac0107 0xfff38000 /* Reduce by    7 on tokens in termBitSet[0]             */
#define _ac0108 0x010a0089 /* termArray    4, actionArray    4                      */
#define _ac0109 0x01240097 /* termArray    5, actionArray    5                      */
#define _ac0110 0xffdf8014 /* Reduce by   17 on tokens in termBitSet[2]             */
#define _ac0111 0x014280a2 /* Split(_as0002,_as0003)                                */
#define _ac0112 0x014680a2 /* Split(_as0004,_as0003)                                */
#define _ac0113 0x013200a0 /* termArray    7, actionArray    7                      */
#define _ac0114 0x013800a4 /* termArray    8, actionArray    8                      */
#define _ac0115 0x00cf0002 /* Shift  to  103 on NAME                                */
#define _ac0116 0x00cf0002 /* Shift  to  103 on NAME                                */
#define _ac0117 0xff638032 /* Reduce by   79 on tokens in termBitSet[5]             */
#define _ac0118 0x014880a2 /* Split(_as0005,_as0003)                                */
#define _ac0119 0x014a80a2 /* Split(_as0006,_as0003)                                */
#define _ac0120 0x014c80a7 /* Split(_as0007,_as0008)                                */
#define _ac0121 0x015080a7 /* Split(_as0009,_as0008)                                */
#define _ac0122 0x015280a7 /* Split(_as0010,_as0008)                                */
#define _ac0123 0xffe58014 /* Reduce by   14 on tokens in termBitSet[2]             */
#define _ac0124 0x015480ab /* Split(_as0011,_as0012)                                */
#define _ac0125 0x015880ab /* Split(_as0013,_as0012)                                */
#define _ac0126 0x015a80ab /* Split(_as0014,_as0012)                                */
#define _ac0127 0x015c80ab /* Split(_as0015,_as0012)                                */
#define _ac0128 0x015e80ab /* Split(_as0016,_as0012)                                */
#define _ac0129 0x016080ab /* Split(_as0017,_as0012)                                */
#define _ac0130 0xff678032 /* Reduce by   77 on tokens in termBitSet[5]             */
#define _ac0131 0x016280b2 /* Split(_as0018,_as0019)                                */
#define _ac0132 0x016680ab /* Split(_as0020,_as0012)                                */
#define _ac0133 0x015c00b8 /* termArray   10, actionArray   10                      */
#define _ac0134 0x016a00c0 /* termArray   11, actionArray   11                      */
#define _ac0135 0xffd98014 /* Reduce by   20 on tokens in termBitSet[2]             */
#define _ac0136 0xff618032 /* Reduce by   80 on tokens in termBitSet[5]             */
#define _ac0137 0x017800b8 /* termArray   10, actionArray   12                      */
#define _ac0138 0xffcb8014 /* Reduce by   27 on tokens in termBitSet[2]             */
#define _ac0139 0x018600c8 /* termArray   12, actionArray   13                      */
#define _ac0140 0x003b0007 /* Shift  to   29 on TO                                  */
#define _ac0141 0x002b0004 /* Shift  to   21 on ASSIGN                              */
#define _ac0142 0x003d0007 /* Shift  to   30 on TO                                  */
#define _ac0143 0x018c00cc /* termArray   13, actionArray   14                      */
#define _ac0144 0x016880ab /* Split(_as0021,_as0012)                                */
#define _ac0145 0xffdd8014 /* Reduce by   18 on tokens in termBitSet[2]             */
#define _ac0146 0x0041004a /* Shift  to   32 on LPAR                                */
#define _ac0147 0x019000b8 /* termArray   10, actionArray   15                      */
#define _ac0148 0x019e00c0 /* termArray   11, actionArray   16                      */
#define _ac0149 0x01ac00b8 /* termArray   10, actionArray   17                      */
#define _ac0150 0x01ba00b8 /* termArray   10, actionArray   18                      */
#define _ac0151 0x016a80ab /* Split(_as0022,_as0012)                                */
#define _ac0152 0xffdb8014 /* Reduce by   19 on tokens in termBitSet[2]             */
#define _ac0153 0x01c800b8 /* termArray   10, actionArray   19                      */
#define _ac0154 0x01d600b8 /* termArray   10, actionArray   20                      */
#define _ac0155 0x016c80ab /* Split(_as0023,_as0012)                                */
#define _ac0156 0x016e80ab /* Split(_as0024,_as0012)                                */
#define _ac0157 0xffc38014 /* Reduce by   31 on tokens in termBitSet[2]             */
#define _ac0158 0xffc98014 /* Reduce by   28 on tokens in termBitSet[2]             */
#define _as0000 0xffdf800a /* Reduce by   17 on tokens in termBitSet[1]   Used by state  [42]*/
#define _as0001 0x002b0004 /* Shift  to   21 on ASSIGN                    Used by state  [42]*/
#define _as0002 0xffd78028 /* Reduce by   21 on tokens in termBitSet[4]   Used by state  [111]*/
#define _as0003 0x012a009b /* termArray    6, actionArray    6            Used by states [111-112,118-119]*/
#define _as0004 0xffd58028 /* Reduce by   22 on tokens in termBitSet[4]   Used by state  [112]*/
#define _as0005 0xffef8028 /* Reduce by    9 on tokens in termBitSet[4]   Used by state  [118]*/
#define _as0006 0xffed8028 /* Reduce by   10 on tokens in termBitSet[4]   Used by state  [119]*/
#define _as0007 0xffeb803c /* Reduce by   11 on tokens in termBitSet[6]   Used by state  [120]*/
#define _as0008 0x00190018 /* Shift  to   12 on POW                       Used by states [120-122]*/
#define _as0009 0xffe9803c /* Reduce by   12 on tokens in termBitSet[6]   Used by state  [121]*/
#define _as0010 0xffe7803c /* Reduce by   13 on tokens in termBitSet[6]   Used by state  [122]*/
#define _as0011 0xff738032 /* Reduce by   71 on tokens in termBitSet[5]   Used by state  [124]*/
#define _as0012 0x015000b1 /* termArray    9, actionArray    9            Used by states [124-129,132,144,151,155-156]*/
#define _as0013 0xff718032 /* Reduce by   72 on tokens in termBitSet[5]   Used by state  [125]*/
#define _as0014 0xff6f8032 /* Reduce by   73 on tokens in termBitSet[5]   Used by state  [126]*/
#define _as0015 0xff6d8032 /* Reduce by   74 on tokens in termBitSet[5]   Used by state  [127]*/
#define _as0016 0xff6b8032 /* Reduce by   75 on tokens in termBitSet[5]   Used by state  [128]*/
#define _as0017 0xff698032 /* Reduce by   76 on tokens in termBitSet[5]   Used by state  [129]*/
#define _as0018 0xff658046 /* Reduce by   78 on tokens in termBitSet[7]   Used by state  [131]*/
#define _as0019 0x0027000b /* Shift  to   19 on AND                       Used by state  [131]*/
#define _as0020 0xfff18050 /* Reduce by    8 on tokens in termBitSet[8]   Used by state  [132]*/
#define _as0021 0xffbf805a /* Reduce by   33 on tokens in termBitSet[9]   Used by state  [144]*/
#define _as0022 0xffc1805a /* Reduce by   32 on tokens in termBitSet[9]   Used by state  [151]*/
#define _as0023 0xffc78064 /* Reduce by   29 on tokens in termBitSet[10]  Used by state  [155]*/
#define _as0024 0xffc58064 /* Reduce by   30 on tokens in termBitSet[10]  Used by state  [156]*/

static const unsigned int actionCodeArray[184] = {
   _ac0000,_ac0001,_ac0002,_ac0003,_ac0004,_ac0005,_ac0006,_ac0007,_ac0008,_ac0009
  ,_ac0010,_ac0011,_ac0012,_ac0013,_ac0014,_ac0015,_ac0016,_ac0017,_ac0018,_ac0019
  ,_ac0020,_ac0021,_ac0022,_ac0023,_ac0024,_ac0025,_ac0026,_ac0027,_ac0028,_ac0029
  ,_ac0030,_ac0031,_ac0032,_ac0033,_ac0034,_ac0035,_ac0036,_ac0037,_ac0038,_ac0039
  ,_ac0040,_ac0041,_ac0042,_ac0043,_ac0044,_ac0045,_ac0046,_ac0047,_ac0048,_ac0049
  ,_ac0050,_ac0051,_ac0052,_ac0053,_ac0054,_ac0055,_ac0056,_ac0057,_ac0058,_ac0059
  ,_ac0060,_ac0061,_ac0062,_ac0063,_ac0064,_ac0065,_ac0066,_ac0067,_ac0068,_ac0069
  ,_ac0070,_ac0071,_ac0072,_ac0073,_ac0074,_ac0075,_ac0076,_ac0077,_ac0078,_ac0079
  ,_ac0080,_ac0081,_ac0082,_ac0083,_ac0084,_ac0085,_ac0086,_ac0087,_ac0088,_ac0089
  ,_ac0090,_ac0091,_ac0092,_ac0093,_ac0094,_ac0095,_ac0096,_ac0097,_ac0098,_ac0099
  ,_ac0100,_ac0101,_ac0102,_ac0103,_ac0104,_ac0105,_ac0106,_ac0107,_ac0108,_ac0109
  ,_ac0110,_ac0111,_ac0112,_ac0113,_ac0114,_ac0115,_ac0116,_ac0117,_ac0118,_ac0119
  ,_ac0120,_ac0121,_ac0122,_ac0123,_ac0124,_ac0125,_ac0126,_ac0127,_ac0128,_ac0129
  ,_ac0130,_ac0131,_ac0132,_ac0133,_ac0134,_ac0135,_ac0136,_ac0137,_ac0138,_ac0139
  ,_ac0140,_ac0141,_ac0142,_ac0143,_ac0144,_ac0145,_ac0146,_ac0147,_ac0148,_ac0149
  ,_ac0150,_ac0151,_ac0152,_ac0153,_ac0154,_ac0155,_ac0156,_ac0157,_ac0158
  ,_as0000,_as0001,_as0002,_as0003,_as0004,_as0005,_as0006,_as0007,_as0008,_as0009
  ,_as0010,_as0011,_as0012,_as0013,_as0014,_as0015,_as0016,_as0017,_as0018,_as0019
  ,_as0020,_as0021,_as0022,_as0023,_as0024
}; // Size of table:736(x86)/736(x64) bytes.

static const unsigned char termArrayTable[207] = {
    59,   1,   2,   3,   8,   9,  12,  19,  20,  25,  26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36   /*   0 Used by states [0-2,5-6,19-20,25]                 */
      ,  37,  38,  39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,  52,  53,  54,  55,  56
      ,  57,  58,  59,  60,  61,  62,  63,  64,  65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  76
  , 58,   1,   2,   3,   8,   9,  19,  20,  25,  26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,  37   /*   1 Used by states [3-4,7-18,21-24,26-35]             */
      ,  38,  39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,  52,  53,  54,  55,  56,  57
      ,  58,  59,  60,  61,  62,  63,  64,  65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  76
  , 13,   0,  13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24                                      /*   2 Used by state  [38]                               */
  ,  3,   0,  10,  11                                                                                        /*   3 Used by state  [39]                               */
  , 13,  13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  75                                      /*   4 Used by state  [108]                              */
  ,  3,  10,  11,  75                                                                                        /*   5 Used by state  [109]                              */
  ,  4,  21,  22,  23,  24                                                                                   /*   6 Used by states [111-112,118-119]                  */
  ,  3,  10,  11,  77                                                                                        /*   7 Used by state  [113]                              */
  , 12,  13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24                                           /*   8 Used by state  [114]                              */
  ,  6,  19,  20,  21,  22,  23,  24                                                                         /*   9 Used by states [124-129,132,144,151,155-156]      */
  ,  7,  19,  20,  21,  22,  23,  24,  75                                                                    /*  10 Used by states [133,137,147,149-150,153-154]      */
  ,  7,   6,  19,  20,  21,  22,  23,  24                                                                    /*  11 Used by states [134,148]                          */
  ,  3,   6,  10,  11                                                                                        /*  12 Used by state  [139]                              */
  ,  2,   6,  77                                                                                             /*  13 Used by state  [143]                              */
}; // Size of table:208(x86)/208(x64) bytes.

static const short actionArrayTable[242] = {
    104, 103,  51,  52,  53,   6,   4,   3,  56,  57,  58,  59,  60,  61,  62,  63, 101,  64,  66,  67       /*   0 Used by states [0-2,5-6,19-20,25]                 */
  ,  68,  69,  84,  86,  87,  90,  91,  55,  65,  70,  71,  72,  73,  74,  75, 102,  76,  77,  78,  79
  ,  80,  81,  82,  83,  99,  98, 100,  96,  85,  88,  89,  97,  92,  93,  94,  54,  95,   2,   5
  , 104, 103,  51,  52,  53,   4,   3,  56,  57,  58,  59,  60,  61,  62,  63, 101,  64,  66,  67,  68       /*   1 Used by states [3-4,7-18,21-24,26-35]             */
  ,  69,  84,  86,  87,  90,  91,  55,  65,  70,  71,  72,  73,  74,  75, 102,  76,  77,  78,  79,  80
  ,  81,  82,  83,  99,  98, 100,  96,  85,  88,  89,  97,  92,  93,  94,  54,  95,  24,   5
  ,  -3,  13,  17,  18,  15,  16,  14,   7,   8,   9,  10,  11,  12                                          /*   2 Used by state  [38]                               */
  ,  -4,  20,  19                                                                                            /*   3 Used by state  [39]                               */
  ,  13,  17,  18,  15,  16,  14,   7,   8,   9,  10,  11,  12, 135                                          /*   4 Used by state  [108]                              */
  ,  20,  19, 136                                                                                            /*   5 Used by state  [109]                              */
  ,   9,  10,  11,  12                                                                                       /*   6 Used by states [111-112,118-119]                  */
  ,  20,  19, 138                                                                                            /*   7 Used by state  [113]                              */
  ,  13,  17,  18,  15,  16,  14,   7,   8,   9,  10,  11,  12                                               /*   8 Used by state  [114]                              */
  ,   7,   8,   9,  10,  11,  12                                                                             /*   9 Used by states [124-129,132,144,151,155-156]      */
  ,   7,   8,   9,  10,  11,  12, 145                                                                        /*  10 Used by state  [133]                              */
  ,  27,   7,   8,   9,  10,  11,  12                                                                        /*  11 Used by state  [134]                              */
  ,   7,   8,   9,  10,  11,  12, 135                                                                        /*  12 Used by state  [137]                              */
  ,  28,  20,  19                                                                                            /*  13 Used by state  [139]                              */
  ,  31, 146                                                                                                 /*  14 Used by state  [143]                              */
  ,   7,   8,   9,  10,  11,  12, 152                                                                        /*  15 Used by state  [147]                              */
  ,  33,   7,   8,   9,  10,  11,  12                                                                        /*  16 Used by state  [148]                              */
  ,   7,   8,   9,  10,  11,  12,  34                                                                        /*  17 Used by state  [149]                              */
  ,   7,   8,   9,  10,  11,  12,  35                                                                        /*  18 Used by state  [150]                              */
  ,   7,   8,   9,  10,  11,  12, 157                                                                        /*  19 Used by state  [153]                              */
  ,   7,   8,   9,  10,  11,  12, 158                                                                        /*  20 Used by state  [154]                              */
}; // Size of table:484(x86)/488(x64) bytes.

static const unsigned char termBitSetTable[110] = {
   0x0e,0x13,0x18,0xfe,0xff,0xff,0xff,0xff,0xff,0x17 /*   0  59 tokens Used by states [40,106-107]            */
  ,0x01,0xe0,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0x00 /*   1  13 tokens Used by state  [42]                    */
  ,0xe1,0xec,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0x28 /*   2  20 tokens Used by states [43-44,47-50,104,110,123,135,138,145,152,157-158]*/
  ,0xf1,0xec,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0x28 /*   3  21 tokens Used by state  [103]                   */
  ,0xe1,0xec,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0x28 /*   4  16 tokens Used by states [111-112,118-119]       */
  ,0x41,0x0c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x28 /*   5   6 tokens Used by states [117,124-130,136]       */
  ,0xe1,0xec,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x28 /*   6  19 tokens Used by states [120-122]               */
  ,0x41,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x28 /*   7   5 tokens Used by state  [131]                   */
  ,0xa0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 /*   8   2 tokens Used by state  [132]                   */
  ,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20 /*   9   2 tokens Used by states [144,151]               */
  ,0xe1,0xec,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x28 /*  10  14 tokens Used by states [155-156]               */
}; // Size of table:112(x86)/112(x64) bytes.

#define _sc0000 0x00000000 /*                                                       */
#define _sc0001 0x00497fff /* function        Goto  36                              */
#define _sc0002 0x00000000 /* final_expr      stateArray    0, newStateArray    0   */
#define _sc0003 0x00037fff /* assignStmtList  Goto   1                              */
#define _sc0004 0x00248015 /* expr            Split(_ss0000,_ss0003)                */
#define _sc0005 0x002c8017 /* boolExpr        Split(_ss0004,_ss0005)                */
#define _sc0006 0x004a0000 /* assignStmt      stateArray    0, newStateArray    3   */
#define _sc0007 0x00308019 /* assign          Split(_ss0006,_ss0007)                */
#define _sc0008 0x0034801d /* name            Split(_ss0008,_ss0011)                */
#define _sc0009 0x00577fff /* unary           Goto  43                              */
#define _sc0010 0x00597fff /* number          Goto  44                              */
#define _sc0011 0x005b7fff /* function1       Goto  45                              */
#define _sc0012 0x005d7fff /* function2       Goto  46                              */
#define _sc0013 0x005f7fff /* conditionalExpr Goto  47                              */
#define _sc0014 0x00617fff /* sumExpr         Goto  48                              */
#define _sc0015 0x00637fff /* productExpr     Goto  49                              */
#define _sc0016 0x00657fff /* polyExpr        Goto  50                              */
#define _sc0017 0x011f7fff /* exprList        Goto 143                              */
#define _ss0000 0x00e58000 /* Goto 114 on states in stateBitSet[0]                 Used by NTindex   [4]*/
#define _ss0001 0x004d8005 /* Goto 38 on states in stateBitSet[1]                  Used by NTindex   [4]*/
#define _ss0002 0x00040003 /* stateArray    1, newStateArray    1                  Used by NTindex   [4]*/
#define _ss0003 0x00268014 /* Split(_ss0001,_ss0002)                               Used by NTindex   [4]*/
#define _ss0004 0x004f8005 /* Goto 39 on states in stateBitSet[1]                  Used by NTindex   [5]*/
#define _ss0005 0x003e0021 /* stateArray    2, newStateArray    2                  Used by NTindex   [5]*/
#define _ss0006 0x00538005 /* Goto 41 on states in stateBitSet[1]                  Used by NTindex   [7]*/
#define _ss0007 0x004e0028 /* stateArray    3, newStateArray    4                  Used by NTindex   [7]*/
#define _ss0008 0x00dd800a /* Goto 110 on states in stateBitSet[2]                 Used by NTindex   [8]*/
#define _ss0009 0x00558005 /* Goto 42 on states in stateBitSet[1]                  Used by NTindex   [8]*/
#define _ss0010 0x011b7fff /* Goto 141                                             Used by NTindex   [8]*/
#define _ss0011 0x0036801c /* Split(_ss0009,_ss0010)                               Used by NTindex   [8]*/

static const unsigned int successorCodeArray[30] = {
   _sc0000,_sc0001,_sc0002,_sc0003,_sc0004,_sc0005,_sc0006,_sc0007,_sc0008,_sc0009
  ,_sc0010,_sc0011,_sc0012,_sc0013,_sc0014,_sc0015,_sc0016,_sc0017
  ,_ss0000,_ss0001,_ss0002,_ss0003,_ss0004,_ss0005,_ss0006,_ss0007,_ss0008,_ss0009
  ,_ss0010,_ss0011
}; // Size of table:120(x86)/120(x64) bytes.

static const unsigned char stateArrayTable[43] = {
     2,   0,   1                                                                                             /*   0 Used by NTindices [2,6]                           */
  , 29,   2,   3,   4,   7,   8,   9,  10,  11,  12,  13,  14,  15,  16,  17,  18,  21,  22,  23,  24,  26   /*   1 Used by NTindex   [4]                             */
      ,  27,  28,  29,  30,  31,  32,  33,  34,  35
  ,  6,   2,   5,   6,  19,  20,  25                                                                         /*   2 Used by NTindex   [5]                             */
  ,  2, 115, 116                                                                                             /*   3 Used by NTindex   [7]                             */
}; // Size of table:44(x86)/48(x64) bytes.

static const unsigned char newStateArrayTable[41] = {
     37, 105                                                                                                 /*   0 Used by NTindex   [2]                             */
  , 108, 111, 112, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 133, 134, 137, 144       /*   1 Used by NTindex   [4]                             */
  , 147, 148, 149, 150, 151, 153, 154, 155, 156
  , 109, 113, 117, 130, 131, 139                                                                             /*   2 Used by NTindex   [5]                             */
  ,  40, 106                                                                                                 /*   3 Used by NTindex   [6]                             */
  , 140, 142                                                                                                 /*   4 Used by NTindex   [7]                             */
}; // Size of table:44(x86)/48(x64) bytes.

static const unsigned char stateBitSetTable[15] = {
   0x60,0x00,0x18,0x02,0x00 /*   0   5 states Used by NTindex   [4]                  */
  ,0x03,0x00,0x00,0x00,0x00 /*   1   2 states Used by NTindices [4-5,7-8]            */
  ,0xfc,0xff,0xff,0xff,0x0f /*   2  34 states Used by NTindex   [8]                  */
}; // Size of table:16(x86)/16(x64) bytes.

/************************************************************************************\
* The productionLength[] is indexed by production number and holds the number of     *
* symbols on the right side of each production.                                      *
\************************************************************************************/
static const unsigned char prodLengthArray[94] = {
  /*   0 */    1,  1,  2,  1,  1,  1,  2,  2,  3,  3
  /*  10 */ ,  3,  3,  3,  3,  3,  1,  1,  1,  4,  6
  /*  20 */ ,  3,  2,  2,  1,  1,  1,  1,  3,  8,  7
  /*  30 */ ,  7,  7,  3,  1,  1,  1,  1,  1,  1,  1
  /*  40 */ ,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1
  /*  50 */ ,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1
  /*  60 */ ,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1
  /*  70 */ ,  1,  3,  3,  3,  3,  3,  3,  3,  3,  2
  /*  80 */ ,  3,  1,  1,  1,  1,  1,  1,  1,  1,  1
  /*  90 */ ,  1,  1,  1,  1
}; // Size of table:96(x86)/96(x64) bytes.

/************************************************************************************\
* leftSideTable[] is indexed by production number.                                   *
* leftSideTable[p] = A', A' = (A - terminalCount)                                    *
*                        where A is the left side of production p.                   *
* A' = 0..nonterminalCount-1.                                                        *
* p  = 0..productionCount-1                                                          *
\************************************************************************************/
static const unsigned char leftSideArray[94] = {
  /*   0 */    0,  1,  1,  2,  2,  3,  3,  6,  7,  4
  /*  10 */ ,  4,  4,  4,  4,  4,  4,  9,  9,  9,  9
  /*  20 */ ,  9,  9,  9,  9,  9,  9,  9,  9, 13, 14
  /*  30 */ , 15, 16, 17, 17, 11, 11, 11, 11, 11, 11
  /*  40 */ , 11, 11, 11, 11, 11, 11, 11, 11, 11, 11
  /*  50 */ , 11, 11, 11, 11, 11, 11, 11, 11, 11, 11
  /*  60 */ , 11, 11, 11, 11, 11, 11, 11, 11, 11, 11
  /*  70 */ , 11,  5,  5,  5,  5,  5,  5,  5,  5,  5
  /*  80 */ ,  5, 12, 12, 12, 12, 12, 12, 12, 12, 12
  /*  90 */ , 12, 12,  8, 10
}; // Size of table:96(x86)/96(x64) bytes.

/************************************************************************************\
* rightSideTable[] holds a compressed form of the rightsides of all                  *
* productions in the grammar. Only used for debugging.                               *
\************************************************************************************/
static const unsigned char rightSideTable[171] = {
  /*   0 */   85
  /*   1 */ , 86
  /*   2 */ , 87, 86
  /*   3 */ , 88
  /*   4 */ , 89
  /*   5 */ , 90
  /*   6 */ , 87, 90
  /*   7 */ , 91,  5
  /*   8 */ , 92,  4, 88
  /*   9 */ , 88, 19, 88
  /*  10 */ , 88, 20, 88
  /*  11 */ , 88, 21, 88
  /*  12 */ , 88, 22, 88
  /*  13 */ , 88, 23, 88
  /*  14 */ , 88, 24, 88
  /*  15 */ , 93
  /*  16 */ , 94
  /*  17 */ , 92
  /*  18 */ , 95, 74, 88, 75
  /*  19 */ , 96, 74, 88,  6, 88, 75
  /*  20 */ , 74, 88, 75
  /*  21 */ , 20, 88
  /*  22 */ , 19, 88
  /*  23 */ , 97
  /*  24 */ , 98
  /*  25 */ , 99
  /*  26 */ ,100
  /*  27 */ , 76, 89, 77
  /*  28 */ ,  3, 74, 89,  6, 88,  6, 88, 75
  /*  29 */ ,  8, 74, 91,  7, 88, 75, 88
  /*  30 */ ,  9, 74, 91,  7, 88, 75, 88
  /*  31 */ , 72, 76,101, 77, 74, 88, 75
  /*  32 */ ,101,  6, 88
  /*  33 */ , 88
  /*  34 */ , 44
  /*  35 */ , 25
  /*  36 */ , 26
  /*  37 */ , 27
  /*  38 */ , 28
  /*  39 */ , 29
  /*  40 */ , 30
  /*  41 */ , 31
  /*  42 */ , 32
  /*  43 */ , 34
  /*  44 */ , 45
  /*  45 */ , 35
  /*  46 */ , 36
  /*  47 */ , 37
  /*  48 */ , 38
  /*  49 */ , 46
  /*  50 */ , 47
  /*  51 */ , 48
  /*  52 */ , 49
  /*  53 */ , 50
  /*  54 */ , 51
  /*  55 */ , 53
  /*  56 */ , 54
  /*  57 */ , 55
  /*  58 */ , 56
  /*  59 */ , 57
  /*  60 */ , 58
  /*  61 */ , 59
  /*  62 */ , 60
  /*  63 */ , 39
  /*  64 */ , 65
  /*  65 */ , 40
  /*  66 */ , 41
  /*  67 */ , 66
  /*  68 */ , 67
  /*  69 */ , 42
  /*  70 */ , 43
  /*  71 */ , 88, 13, 88
  /*  72 */ , 88, 18, 88
  /*  73 */ , 88, 16, 88
  /*  74 */ , 88, 17, 88
  /*  75 */ , 88, 14, 88
  /*  76 */ , 88, 15, 88
  /*  77 */ , 89, 11, 89
  /*  78 */ , 89, 10, 89
  /*  79 */ , 12, 89
  /*  80 */ , 74, 89, 75
  /*  81 */ , 69
  /*  82 */ , 70
  /*  83 */ , 71
  /*  84 */ , 73
  /*  85 */ , 64
  /*  86 */ , 68
  /*  87 */ , 62
  /*  88 */ , 61
  /*  89 */ , 63
  /*  90 */ , 33
  /*  91 */ , 52
  /*  92 */ ,  2
  /*  93 */ ,  1
}; // Size of table:172(x86)/176(x64) bytes.

/************************************************************************************\
* symbolNames is a space separated string with the names of all symbols used in      *
* grammar, terminals and nonTerminals. Only used for debugging.                      *
\************************************************************************************/
static const char *symbolNames = {
  "EOI"                                               /* T     0               */
  " NUMBER"                                           /* T     1               */
  " NAME"                                             /* T     2               */
  " IIF"                                              /* T     3               */
  " ASSIGN"                                           /* T     4               */
  " SEMI"                                             /* T     5               */
  " COMMA"                                            /* T     6               */
  " TO"                                               /* T     7               */
  " INDEXEDSUM"                                       /* T     8               */
  " INDEXEDPRODUCT"                                   /* T     9               */
  " OR"                                               /* T    10               */
  " AND"                                              /* T    11               */
  " NOT"                                              /* T    12               */
  " EQ"                                               /* T    13               */
  " GE"                                               /* T    14               */
  " GT"                                               /* T    15               */
  " LE"                                               /* T    16               */
  " LT"                                               /* T    17               */
  " NE"                                               /* T    18               */
  " PLUS"                                             /* T    19               */
  " MINUS"                                            /* T    20               */
  " PROD"                                             /* T    21               */
  " QUOT"                                             /* T    22               */
  " MOD"                                              /* T    23               */
  " POW"                                              /* T    24               */
  " ACOS"                                             /* T    25               */
  " ACOSH"                                            /* T    26               */
  " ACOT"                                             /* T    27               */
  " ACSC"                                             /* T    28               */
  " ASEC"                                             /* T    29               */
  " ASIN"                                             /* T    30               */
  " ASINH"                                            /* T    31               */
  " ATAN"                                             /* T    32               */
  " ATAN2"                                            /* T    33               */
  " ATANH"                                            /* T    34               */
  " COS"                                              /* T    35               */
  " COSH"                                             /* T    36               */
  " COT"                                              /* T    37               */
  " CSC"                                              /* T    38               */
  " SEC"                                              /* T    39               */
  " SIN"                                              /* T    40               */
  " SINH"                                             /* T    41               */
  " TAN"                                              /* T    42               */
  " TANH"                                             /* T    43               */
  " ABS"                                              /* T    44               */
  " CEIL"                                             /* T    45               */
  " ERF"                                              /* T    46               */
  " EXP"                                              /* T    47               */
  " EXP10"                                            /* T    48               */
  " EXP2"                                             /* T    49               */
  " FAC"                                              /* T    50               */
  " FLOOR"                                            /* T    51               */
  " HYPOT"                                            /* T    52               */
  " GAMMA"                                            /* T    53               */
  " GAUSS"                                            /* T    54               */
  " INVERF"                                           /* T    55               */
  " LN"                                               /* T    56               */
  " LOG10"                                            /* T    57               */
  " LOG2"                                             /* T    58               */
  " NORM"                                             /* T    59               */
  " PROBIT"                                           /* T    60               */
  " CHI2DIST"                                         /* T    61               */
  " CHI2DENS"                                         /* T    62               */
  " LINCGAMMA"                                        /* T    63               */
  " ROOT"                                             /* T    64               */
  " SIGN"                                             /* T    65               */
  " SQR"                                              /* T    66               */
  " SQRT"                                             /* T    67               */
  " BINOMIAL"                                         /* T    68               */
  " MAX"                                              /* T    69               */
  " MIN"                                              /* T    70               */
  " NORMRAND"                                         /* T    71               */
  " POLY"                                             /* T    72               */
  " RAND"                                             /* T    73               */
  " LPAR"                                             /* T    74               */
  " RPAR"                                             /* T    75               */
  " LB"                                               /* T    76               */
  " RB"                                               /* T    77               */
  " BOOLCONST"                                        /* T    78               */
  " STMTLIST"                                         /* T    79               */
  " SUM"                                              /* T    80               */
  " ADDENT"                                           /* T    81               */
  " UNARYMINUS"                                       /* T    82               */
  " PRODUCT"                                          /* T    83               */
  " start"                                            /* NT   84 NTindex=0     */
  " function"                                         /* NT   85 NTindex=1     */
  " final_expr"                                       /* NT   86 NTindex=2     */
  " assignStmtList"                                   /* NT   87 NTindex=3     */
  " expr"                                             /* NT   88 NTindex=4     */
  " boolExpr"                                         /* NT   89 NTindex=5     */
  " assignStmt"                                       /* NT   90 NTindex=6     */
  " assign"                                           /* NT   91 NTindex=7     */
  " name"                                             /* NT   92 NTindex=8     */
  " unary"                                            /* NT   93 NTindex=9     */
  " number"                                           /* NT   94 NTindex=10    */
  " function1"                                        /* NT   95 NTindex=11    */
  " function2"                                        /* NT   96 NTindex=12    */
  " conditionalExpr"                                  /* NT   97 NTindex=13    */
  " sumExpr"                                          /* NT   98 NTindex=14    */
  " productExpr"                                      /* NT   99 NTindex=15    */
  " polyExpr"                                         /* NT  100 NTindex=16    */
  " exprList"                                         /* NT  101 NTindex=17    */
}; // Size of string:620(x86)/624(x64) bytes

static const ParserTablesTemplateTransSucc<102,84,94,159,78,36
                                          ,unsigned char
                                          ,unsigned char
                                          ,unsigned char
                                          ,short
                                          ,unsigned char> ExpressionTables_s(prodLengthArray   , leftSideArray
                                                                            ,rightSideTable    , symbolNames
                                                                            ,2820, 2904
                                                                            ,actionCodeArray   , termArrayTable , actionArrayTable  , termBitSetTable
                                                                            ,successorCodeArray, stateArrayTable, newStateArrayTable, stateBitSetTable
                                                                            );

const AbstractParserTables *ExpressionParser::ExpressionTables = &ExpressionTables_s;
// Size of ExpressionTables_s: 68(x86)/128(x64) bytes. Size of ExpressionTables:4(x86)/8(x64) bytes

// Total size of table data:2.820(x86)/2.904(x64) bytes.
}; // namespace Expr
