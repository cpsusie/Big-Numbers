/* DO NOT EDIT THIS FILE - it is machine generated */
#line 59 "C:\\Mytools2015\\Lib\\Src\\Expression\\Expression.y"
#include "pch.h"
#include <Math/Real.h>
#include <Math/Expression/ExpressionParser.h>

#line 36 "C:\\mytools2015\\parsergen\\lib\\parsergencpp.par"
#include <ParserTablesTemplate.h>

namespace Expr {


using namespace LRParsing;

#define _tc0000 0x00000000 /*                                                                      */
#define _tc0001 0x01198000 /* NUMBER         Shift to  140 on states in shiftStateBitSet[0]        */
#define _tc0002 0x0117800a /* NAME           Shift to  139 on states in shiftStateBitSet[1]        */
#define _tc0003 0x00af8000 /* IIF            Shift to   87 on states in shiftStateBitSet[0]        */
#define _tc0004 0x00278014 /* ASSIGN         Shift to   19 on states in shiftStateBitSet[2]        */
#define _tc0005 0x011f004e /* SEMI           Shift to  143 from   78                               */
#define _tc0006 0x00000000 /* COMMA          shiftFromStateArray    0, shiftToStateArrayTable    0 */
#define _tc0007 0x00080005 /* TO             shiftFromStateArray    1, shiftToStateArrayTable    1 */
#define _tc0008 0x00b18000 /* INDEXEDSUM     Shift to   88 on states in shiftStateBitSet[0]        */
#define _tc0009 0x00b38000 /* INDEXEDPRODUCT Shift to   89 on states in shiftStateBitSet[0]        */
#define _tc0010 0x0025801e /* OR             Shift to   18 on states in shiftStateBitSet[3]        */
#define _tc0011 0x00238028 /* AND            Shift to   17 on states in shiftStateBitSet[4]        */
#define _tc0012 0x00098032 /* NOT            Shift to    4 on states in shiftStateBitSet[5]        */
#define _tc0013 0x0017803c /* EQ             Shift to   11 on states in shiftStateBitSet[6]        */
#define _tc0014 0x001f803c /* GE             Shift to   15 on states in shiftStateBitSet[6]        */
#define _tc0015 0x0021803c /* GT             Shift to   16 on states in shiftStateBitSet[6]        */
#define _tc0016 0x001b803c /* LE             Shift to   13 on states in shiftStateBitSet[6]        */
#define _tc0017 0x001d803c /* LT             Shift to   14 on states in shiftStateBitSet[6]        */
#define _tc0018 0x0019803c /* NE             Shift to   12 on states in shiftStateBitSet[6]        */
#define _tc0019 0x00a88055 /* PLUS           Split(_ts0000,_ts0001)                                */
#define _tc0020 0x00ac8057 /* MINUS          Split(_ts0002,_ts0003)                                */
#define _tc0021 0x000f8050 /* PROD           Shift to    7 on states in shiftStateBitSet[8]        */
#define _tc0022 0x00118050 /* QUOT           Shift to    8 on states in shiftStateBitSet[8]        */
#define _tc0023 0x00138050 /* MOD            Shift to    9 on states in shiftStateBitSet[8]        */
#define _tc0024 0x0015805a /* POW            Shift to   10 on states in shiftStateBitSet[9]        */
#define _tc0025 0x00b98000 /* ACOS           Shift to   92 on states in shiftStateBitSet[0]        */
#define _tc0026 0x00bb8000 /* ACOSH          Shift to   93 on states in shiftStateBitSet[0]        */
#define _tc0027 0x00bd8000 /* ACOT           Shift to   94 on states in shiftStateBitSet[0]        */
#define _tc0028 0x00bf8000 /* ACSC           Shift to   95 on states in shiftStateBitSet[0]        */
#define _tc0029 0x00c18000 /* ASEC           Shift to   96 on states in shiftStateBitSet[0]        */
#define _tc0030 0x00c38000 /* ASIN           Shift to   97 on states in shiftStateBitSet[0]        */
#define _tc0031 0x00c58000 /* ASINH          Shift to   98 on states in shiftStateBitSet[0]        */
#define _tc0032 0x00c78000 /* ATAN           Shift to   99 on states in shiftStateBitSet[0]        */
#define _tc0033 0x01138000 /* ATAN2          Shift to  137 on states in shiftStateBitSet[0]        */
#define _tc0034 0x00c98000 /* ATANH          Shift to  100 on states in shiftStateBitSet[0]        */
#define _tc0035 0x00cd8000 /* COS            Shift to  102 on states in shiftStateBitSet[0]        */
#define _tc0036 0x00cf8000 /* COSH           Shift to  103 on states in shiftStateBitSet[0]        */
#define _tc0037 0x00d18000 /* COT            Shift to  104 on states in shiftStateBitSet[0]        */
#define _tc0038 0x00d38000 /* CSC            Shift to  105 on states in shiftStateBitSet[0]        */
#define _tc0039 0x00f18000 /* SEC            Shift to  120 on states in shiftStateBitSet[0]        */
#define _tc0040 0x00f58000 /* SIN            Shift to  122 on states in shiftStateBitSet[0]        */
#define _tc0041 0x00f78000 /* SINH           Shift to  123 on states in shiftStateBitSet[0]        */
#define _tc0042 0x00fd8000 /* TAN            Shift to  126 on states in shiftStateBitSet[0]        */
#define _tc0043 0x00ff8000 /* TANH           Shift to  127 on states in shiftStateBitSet[0]        */
#define _tc0044 0x00b78000 /* ABS            Shift to   91 on states in shiftStateBitSet[0]        */
#define _tc0045 0x00cb8000 /* CEIL           Shift to  101 on states in shiftStateBitSet[0]        */
#define _tc0046 0x00d58000 /* ERF            Shift to  106 on states in shiftStateBitSet[0]        */
#define _tc0047 0x00d78000 /* EXP            Shift to  107 on states in shiftStateBitSet[0]        */
#define _tc0048 0x00d98000 /* EXP10          Shift to  108 on states in shiftStateBitSet[0]        */
#define _tc0049 0x00db8000 /* EXP2           Shift to  109 on states in shiftStateBitSet[0]        */
#define _tc0050 0x00dd8000 /* FAC            Shift to  110 on states in shiftStateBitSet[0]        */
#define _tc0051 0x00df8000 /* FLOOR          Shift to  111 on states in shiftStateBitSet[0]        */
#define _tc0052 0x01158000 /* HYPOT          Shift to  138 on states in shiftStateBitSet[0]        */
#define _tc0053 0x00e18000 /* GAMMA          Shift to  112 on states in shiftStateBitSet[0]        */
#define _tc0054 0x00e38000 /* GAUSS          Shift to  113 on states in shiftStateBitSet[0]        */
#define _tc0055 0x00e58000 /* INVERF         Shift to  114 on states in shiftStateBitSet[0]        */
#define _tc0056 0x00e78000 /* LN             Shift to  115 on states in shiftStateBitSet[0]        */
#define _tc0057 0x00e98000 /* LOG10          Shift to  116 on states in shiftStateBitSet[0]        */
#define _tc0058 0x00eb8000 /* LOG2           Shift to  117 on states in shiftStateBitSet[0]        */
#define _tc0059 0x00ed8000 /* NORM           Shift to  118 on states in shiftStateBitSet[0]        */
#define _tc0060 0x00ef8000 /* PROBIT         Shift to  119 on states in shiftStateBitSet[0]        */
#define _tc0061 0x010f8000 /* CHI2DIST       Shift to  135 on states in shiftStateBitSet[0]        */
#define _tc0062 0x010d8000 /* CHI2DENS       Shift to  134 on states in shiftStateBitSet[0]        */
#define _tc0063 0x01118000 /* LINCGAMMA      Shift to  136 on states in shiftStateBitSet[0]        */
#define _tc0064 0x01098000 /* ROOT           Shift to  132 on states in shiftStateBitSet[0]        */
#define _tc0065 0x00f38000 /* SIGN           Shift to  121 on states in shiftStateBitSet[0]        */
#define _tc0066 0x00f98000 /* SQR            Shift to  124 on states in shiftStateBitSet[0]        */
#define _tc0067 0x00fb8000 /* SQRT           Shift to  125 on states in shiftStateBitSet[0]        */
#define _tc0068 0x010b8000 /* BINOMIAL       Shift to  133 on states in shiftStateBitSet[0]        */
#define _tc0069 0x01018000 /* MAX            Shift to  128 on states in shiftStateBitSet[0]        */
#define _tc0070 0x01038000 /* MIN            Shift to  129 on states in shiftStateBitSet[0]        */
#define _tc0071 0x01058000 /* NORMRAND       Shift to  130 on states in shiftStateBitSet[0]        */
#define _tc0072 0x00b58000 /* POLY           Shift to   90 on states in shiftStateBitSet[0]        */
#define _tc0073 0x01078000 /* RAND           Shift to  131 on states in shiftStateBitSet[0]        */
#define _tc0074 0x00b0805b /* LPAR           Split(_ts0004,_ts0007)                                */
#define _tc0075 0x00b8805d /* RPAR           Split(_ts0008,_ts0009)                                */
#define _tc0076 0x00bc805f /* LB             Split(_ts0010,_ts0011)                                */
#define _tc0077 0x00260017 /* RB             shiftFromStateArray    4, shiftToStateArrayTable    4 */
#define _tc0078 0x00000000 /*                                                                      */
#define _tc0079 0x00000000 /*                                                                      */
#define _tc0080 0x00000000 /*                                                                      */
#define _tc0081 0x00000000 /*                                                                      */
#define _tc0082 0x00000000 /*                                                                      */
#define _tc0083 0x00000000 /*                                                                      */
#define _ts0000 0x00058000 /* Shift to    2 on states in shiftStateBitSet[0]                        Used by 1 terminal  [PLUS]*/
#define _ts0001 0x000b8046 /* Shift to    5 on states in shiftStateBitSet[7]                        Used by 1 terminal  [PLUS]*/
#define _ts0002 0x00038000 /* Shift to    1 on states in shiftStateBitSet[0]                        Used by 1 terminal  [MINUS]*/
#define _ts0003 0x000d8046 /* Shift to    6 on states in shiftStateBitSet[7]                        Used by 1 terminal  [MINUS]*/
#define _ts0004 0x002d8064 /* Shift to   22 on states in shiftStateBitSet[10]                       Used by 1 terminal  [LPAR]*/
#define _ts0005 0x00018032 /* Shift to    0 on states in shiftStateBitSet[5]                        Used by 1 terminal  [LPAR]*/
#define _ts0006 0x000c0008 /* shiftFromStateArray    2, shiftToStateArrayTable    2                 Used by 1 terminal  [LPAR]*/
#define _ts0007 0x00b2805a /* Split(_ts0005,_ts0006)                                                Used by 1 terminal  [LPAR]*/
#define _ts0008 0x0129806e /* Shift to  148 on states in shiftStateBitSet[11]                       Used by 1 terminal  [RPAR]*/
#define _ts0009 0x0018000f /* shiftFromStateArray    3, shiftToStateArrayTable    3                 Used by 1 terminal  [RPAR]*/
#define _ts0010 0x00078000 /* Shift to    3 on states in shiftStateBitSet[0]                        Used by 1 terminal  [LB]*/
#define _ts0011 0x0031005a /* Shift to   24 from   90                                               Used by 1 terminal  [LB]*/

static const unsigned int shiftCodeArray[96] = {
   _tc0000,_tc0001,_tc0002,_tc0003,_tc0004,_tc0005,_tc0006,_tc0007,_tc0008,_tc0009
  ,_tc0010,_tc0011,_tc0012,_tc0013,_tc0014,_tc0015,_tc0016,_tc0017,_tc0018,_tc0019
  ,_tc0020,_tc0021,_tc0022,_tc0023,_tc0024,_tc0025,_tc0026,_tc0027,_tc0028,_tc0029
  ,_tc0030,_tc0031,_tc0032,_tc0033,_tc0034,_tc0035,_tc0036,_tc0037,_tc0038,_tc0039
  ,_tc0040,_tc0041,_tc0042,_tc0043,_tc0044,_tc0045,_tc0046,_tc0047,_tc0048,_tc0049
  ,_tc0050,_tc0051,_tc0052,_tc0053,_tc0054,_tc0055,_tc0056,_tc0057,_tc0058,_tc0059
  ,_tc0060,_tc0061,_tc0062,_tc0063,_tc0064,_tc0065,_tc0066,_tc0067,_tc0068,_tc0069
  ,_tc0070,_tc0071,_tc0072,_tc0073,_tc0074,_tc0075,_tc0076,_tc0077,_tc0078,_tc0079
  ,_tc0080,_tc0081,_tc0082,_tc0083
  ,_ts0000,_ts0001,_ts0002,_ts0003,_ts0004,_ts0005,_ts0006,_ts0007,_ts0008,_ts0009
  ,_ts0010,_ts0011
}; // Size of table:384(x86)/384(x64) bytes.

static const unsigned char shiftFromStateArrayTable[26] = {
     4,  61,  63,  67, 153                                                                                   /*   0 Used by 1 terminal  [COMMA]                       */
  ,  2, 151, 152                                                                                             /*   1 Used by 1 terminal  [TO]                          */
  ,  6,  81,  82,  87,  88,  89, 155                                                                         /*   2 Used by 1 terminal  [LPAR]                        */
  ,  7,  40,  60,  66,  68,  69,  71,  72                                                                    /*   3 Used by 1 terminal  [RPAR]                        */
  ,  2,  43, 153                                                                                             /*   4 Used by 1 terminal  [RB]                          */
}; // Size of table:28(x86)/32(x64) bytes.

static const unsigned char shiftToStateArrayTable[21] = {
     25,  26,  31,  29                                                                                       /*   0 Used by 1 terminal  [COMMA]                       */
  ,  27,  28                                                                                                 /*   1 Used by 1 terminal  [TO]                          */
  ,  20,  21,  23,  45,  46,  30                                                                             /*   2 Used by 1 terminal  [LPAR]                        */
  , 149, 154, 156,  32,  33, 157, 158                                                                        /*   3 Used by 1 terminal  [RPAR]                        */
  , 150, 155                                                                                                 /*   4 Used by 1 terminal  [RB]                          */
}; // Size of table:24(x86)/24(x64) bytes.

static const unsigned char shiftStateBitSetTable[120] = { /* range:[0-74], bytes in bitset=10 */
   0xff,0xff,0xff,0xff,0x0f,0x00,0x00,0x00,0x00,0x00 /*   0  36 states Used by 56 terminals [1,3,8-9,19-20,25-73,76]*/
  ,0xff,0xff,0xff,0xff,0x0f,0x60,0x00,0x00,0x00,0x00 /*   1  38 states Used by 1 terminal  [NAME]             */
  ,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x01,0x00 /*   2   2 states Used by 1 terminal  [ASSIGN]           */
  ,0x00,0x00,0x00,0x00,0x20,0x09,0x00,0x80,0x00,0x00 /*   3   4 states Used by 1 terminal  [OR]               */
  ,0x00,0x00,0x00,0x00,0x20,0x09,0x00,0x84,0x00,0x00 /*   4   5 states Used by 1 terminal  [AND]              */
  ,0x19,0x00,0x86,0x00,0x0c,0x00,0x00,0x00,0x00,0x00 /*   5   8 states Used by 2 terminals [NOT LPAR]         */
  ,0x00,0x00,0x00,0x00,0x90,0x10,0x00,0x00,0x00,0x00 /*   6   3 states Used by 6 terminals [13-18]            */
  ,0x00,0x00,0x00,0x00,0x90,0x10,0xf0,0x7b,0xfe,0x07 /*   7  23 states Used by 2 terminals [PLUS MINUS]       */
  ,0x00,0x00,0x00,0x00,0x90,0x96,0xf1,0x7b,0xfe,0x07 /*   8  27 states Used by 3 terminals [PROD QUOT MOD]    */
  ,0x00,0x00,0x00,0x00,0x90,0x96,0xff,0x7b,0xfe,0x07 /*   9  30 states Used by 1 terminal  [POW]              */
  ,0xe6,0xff,0x79,0xff,0x03,0x00,0x00,0x00,0x00,0x00 /*  10  28 states Used by 1 terminal  [LPAR]             */
  ,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x40,0x00,0x00 /*  11   2 states Used by 1 terminal  [RPAR]             */
}; // Size of table:120(x86)/120(x64) bytes.

#define _rc0000 0x00037fff /*                                                       */
#define _rc0001 0x00037fff /*                                                       */
#define _rc0002 0x00037fff /*                                                       */
#define _rc0003 0x00037fff /*                                                       */
#define _rc0004 0x00037fff /*                                                       */
#define _rc0005 0x00037fff /*                                                       */
#define _rc0006 0x00037fff /*                                                       */
#define _rc0007 0x00037fff /*                                                       */
#define _rc0008 0x00037fff /*                                                       */
#define _rc0009 0x00037fff /*                                                       */
#define _rc0010 0x00037fff /*                                                       */
#define _rc0011 0x00037fff /*                                                       */
#define _rc0012 0x00037fff /*                                                       */
#define _rc0013 0x00037fff /*                                                       */
#define _rc0014 0x00037fff /*                                                       */
#define _rc0015 0x00037fff /*                                                       */
#define _rc0016 0x00037fff /*                                                       */
#define _rc0017 0x00037fff /*                                                       */
#define _rc0018 0x00037fff /*                                                       */
#define _rc0019 0x00037fff /*                                                       */
#define _rc0020 0x00037fff /*                                                       */
#define _rc0021 0x00037fff /*                                                       */
#define _rc0022 0x00037fff /*                                                       */
#define _rc0023 0x00037fff /*                                                       */
#define _rc0024 0x00037fff /*                                                       */
#define _rc0025 0x00037fff /*                                                       */
#define _rc0026 0x00037fff /*                                                       */
#define _rc0027 0x00037fff /*                                                       */
#define _rc0028 0x00037fff /*                                                       */
#define _rc0029 0x00037fff /*                                                       */
#define _rc0030 0x00037fff /*                                                       */
#define _rc0031 0x00037fff /*                                                       */
#define _rc0032 0x00037fff /*                                                       */
#define _rc0033 0x00037fff /*                                                       */
#define _rc0034 0x00037fff /*                                                       */
#define _rc0035 0x00037fff /*                                                       */
#define _rc0036 0x00070000 /* Reduce by    3 on EOI                                 */
#define _rc0037 0x00090000 /* Reduce by    4 on EOI                                 */
#define _rc0038 0x00238000 /* Reduce by   17 on tokens in termBitSet[0]             */
#define _rc0039 0x00037fff /*                                                       */
#define _rc0040 0x00037fff /*                                                       */
#define _rc0041 0x002b800a /* Reduce by   21 on tokens in termBitSet[1]             */
#define _rc0042 0x002d800a /* Reduce by   22 on tokens in termBitSet[1]             */
#define _rc0043 0x00037fff /*                                                       */
#define _rc0044 0x00037fff /*                                                       */
#define _rc0045 0x00037fff /*                                                       */
#define _rc0046 0x00037fff /*                                                       */
#define _rc0047 0x0013800a /* Reduce by    9 on tokens in termBitSet[1]             */
#define _rc0048 0x0015800a /* Reduce by   10 on tokens in termBitSet[1]             */
#define _rc0049 0x00178014 /* Reduce by   11 on tokens in termBitSet[2]             */
#define _rc0050 0x00198014 /* Reduce by   12 on tokens in termBitSet[2]             */
#define _rc0051 0x001b8014 /* Reduce by   13 on tokens in termBitSet[2]             */
#define _rc0052 0x008f801e /* Reduce by   71 on tokens in termBitSet[3]             */
#define _rc0053 0x0091801e /* Reduce by   72 on tokens in termBitSet[3]             */
#define _rc0054 0x0093801e /* Reduce by   73 on tokens in termBitSet[3]             */
#define _rc0055 0x0095801e /* Reduce by   74 on tokens in termBitSet[3]             */
#define _rc0056 0x0097801e /* Reduce by   75 on tokens in termBitSet[3]             */
#define _rc0057 0x0099801e /* Reduce by   76 on tokens in termBitSet[3]             */
#define _rc0058 0x009d8028 /* Reduce by   78 on tokens in termBitSet[4]             */
#define _rc0059 0x00118032 /* Reduce by    8 on tokens in termBitSet[5]             */
#define _rc0060 0x00037fff /*                                                       */
#define _rc0061 0x00037fff /*                                                       */
#define _rc0062 0x00037fff /*                                                       */
#define _rc0063 0x00037fff /*                                                       */
#define _rc0064 0x00037fff /*                                                       */
#define _rc0065 0x0043803c /* Reduce by   33 on tokens in termBitSet[6]             */
#define _rc0066 0x00037fff /*                                                       */
#define _rc0067 0x00037fff /*                                                       */
#define _rc0068 0x00037fff /*                                                       */
#define _rc0069 0x00037fff /*                                                       */
#define _rc0070 0x0041803c /* Reduce by   32 on tokens in termBitSet[6]             */
#define _rc0071 0x00037fff /*                                                       */
#define _rc0072 0x00037fff /*                                                       */
#define _rc0073 0x003b8046 /* Reduce by   29 on tokens in termBitSet[7]             */
#define _rc0074 0x003d8046 /* Reduce by   30 on tokens in termBitSet[7]             */
#define _rc0075 0x00010000 /* Reduce by    0 (Accept) on EOI                        */
#define _rc0076 0x00030000 /* Reduce by    1 on EOI                                 */
#define _rc0077 0x000b8050 /* Reduce by    5 on tokens in termBitSet[8]             */
#define _rc0078 0x00037fff /*                                                       */
#define _rc0079 0x001f805a /* Reduce by   15 on tokens in termBitSet[9]             */
#define _rc0080 0x0021805a /* Reduce by   16 on tokens in termBitSet[9]             */
#define _rc0081 0x00037fff /*                                                       */
#define _rc0082 0x00037fff /*                                                       */
#define _rc0083 0x002f805a /* Reduce by   23 on tokens in termBitSet[9]             */
#define _rc0084 0x0031805a /* Reduce by   24 on tokens in termBitSet[9]             */
#define _rc0085 0x0033805a /* Reduce by   25 on tokens in termBitSet[9]             */
#define _rc0086 0x0035805a /* Reduce by   26 on tokens in termBitSet[9]             */
#define _rc0087 0x00037fff /*                                                       */
#define _rc0088 0x00037fff /*                                                       */
#define _rc0089 0x00037fff /*                                                       */
#define _rc0090 0x00037fff /*                                                       */
#define _rc0091 0x0045004a /* Reduce by   34 on LPAR                                */
#define _rc0092 0x0047004a /* Reduce by   35 on LPAR                                */
#define _rc0093 0x0049004a /* Reduce by   36 on LPAR                                */
#define _rc0094 0x004b004a /* Reduce by   37 on LPAR                                */
#define _rc0095 0x004d004a /* Reduce by   38 on LPAR                                */
#define _rc0096 0x004f004a /* Reduce by   39 on LPAR                                */
#define _rc0097 0x0051004a /* Reduce by   40 on LPAR                                */
#define _rc0098 0x0053004a /* Reduce by   41 on LPAR                                */
#define _rc0099 0x0055004a /* Reduce by   42 on LPAR                                */
#define _rc0100 0x0057004a /* Reduce by   43 on LPAR                                */
#define _rc0101 0x0059004a /* Reduce by   44 on LPAR                                */
#define _rc0102 0x005b004a /* Reduce by   45 on LPAR                                */
#define _rc0103 0x005d004a /* Reduce by   46 on LPAR                                */
#define _rc0104 0x005f004a /* Reduce by   47 on LPAR                                */
#define _rc0105 0x0061004a /* Reduce by   48 on LPAR                                */
#define _rc0106 0x0063004a /* Reduce by   49 on LPAR                                */
#define _rc0107 0x0065004a /* Reduce by   50 on LPAR                                */
#define _rc0108 0x0067004a /* Reduce by   51 on LPAR                                */
#define _rc0109 0x0069004a /* Reduce by   52 on LPAR                                */
#define _rc0110 0x006b004a /* Reduce by   53 on LPAR                                */
#define _rc0111 0x006d004a /* Reduce by   54 on LPAR                                */
#define _rc0112 0x006f004a /* Reduce by   55 on LPAR                                */
#define _rc0113 0x0071004a /* Reduce by   56 on LPAR                                */
#define _rc0114 0x0073004a /* Reduce by   57 on LPAR                                */
#define _rc0115 0x0075004a /* Reduce by   58 on LPAR                                */
#define _rc0116 0x0077004a /* Reduce by   59 on LPAR                                */
#define _rc0117 0x0079004a /* Reduce by   60 on LPAR                                */
#define _rc0118 0x007b004a /* Reduce by   61 on LPAR                                */
#define _rc0119 0x007d004a /* Reduce by   62 on LPAR                                */
#define _rc0120 0x007f004a /* Reduce by   63 on LPAR                                */
#define _rc0121 0x0081004a /* Reduce by   64 on LPAR                                */
#define _rc0122 0x0083004a /* Reduce by   65 on LPAR                                */
#define _rc0123 0x0085004a /* Reduce by   66 on LPAR                                */
#define _rc0124 0x0087004a /* Reduce by   67 on LPAR                                */
#define _rc0125 0x0089004a /* Reduce by   68 on LPAR                                */
#define _rc0126 0x008b004a /* Reduce by   69 on LPAR                                */
#define _rc0127 0x008d004a /* Reduce by   70 on LPAR                                */
#define _rc0128 0x00a3004a /* Reduce by   81 on LPAR                                */
#define _rc0129 0x00a5004a /* Reduce by   82 on LPAR                                */
#define _rc0130 0x00a7004a /* Reduce by   83 on LPAR                                */
#define _rc0131 0x00a9004a /* Reduce by   84 on LPAR                                */
#define _rc0132 0x00ab004a /* Reduce by   85 on LPAR                                */
#define _rc0133 0x00ad004a /* Reduce by   86 on LPAR                                */
#define _rc0134 0x00af004a /* Reduce by   87 on LPAR                                */
#define _rc0135 0x00b1004a /* Reduce by   88 on LPAR                                */
#define _rc0136 0x00b3004a /* Reduce by   89 on LPAR                                */
#define _rc0137 0x00b5004a /* Reduce by   90 on LPAR                                */
#define _rc0138 0x00b7004a /* Reduce by   91 on LPAR                                */
#define _rc0139 0x00b98064 /* Reduce by   92 on tokens in termBitSet[10]            */
#define _rc0140 0x00bb805a /* Reduce by   93 on tokens in termBitSet[9]             */
#define _rc0141 0x00050000 /* Reduce by    2 on EOI                                 */
#define _rc0142 0x000d8050 /* Reduce by    6 on tokens in termBitSet[8]             */
#define _rc0143 0x000f8050 /* Reduce by    7 on tokens in termBitSet[8]             */
#define _rc0144 0x0023805a /* Reduce by   17 on tokens in termBitSet[9]             */
#define _rc0145 0x009f801e /* Reduce by   79 on tokens in termBitSet[3]             */
#define _rc0146 0x001d805a /* Reduce by   14 on tokens in termBitSet[9]             */
#define _rc0147 0x009b801e /* Reduce by   77 on tokens in termBitSet[3]             */
#define _rc0148 0x0029805a /* Reduce by   20 on tokens in termBitSet[9]             */
#define _rc0149 0x00a1801e /* Reduce by   80 on tokens in termBitSet[3]             */
#define _rc0150 0x0037805a /* Reduce by   27 on tokens in termBitSet[9]             */
#define _rc0151 0x00037fff /*                                                       */
#define _rc0152 0x00037fff /*                                                       */
#define _rc0153 0x00037fff /*                                                       */
#define _rc0154 0x0025805a /* Reduce by   18 on tokens in termBitSet[9]             */
#define _rc0155 0x00037fff /*                                                       */
#define _rc0156 0x0027805a /* Reduce by   19 on tokens in termBitSet[9]             */
#define _rc0157 0x003f805a /* Reduce by   31 on tokens in termBitSet[9]             */
#define _rc0158 0x0039805a /* Reduce by   28 on tokens in termBitSet[9]             */

static const unsigned int reduceCodeArray[159] = {
   _rc0000,_rc0001,_rc0002,_rc0003,_rc0004,_rc0005,_rc0006,_rc0007,_rc0008,_rc0009
  ,_rc0010,_rc0011,_rc0012,_rc0013,_rc0014,_rc0015,_rc0016,_rc0017,_rc0018,_rc0019
  ,_rc0020,_rc0021,_rc0022,_rc0023,_rc0024,_rc0025,_rc0026,_rc0027,_rc0028,_rc0029
  ,_rc0030,_rc0031,_rc0032,_rc0033,_rc0034,_rc0035,_rc0036,_rc0037,_rc0038,_rc0039
  ,_rc0040,_rc0041,_rc0042,_rc0043,_rc0044,_rc0045,_rc0046,_rc0047,_rc0048,_rc0049
  ,_rc0050,_rc0051,_rc0052,_rc0053,_rc0054,_rc0055,_rc0056,_rc0057,_rc0058,_rc0059
  ,_rc0060,_rc0061,_rc0062,_rc0063,_rc0064,_rc0065,_rc0066,_rc0067,_rc0068,_rc0069
  ,_rc0070,_rc0071,_rc0072,_rc0073,_rc0074,_rc0075,_rc0076,_rc0077,_rc0078,_rc0079
  ,_rc0080,_rc0081,_rc0082,_rc0083,_rc0084,_rc0085,_rc0086,_rc0087,_rc0088,_rc0089
  ,_rc0090,_rc0091,_rc0092,_rc0093,_rc0094,_rc0095,_rc0096,_rc0097,_rc0098,_rc0099
  ,_rc0100,_rc0101,_rc0102,_rc0103,_rc0104,_rc0105,_rc0106,_rc0107,_rc0108,_rc0109
  ,_rc0110,_rc0111,_rc0112,_rc0113,_rc0114,_rc0115,_rc0116,_rc0117,_rc0118,_rc0119
  ,_rc0120,_rc0121,_rc0122,_rc0123,_rc0124,_rc0125,_rc0126,_rc0127,_rc0128,_rc0129
  ,_rc0130,_rc0131,_rc0132,_rc0133,_rc0134,_rc0135,_rc0136,_rc0137,_rc0138,_rc0139
  ,_rc0140,_rc0141,_rc0142,_rc0143,_rc0144,_rc0145,_rc0146,_rc0147,_rc0148,_rc0149
  ,_rc0150,_rc0151,_rc0152,_rc0153,_rc0154,_rc0155,_rc0156,_rc0157,_rc0158
}; // Size of table:636(x86)/640(x64) bytes.

#define termArrayTable   nullptr
#define reduceArrayTable nullptr

static const unsigned char termBitSetTable[110] = { /* range:[0-77], bytes in bitset=10 */
   0x01,0xe0,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0x00 /*   0  13 tokens Used by 1 state  [38]                  */
  ,0xe1,0xec,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0x28 /*   1  16 tokens Used by 4 states [41-42,47-48]         */
  ,0xe1,0xec,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x28 /*   2  19 tokens Used by 3 states [49-51]               */
  ,0x41,0x0c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x28 /*   3   6 tokens Used by 9 states [52-57,145,147,149]   */
  ,0x41,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x28 /*   4   5 tokens Used by 1 state  [58]                  */
  ,0xa0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 /*   5   2 tokens Used by 1 state  [59]                  */
  ,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20 /*   6   2 tokens Used by 2 states [65,70]               */
  ,0xe1,0xec,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x28 /*   7  14 tokens Used by 2 states [73-74]               */
  ,0x0e,0x13,0x18,0xfe,0xff,0xff,0xff,0xff,0xff,0x17 /*   8  59 tokens Used by 3 states [77,142-143]          */
  ,0xe1,0xec,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0x28 /*   9  20 tokens Used by 15 states [79-80,83-86,140,144,146,148,150,154,156-158]*/
  ,0xf1,0xec,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0x28 /*  10  21 tokens Used by 1 state  [139]                 */
}; // Size of table:112(x86)/112(x64) bytes.

#define _nc0000 0x00000000 /*                                                       */
#define _nc0001 0x00977fff /* function        Shift to   75 No check (1 state )     */
#define _nc0002 0x00000000 /* final_expr      stateArray    0, newStateArray    0   */
#define _nc0003 0x00477fff /* assignStmtList  Shift to   35 No check (1 state )     */
#define _nc0004 0x00248013 /* expr            Split(_ns0000,_ns0001)                */
#define _nc0005 0x00420023 /* boolExpr        stateArray    2, newStateArray    2   */
#define _nc0006 0x00520000 /* assignStmt      stateArray    0, newStateArray    3   */
#define _nc0007 0x0056002c /* assign          stateArray    3, newStateArray    4   */
#define _nc0008 0x00288015 /* name            Split(_ns0002,_ns0003)                */
#define _nc0009 0x009f7fff /* unary           Shift to   79 No check (36 states)    */
#define _nc0010 0x00a17fff /* number          Shift to   80 No check (36 states)    */
#define _nc0011 0x00a37fff /* function1       Shift to   81 No check (36 states)    */
#define _nc0012 0x00a57fff /* function2       Shift to   82 No check (36 states)    */
#define _nc0013 0x00a77fff /* conditionalExpr Shift to   83 No check (36 states)    */
#define _nc0014 0x00a97fff /* sumExpr         Shift to   84 No check (36 states)    */
#define _nc0015 0x00ab7fff /* productExpr     Shift to   85 No check (36 states)    */
#define _nc0016 0x00ad7fff /* polyExpr        Shift to   86 No check (36 states)    */
#define _nc0017 0x01337fff /* exprList        Shift to  153 No check (1 state )     */
#define _ns0000 0x00598000 /* Shift to   44 on states in succStateBitSet[0]        Used by 1 ntIndex   [expr]*/
#define _ns0001 0x00040003 /* stateArray    1, newStateArray    1                  Used by 1 ntIndex   [expr]*/
#define _ns0002 0x01218005 /* Shift to  144 on states in succStateBitSet[1]        Used by 1 ntIndex   [name]*/
#define _ns0003 0x005e002c /* stateArray    3, newStateArray    5                  Used by 1 ntIndex   [name]*/

static const unsigned int succCodeArray[22] = {
   _nc0000,_nc0001,_nc0002,_nc0003,_nc0004,_nc0005,_nc0006,_nc0007,_nc0008,_nc0009
  ,_nc0010,_nc0011,_nc0012,_nc0013,_nc0014,_nc0015,_nc0016,_nc0017
  ,_ns0000,_ns0001,_ns0002,_ns0003
}; // Size of table:88(x86)/88(x64) bytes.

static const unsigned char succFromStateArrayTable[49] = {
     2,  34,  35                                                                                             /*   0 Used by 2 ntIndices [final_expr assignStmt]       */
  , 31,   0,   1,   2,   5,   6,   7,   8,   9,  10,  11,  12,  13,  14,  15,  16,  19,  20,  21,  22,  24   /*   1 Used by 1 ntIndex   [expr]                        */
      ,  25,  26,  27,  28,  29,  30,  31,  32,  33,  34,  35
  ,  8,   0,   3,   4,  17,  18,  23,  34,  35                                                               /*   2 Used by 1 ntIndex   [boolExpr]                    */
  ,  4,  34,  35,  45,  46                                                                                   /*   3 Used by 2 ntIndices [assign name]                 */
}; // Size of table:52(x86)/56(x64) bytes.

static const unsigned char succToStateArrayTable[51] = {
     76, 141                                                                                                 /*   0 Used by 1 ntIndex   [final_expr]                  */
  ,  39,  41,  42,  47,  48,  49,  50,  51, 146,  52,  53,  54,  55,  56,  57,  59,  60,  61,  62,  65       /*   1 Used by 1 ntIndex   [expr]                        */
  ,  66,  67,  68,  69,  70,  71,  72,  73,  74,  36,  36
  ,  40,  43, 145, 147,  58,  63,  37,  37                                                                   /*   2 Used by 1 ntIndex   [boolExpr]                    */
  ,  77, 142                                                                                                 /*   3 Used by 1 ntIndex   [assignStmt]                  */
  ,  78,  78, 151, 152                                                                                       /*   4 Used by 1 ntIndex   [assign]                      */
  ,  38,  38,  64,  64                                                                                       /*   5 Used by 1 ntIndex   [name]                        */
}; // Size of table:52(x86)/56(x64) bytes.

static const unsigned char succStateBitSetTable[10] = { /* range:[0-33], bytes in bitset=5 */
   0x18,0x00,0x86,0x00,0x00 /*   0   5 states Used by 1 ntIndex   [expr]             */
  ,0xff,0xff,0xff,0xff,0x03 /*   1  34 states Used by 1 ntIndex   [name]             */
}; // Size of table:12(x86)/16(x64) bytes.

/************************************************************************************\
* The prodLengthArray[] is indexed by production number and holds the number of      *
* symbols on the right side of each production.                                      *
\************************************************************************************/
static const unsigned char prodLengthArray[94] = {
  /*   0 */    1,  1,  2,  1,  1,  1,  2,  2,  3,  3
  /*  10 */ ,  3,  3,  3,  3,  3,  1,  1,  1,  4,  6
  /*  20 */ ,  3,  2,  2,  1,  1,  1,  1,  3,  8,  7
  /*  30 */ ,  7,  7,  3,  1,  1,  1,  1,  1,  1,  1
  /*  40 */ ,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1
  /*  50 */ ,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1
  /*  60 */ ,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1
  /*  70 */ ,  1,  3,  3,  3,  3,  3,  3,  3,  3,  2
  /*  80 */ ,  3,  1,  1,  1,  1,  1,  1,  1,  1,  1
  /*  90 */ ,  1,  1,  1,  1
}; // Size of table:96(x86)/96(x64) bytes.

/************************************************************************************\
* leftSideArray[] is indexed by production number.                                   *
* leftSideArray[p] = A', A' = (A - termCount)                                        *
*                        where A is the left side of production p.                   *
* A' = [0..ntermCount-1]                                                             *
* p  = [0..productionCount-1]                                                        *
\************************************************************************************/
static const unsigned char leftSideArray[94] = {
  /*   0 */    0,  1,  1,  2,  2,  3,  3,  6,  7,  4
  /*  10 */ ,  4,  4,  4,  4,  4,  4,  9,  9,  9,  9
  /*  20 */ ,  9,  9,  9,  9,  9,  9,  9,  9, 13, 14
  /*  30 */ , 15, 16, 17, 17, 11, 11, 11, 11, 11, 11
  /*  40 */ , 11, 11, 11, 11, 11, 11, 11, 11, 11, 11
  /*  50 */ , 11, 11, 11, 11, 11, 11, 11, 11, 11, 11
  /*  60 */ , 11, 11, 11, 11, 11, 11, 11, 11, 11, 11
  /*  70 */ , 11,  5,  5,  5,  5,  5,  5,  5,  5,  5
  /*  80 */ ,  5, 12, 12, 12, 12, 12, 12, 12, 12, 12
  /*  90 */ , 12, 12,  8, 10
}; // Size of table:96(x86)/96(x64) bytes.

/************************************************************************************\
* rightSideTable[] holds a compressed form of the rightsides of all productions in   *
* the grammar. Only used for debugging.                                              *
\************************************************************************************/
static const unsigned char rightSideTable[171] = {
  /*   0 */   85
  /*   1 */ , 86
  /*   2 */ , 87, 86
  /*   3 */ , 88
  /*   4 */ , 89
  /*   5 */ , 90
  /*   6 */ , 87, 90
  /*   7 */ , 91,  5
  /*   8 */ , 92,  4, 88
  /*   9 */ , 88, 19, 88
  /*  10 */ , 88, 20, 88
  /*  11 */ , 88, 21, 88
  /*  12 */ , 88, 22, 88
  /*  13 */ , 88, 23, 88
  /*  14 */ , 88, 24, 88
  /*  15 */ , 93
  /*  16 */ , 94
  /*  17 */ , 92
  /*  18 */ , 95, 74, 88, 75
  /*  19 */ , 96, 74, 88,  6, 88, 75
  /*  20 */ , 74, 88, 75
  /*  21 */ , 20, 88
  /*  22 */ , 19, 88
  /*  23 */ , 97
  /*  24 */ , 98
  /*  25 */ , 99
  /*  26 */ ,100
  /*  27 */ , 76, 89, 77
  /*  28 */ ,  3, 74, 89,  6, 88,  6, 88, 75
  /*  29 */ ,  8, 74, 91,  7, 88, 75, 88
  /*  30 */ ,  9, 74, 91,  7, 88, 75, 88
  /*  31 */ , 72, 76,101, 77, 74, 88, 75
  /*  32 */ ,101,  6, 88
  /*  33 */ , 88
  /*  34 */ , 44
  /*  35 */ , 25
  /*  36 */ , 26
  /*  37 */ , 27
  /*  38 */ , 28
  /*  39 */ , 29
  /*  40 */ , 30
  /*  41 */ , 31
  /*  42 */ , 32
  /*  43 */ , 34
  /*  44 */ , 45
  /*  45 */ , 35
  /*  46 */ , 36
  /*  47 */ , 37
  /*  48 */ , 38
  /*  49 */ , 46
  /*  50 */ , 47
  /*  51 */ , 48
  /*  52 */ , 49
  /*  53 */ , 50
  /*  54 */ , 51
  /*  55 */ , 53
  /*  56 */ , 54
  /*  57 */ , 55
  /*  58 */ , 56
  /*  59 */ , 57
  /*  60 */ , 58
  /*  61 */ , 59
  /*  62 */ , 60
  /*  63 */ , 39
  /*  64 */ , 65
  /*  65 */ , 40
  /*  66 */ , 41
  /*  67 */ , 66
  /*  68 */ , 67
  /*  69 */ , 42
  /*  70 */ , 43
  /*  71 */ , 88, 13, 88
  /*  72 */ , 88, 18, 88
  /*  73 */ , 88, 16, 88
  /*  74 */ , 88, 17, 88
  /*  75 */ , 88, 14, 88
  /*  76 */ , 88, 15, 88
  /*  77 */ , 89, 11, 89
  /*  78 */ , 89, 10, 89
  /*  79 */ , 12, 89
  /*  80 */ , 74, 89, 75
  /*  81 */ , 69
  /*  82 */ , 70
  /*  83 */ , 71
  /*  84 */ , 73
  /*  85 */ , 64
  /*  86 */ , 68
  /*  87 */ , 62
  /*  88 */ , 61
  /*  89 */ , 63
  /*  90 */ , 33
  /*  91 */ , 52
  /*  92 */ ,  2
  /*  93 */ ,  1
}; // Size of table:172(x86)/176(x64) bytes.

/************************************************************************************\
* symbolNames is a space separated string with the names of all symbols used in the  *
* grammar, terminals and nonTerminals. Only used for debugging.                      *
\************************************************************************************/
static const char *symbolNames = {
  "EOI"                                               /* T     0               */
  " NUMBER"                                           /* T     1               */
  " NAME"                                             /* T     2               */
  " IIF"                                              /* T     3               */
  " ASSIGN"                                           /* T     4               */
  " SEMI"                                             /* T     5               */
  " COMMA"                                            /* T     6               */
  " TO"                                               /* T     7               */
  " INDEXEDSUM"                                       /* T     8               */
  " INDEXEDPRODUCT"                                   /* T     9               */
  " OR"                                               /* T    10               */
  " AND"                                              /* T    11               */
  " NOT"                                              /* T    12               */
  " EQ"                                               /* T    13               */
  " GE"                                               /* T    14               */
  " GT"                                               /* T    15               */
  " LE"                                               /* T    16               */
  " LT"                                               /* T    17               */
  " NE"                                               /* T    18               */
  " PLUS"                                             /* T    19               */
  " MINUS"                                            /* T    20               */
  " PROD"                                             /* T    21               */
  " QUOT"                                             /* T    22               */
  " MOD"                                              /* T    23               */
  " POW"                                              /* T    24               */
  " ACOS"                                             /* T    25               */
  " ACOSH"                                            /* T    26               */
  " ACOT"                                             /* T    27               */
  " ACSC"                                             /* T    28               */
  " ASEC"                                             /* T    29               */
  " ASIN"                                             /* T    30               */
  " ASINH"                                            /* T    31               */
  " ATAN"                                             /* T    32               */
  " ATAN2"                                            /* T    33               */
  " ATANH"                                            /* T    34               */
  " COS"                                              /* T    35               */
  " COSH"                                             /* T    36               */
  " COT"                                              /* T    37               */
  " CSC"                                              /* T    38               */
  " SEC"                                              /* T    39               */
  " SIN"                                              /* T    40               */
  " SINH"                                             /* T    41               */
  " TAN"                                              /* T    42               */
  " TANH"                                             /* T    43               */
  " ABS"                                              /* T    44               */
  " CEIL"                                             /* T    45               */
  " ERF"                                              /* T    46               */
  " EXP"                                              /* T    47               */
  " EXP10"                                            /* T    48               */
  " EXP2"                                             /* T    49               */
  " FAC"                                              /* T    50               */
  " FLOOR"                                            /* T    51               */
  " HYPOT"                                            /* T    52               */
  " GAMMA"                                            /* T    53               */
  " GAUSS"                                            /* T    54               */
  " INVERF"                                           /* T    55               */
  " LN"                                               /* T    56               */
  " LOG10"                                            /* T    57               */
  " LOG2"                                             /* T    58               */
  " NORM"                                             /* T    59               */
  " PROBIT"                                           /* T    60               */
  " CHI2DIST"                                         /* T    61               */
  " CHI2DENS"                                         /* T    62               */
  " LINCGAMMA"                                        /* T    63               */
  " ROOT"                                             /* T    64               */
  " SIGN"                                             /* T    65               */
  " SQR"                                              /* T    66               */
  " SQRT"                                             /* T    67               */
  " BINOMIAL"                                         /* T    68               */
  " MAX"                                              /* T    69               */
  " MIN"                                              /* T    70               */
  " NORMRAND"                                         /* T    71               */
  " POLY"                                             /* T    72               */
  " RAND"                                             /* T    73               */
  " LPAR"                                             /* T    74               */
  " RPAR"                                             /* T    75               */
  " LB"                                               /* T    76               */
  " RB"                                               /* T    77               */
  " BOOLCONST"                                        /* T    78               */
  " STMTLIST"                                         /* T    79               */
  " SUM"                                              /* T    80               */
  " ADDENT"                                           /* T    81               */
  " UNARYMINUS"                                       /* T    82               */
  " PRODUCT"                                          /* T    83               */
  " start"                                            /* NT   84 ntIndex=0     */
  " function"                                         /* NT   85 ntIndex=1     */
  " final_expr"                                       /* NT   86 ntIndex=2     */
  " assignStmtList"                                   /* NT   87 ntIndex=3     */
  " expr"                                             /* NT   88 ntIndex=4     */
  " boolExpr"                                         /* NT   89 ntIndex=5     */
  " assignStmt"                                       /* NT   90 ntIndex=6     */
  " assign"                                           /* NT   91 ntIndex=7     */
  " name"                                             /* NT   92 ntIndex=8     */
  " unary"                                            /* NT   93 ntIndex=9     */
  " number"                                           /* NT   94 ntIndex=10    */
  " function1"                                        /* NT   95 ntIndex=11    */
  " function2"                                        /* NT   96 ntIndex=12    */
  " conditionalExpr"                                  /* NT   97 ntIndex=13    */
  " sumExpr"                                          /* NT   98 ntIndex=14    */
  " productExpr"                                      /* NT   99 ntIndex=15    */
  " polyExpr"                                         /* NT  100 ntIndex=16    */
  " exprList"                                         /* NT  101 ntIndex=17    */
}; // Size of string:620(x86)/624(x64) bytes

static const ParserTablesTemplateTransShift<102,84,94,159,2564,2656,34,78,0,75,0,34
                                          ,unsigned char
                                          ,unsigned char
                                          ,unsigned char
                                          ,short
                                          ,unsigned char> ExpressionTables_s(prodLengthArray   , leftSideArray
                                                                            ,rightSideTable    , symbolNames
                                                                            ,shiftCodeArray    , shiftFromStateArrayTable, shiftToStateArrayTable, shiftStateBitSetTable
                                                                            ,reduceCodeArray   , termArrayTable          , reduceArrayTable      , termBitSetTable
                                                                            ,succCodeArray     , succFromStateArrayTable , succToStateArrayTable , succStateBitSetTable
                                                                            );

const AbstractParserTables *ExpressionParser::ExpressionTables = &ExpressionTables_s;
// Size of ExpressionTables_s: 68(x86)/128(x64) bytes. Size of ExpressionTables:4(x86)/8(x64) bytes

// Total size of table data:2.564(x86)/2.656(x64) bytes.
}; // namespace Expr
