/* DO NOT EDIT THIS FILE - it is machine generated */
#line 16 "C:\\Mytools2015\\ParserGen\\transchar\\Transchar.lex"
#include "stdafx.h"
#include "transcharlex.h"

#line 7 "C:\\mytools2015\\ParserGen\\lib\\lexgencpp.par"
// DFA State   0 [nonAccepting]
//   goto  1 on \x00\x01\x02\x03\x04\x05\x06\x07\b\t
//   goto  2 on \n
//   goto  1 on \x0b\f\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\s!"#$%
//   goto 53 on &
//   goto  1 on \'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7f\x80\x81
//              \x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a
//              \x9b\x9c\x9d\x9e\x9f\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3
//              \xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc
//              \xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0\xe1\xe2\xe3\xe4\xe5
//              \xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe
//              \xff
// DFA State   1 [accepting, line  77 <return getText()[0];>]
// DFA State   2 [accepting, line  78 <return getText()[0];>]
// DFA State   3 [accepting, line  36 <return 142; /* Ä */>]
// DFA State   4 [accepting, line  43 <return 211; /* Ë */>]
// DFA State   5 [accepting, line  51 <return 216; /* Ï */>]
// DFA State   6 [accepting, line  62 <return 153; /* Ö */>]
// DFA State   7 [accepting, line  69 <return 154; /* Ü */>]
// DFA State   8 [accepting, line  37 <return 132; /* ä */>]
// DFA State   9 [accepting, line  44 <return 137; /* ë */>]
// DFA State  10 [accepting, line  52 <return 139; /* ï */>]
// DFA State  11 [accepting, line  63 <return 148; /* ö */>]
// DFA State  12 [accepting, line  70 <return 129; /* ü */>]
// DFA State  13 [accepting, line  28 <return 146; /* Æ */>]
// DFA State  14 [accepting, line  30 <return 143; /* Å */>]
// DFA State  15 [accepting, line  45 <return 210; /* Ê */>]
// DFA State  16 [accepting, line  38 <return 131; /* â */>]
// DFA State  17 [accepting, line  29 <return 145; /* æ */>]
// DFA State  18 [accepting, line  31 <return 134; /* å */>]
// DFA State  19 [accepting, line  46 <return 136; /* ê */>]
// DFA State  20 [accepting, line  53 <return 140; /* î */>]
// DFA State  21 [accepting, line  64 <return 147; /* ô */>]
// DFA State  22 [accepting, line  74 <return 225; /* ss */>]
// DFA State  23 [accepting, line  71 <return 150; /* û */>]
// DFA State  24 [accepting, line  34 <return 181; /* Á */>]
// DFA State  25 [accepting, line  32 <return 183; /* À */>]
// DFA State  26 [accepting, line  76 <return 128; /* C */>]
// DFA State  27 [accepting, line  41 <return 144; /* É */>]
// DFA State  28 [accepting, line  39 <return 212; /* È */>]
// DFA State  29 [accepting, line  49 <return 214; /* Í */>]
// DFA State  30 [accepting, line  47 <return 222; /* Ì */>]
// DFA State  31 [accepting, line  54 <return 165; /* Ñ */>]
// DFA State  32 [accepting, line  60 <return 224; /* Ó */>]
// DFA State  33 [accepting, line  58 <return 227; /* Ò */>]
// DFA State  34 [accepting, line  56 <return 157; /* Ø */>]
// DFA State  35 [accepting, line  67 <return 233; /* Ú */>]
// DFA State  36 [accepting, line  65 <return 235; /* Ù */>]
// DFA State  37 [accepting, line  72 <return 237; /* Ý */>]
// DFA State  38 [accepting, line  35 <return 160; /* á */>]
// DFA State  39 [accepting, line  33 <return 133; /* à */>]
// DFA State  40 [accepting, line  75 <return 135; /* c */>]
// DFA State  41 [accepting, line  42 <return 130; /* é */>]
// DFA State  42 [accepting, line  40 <return 138; /* è */>]
// DFA State  43 [accepting, line  50 <return 161; /* í */>]
// DFA State  44 [accepting, line  48 <return 141; /* ì */>]
// DFA State  45 [accepting, line  55 <return 164; /* ñ */>]
// DFA State  46 [accepting, line  61 <return 162; /* ó */>]
// DFA State  47 [accepting, line  59 <return 149; /* ò */>]
// DFA State  48 [accepting, line  57 <return 155; /* ø */>]
// DFA State  49 [accepting, line  68 <return 163; /* ú */>]
// DFA State  50 [accepting, line  66 <return 151; /* ù */>]
// DFA State  51 [accepting, line  73 <return 236; /* ý */>]
// DFA State  52 [nonAccepting]
//   goto 63 on E
//   goto 135 on a
//   goto 64 on g
//   goto 65 on r
//   goto 66 on u
// DFA State  53 [accepting, line  77 <return getText()[0];>]
//   goto 52 on A
//   goto 54 on C
//   goto 55 on E
//   goto 56 on I
//   goto 57 on N
//   goto 58 on O
//   goto 237 on U
//   goto 59 on Y
//   goto 60 on a
//   goto 235 on c
//   goto 236 on e
//   goto 243 on i
//   goto 263 on n
//   goto 61 on o
//   goto 62 on s
//   goto 246 on u
//   goto 283 on y
// DFA State  54 [nonAccepting]
//   goto 67 on c
// DFA State  55 [nonAccepting]
//   goto 68 on a
//   goto 137 on c
//   goto 264 on g
//   goto 188 on u
// DFA State  56 [nonAccepting]
//   goto 265 on a
//   goto 266 on g
//   goto 201 on u
// DFA State  57 [nonAccepting]
//   goto 148 on t
// DFA State  58 [nonAccepting]
//   goto 267 on a
//   goto 268 on g
//   goto 136 on s
//   goto 206 on u
// DFA State  59 [nonAccepting]
//   goto 271 on a
// DFA State  60 [nonAccepting]
//   goto 273 on a
//   goto 197 on c
//   goto 147 on e
//   goto 272 on g
//   goto 238 on r
//   goto 216 on u
// DFA State  61 [nonAccepting]
//   goto 279 on a
//   goto 215 on c
//   goto 278 on g
//   goto 241 on s
//   goto 227 on u
// DFA State  62 [nonAccepting]
//   goto 199 on z
// DFA State  63 [nonAccepting]
//   goto 153 on l
// DFA State  64 [nonAccepting]
//   goto 70 on r
// DFA State  65 [nonAccepting]
//   goto 71 on i
// DFA State  66 [nonAccepting]
//   goto 72 on m
// DFA State  67 [nonAccepting]
//   goto 73 on e
// DFA State  68 [nonAccepting]
//   goto 239 on c
// DFA State  69 [nonAccepting]
//   goto 77 on u
// DFA State  70 [nonAccepting]
//   goto 78 on a
// DFA State  71 [nonAccepting]
//   goto 142 on n
// DFA State  72 [nonAccepting]
//   goto 79 on l
// DFA State  73 [nonAccepting]
//   goto 141 on d
// DFA State  74 [nonAccepting]
//   goto 80 on r
// DFA State  75 [nonAccepting]
//   goto 150 on i
// DFA State  76 [nonAccepting]
//   goto 93 on g
// DFA State  77 [nonAccepting]
//   goto 94 on t
// DFA State  78 [nonAccepting]
//   goto 144 on v
// DFA State  79 [nonAccepting]
//   goto  3 on ;
// DFA State  80 [nonAccepting]
//   goto 97 on c
// DFA State  81 [nonAccepting]
//   goto  4 on ;
// DFA State  82 [nonAccepting]
//   goto  5 on ;
// DFA State  83 [nonAccepting]
//   goto 166 on d
// DFA State  84 [nonAccepting]
//   goto 98 on s
// DFA State  85 [nonAccepting]
//   goto  6 on ;
// DFA State  86 [nonAccepting]
//   goto  7 on ;
// DFA State  87 [nonAccepting]
//   goto  8 on ;
// DFA State  88 [nonAccepting]
//   goto 145 on i
// DFA State  89 [nonAccepting]
//   goto  9 on ;
// DFA State  90 [nonAccepting]
//   goto 10 on ;
// DFA State  91 [nonAccepting]
//   goto 11 on ;
// DFA State  92 [nonAccepting]
//   goto 12 on ;
// DFA State  93 [nonAccepting]
//   goto 13 on ;
// DFA State  94 [nonAccepting]
//   goto 107 on e
// DFA State  95 [nonAccepting]
//   goto 14 on ;
// DFA State  96 [nonAccepting]
//   goto 109 on l
// DFA State  97 [nonAccepting]
//   goto 15 on ;
// DFA State  98 [nonAccepting]
//   goto 117 on h
// DFA State  99 [nonAccepting]
//   goto 16 on ;
// DFA State 100 [nonAccepting]
//   goto 17 on ;
// DFA State 101 [nonAccepting]
//   goto 18 on ;
// DFA State 102 [nonAccepting]
//   goto 19 on ;
// DFA State 103 [nonAccepting]
//   goto 20 on ;
// DFA State 104 [nonAccepting]
//   goto 21 on ;
// DFA State 105 [nonAccepting]
//   goto 22 on ;
// DFA State 106 [nonAccepting]
//   goto 23 on ;
// DFA State 107 [nonAccepting]
//   goto 24 on ;
// DFA State 108 [nonAccepting]
//   goto 25 on ;
// DFA State 109 [nonAccepting]
//   goto 26 on ;
// DFA State 110 [nonAccepting]
//   goto 27 on ;
// DFA State 111 [nonAccepting]
//   goto 28 on ;
// DFA State 112 [nonAccepting]
//   goto 29 on ;
// DFA State 113 [nonAccepting]
//   goto 30 on ;
// DFA State 114 [nonAccepting]
//   goto 31 on ;
// DFA State 115 [nonAccepting]
//   goto 32 on ;
// DFA State 116 [nonAccepting]
//   goto 33 on ;
// DFA State 117 [nonAccepting]
//   goto 34 on ;
// DFA State 118 [nonAccepting]
//   goto 35 on ;
// DFA State 119 [nonAccepting]
//   goto 36 on ;
// DFA State 120 [nonAccepting]
//   goto 37 on ;
// DFA State 121 [nonAccepting]
//   goto 38 on ;
// DFA State 122 [nonAccepting]
//   goto 39 on ;
// DFA State 123 [nonAccepting]
//   goto 40 on ;
// DFA State 124 [nonAccepting]
//   goto 41 on ;
// DFA State 125 [nonAccepting]
//   goto 42 on ;
// DFA State 126 [nonAccepting]
//   goto 43 on ;
// DFA State 127 [nonAccepting]
//   goto 44 on ;
// DFA State 128 [nonAccepting]
//   goto 45 on ;
// DFA State 129 [nonAccepting]
//   goto 46 on ;
// DFA State 130 [nonAccepting]
//   goto 47 on ;
// DFA State 131 [nonAccepting]
//   goto 48 on ;
// DFA State 132 [nonAccepting]
//   goto 49 on ;
// DFA State 133 [nonAccepting]
//   goto 50 on ;
// DFA State 134 [nonAccepting]
//   goto 51 on ;
// DFA State 135 [nonAccepting]
//   goto 69 on c
// DFA State 136 [nonAccepting]
//   goto 138 on l
// DFA State 137 [nonAccepting]
//   goto 74 on i
// DFA State 138 [nonAccepting]
//   goto 84 on a
// DFA State 139 [nonAccepting]
//   goto 81 on l
// DFA State 140 [nonAccepting]
//   goto 88 on d
// DFA State 141 [nonAccepting]
//   goto 96 on i
// DFA State 142 [nonAccepting]
//   goto 95 on g
// DFA State 143 [nonAccepting]
//   goto 99 on c
// DFA State 144 [nonAccepting]
//   goto 108 on e
// DFA State 145 [nonAccepting]
//   goto 123 on l
// DFA State 146 [nonAccepting]
//   goto 131 on h
// DFA State 147 [nonAccepting]
//   goto 75 on l
// DFA State 148 [nonAccepting]
//   goto 154 on i
// DFA State 149 [nonAccepting]
//   goto 82 on l
// DFA State 150 [nonAccepting]
//   goto 100 on g
// DFA State 151 [nonAccepting]
//   goto 102 on c
// DFA State 152 [nonAccepting]
//   goto 110 on e
// DFA State 153 [nonAccepting]
//   goto 76 on i
// DFA State 154 [nonAccepting]
//   goto 83 on l
// DFA State 155 [nonAccepting]
//   goto 101 on g
// DFA State 156 [nonAccepting]
//   goto 103 on c
// DFA State 157 [nonAccepting]
//   goto 111 on e
// DFA State 158 [nonAccepting]
//   goto 85 on l
// DFA State 159 [nonAccepting]
//   goto 105 on g
// DFA State 160 [nonAccepting]
//   goto 104 on c
// DFA State 161 [nonAccepting]
//   goto 112 on e
// DFA State 162 [nonAccepting]
//   goto 86 on l
// DFA State 163 [nonAccepting]
//   goto 106 on c
// DFA State 164 [nonAccepting]
//   goto 113 on e
// DFA State 165 [nonAccepting]
//   goto 87 on l
// DFA State 166 [nonAccepting]
//   goto 114 on e
// DFA State 167 [nonAccepting]
//   goto 89 on l
// DFA State 168 [nonAccepting]
//   goto 115 on e
// DFA State 169 [nonAccepting]
//   goto 90 on l
// DFA State 170 [nonAccepting]
//   goto 116 on e
// DFA State 171 [nonAccepting]
//   goto 91 on l
// DFA State 172 [nonAccepting]
//   goto 118 on e
// DFA State 173 [nonAccepting]
//   goto 92 on l
// DFA State 174 [nonAccepting]
//   goto 119 on e
// DFA State 175 [nonAccepting]
//   goto 120 on e
// DFA State 176 [nonAccepting]
//   goto 121 on e
// DFA State 177 [nonAccepting]
//   goto 122 on e
// DFA State 178 [nonAccepting]
//   goto 124 on e
// DFA State 179 [nonAccepting]
//   goto 125 on e
// DFA State 180 [nonAccepting]
//   goto 126 on e
// DFA State 181 [nonAccepting]
//   goto 127 on e
// DFA State 182 [nonAccepting]
//   goto 128 on e
// DFA State 183 [nonAccepting]
//   goto 129 on e
// DFA State 184 [nonAccepting]
//   goto 130 on e
// DFA State 185 [nonAccepting]
//   goto 132 on e
// DFA State 186 [nonAccepting]
//   goto 133 on e
// DFA State 187 [nonAccepting]
//   goto 134 on e
// DFA State 188 [nonAccepting]
//   goto 139 on m
// DFA State 189 [nonAccepting]
//   goto 140 on e
// DFA State 190 [nonAccepting]
//   goto 155 on n
// DFA State 191 [nonAccepting]
//   goto 143 on r
// DFA State 192 [nonAccepting]
//   goto 159 on i
// DFA State 193 [nonAccepting]
//   goto 152 on t
// DFA State 194 [nonAccepting]
//   goto 157 on v
// DFA State 195 [nonAccepting]
//   goto 182 on d
// DFA State 196 [nonAccepting]
//   goto 146 on s
// DFA State 197 [nonAccepting]
//   goto 191 on i
// DFA State 198 [nonAccepting]
//   goto 196 on a
// DFA State 199 [nonAccepting]
//   goto 192 on l
// DFA State 200 [nonAccepting]
//   goto 195 on l
// DFA State 201 [nonAccepting]
//   goto 149 on m
// DFA State 202 [nonAccepting]
//   goto 151 on r
// DFA State 203 [nonAccepting]
//   goto 161 on t
// DFA State 204 [nonAccepting]
//   goto 164 on v
// DFA State 205 [nonAccepting]
//   goto 202 on i
// DFA State 206 [nonAccepting]
//   goto 158 on m
// DFA State 207 [nonAccepting]
//   goto 156 on r
// DFA State 208 [nonAccepting]
//   goto 168 on t
// DFA State 209 [nonAccepting]
//   goto 170 on v
// DFA State 210 [nonAccepting]
//   goto 207 on i
// DFA State 211 [nonAccepting]
//   goto 162 on m
// DFA State 212 [nonAccepting]
//   goto 160 on r
// DFA State 213 [nonAccepting]
//   goto 172 on t
// DFA State 214 [nonAccepting]
//   goto 174 on v
// DFA State 215 [nonAccepting]
//   goto 212 on i
// DFA State 216 [nonAccepting]
//   goto 165 on m
// DFA State 217 [nonAccepting]
//   goto 163 on r
// DFA State 218 [nonAccepting]
//   goto 175 on t
// DFA State 219 [nonAccepting]
//   goto 177 on v
// DFA State 220 [nonAccepting]
//   goto 217 on i
// DFA State 221 [nonAccepting]
//   goto 167 on m
// DFA State 222 [nonAccepting]
//   goto 176 on t
// DFA State 223 [nonAccepting]
//   goto 179 on v
// DFA State 224 [nonAccepting]
//   goto 169 on m
// DFA State 225 [nonAccepting]
//   goto 178 on t
// DFA State 226 [nonAccepting]
//   goto 181 on v
// DFA State 227 [nonAccepting]
//   goto 171 on m
// DFA State 228 [nonAccepting]
//   goto 180 on t
// DFA State 229 [nonAccepting]
//   goto 184 on v
// DFA State 230 [nonAccepting]
//   goto 173 on m
// DFA State 231 [nonAccepting]
//   goto 183 on t
// DFA State 232 [nonAccepting]
//   goto 186 on v
// DFA State 233 [nonAccepting]
//   goto 185 on t
// DFA State 234 [nonAccepting]
//   goto 187 on t
// DFA State 235 [nonAccepting]
//   goto 189 on c
// DFA State 236 [nonAccepting]
//   goto 275 on a
//   goto 205 on c
//   goto 274 on g
//   goto 221 on u
// DFA State 237 [nonAccepting]
//   goto 269 on a
//   goto 270 on g
//   goto 211 on u
// DFA State 238 [nonAccepting]
//   goto 190 on i
// DFA State 239 [nonAccepting]
//   goto 193 on u
// DFA State 240 [nonAccepting]
//   goto 194 on a
// DFA State 241 [nonAccepting]
//   goto 198 on l
// DFA State 242 [nonAccepting]
//   goto 200 on i
// DFA State 243 [nonAccepting]
//   goto 277 on a
//   goto 210 on c
//   goto 276 on g
//   goto 224 on u
// DFA State 244 [nonAccepting]
//   goto 203 on u
// DFA State 245 [nonAccepting]
//   goto 204 on a
// DFA State 246 [nonAccepting]
//   goto 281 on a
//   goto 220 on c
//   goto 280 on g
//   goto 230 on u
// DFA State 247 [nonAccepting]
//   goto 208 on u
// DFA State 248 [nonAccepting]
//   goto 209 on a
// DFA State 249 [nonAccepting]
//   goto 213 on u
// DFA State 250 [nonAccepting]
//   goto 214 on a
// DFA State 251 [nonAccepting]
//   goto 218 on u
// DFA State 252 [nonAccepting]
//   goto 219 on a
// DFA State 253 [nonAccepting]
//   goto 222 on u
// DFA State 254 [nonAccepting]
//   goto 223 on a
// DFA State 255 [nonAccepting]
//   goto 225 on u
// DFA State 256 [nonAccepting]
//   goto 226 on a
// DFA State 257 [nonAccepting]
//   goto 228 on u
// DFA State 258 [nonAccepting]
//   goto 229 on a
// DFA State 259 [nonAccepting]
//   goto 231 on u
// DFA State 260 [nonAccepting]
//   goto 232 on a
// DFA State 261 [nonAccepting]
//   goto 233 on u
// DFA State 262 [nonAccepting]
//   goto 234 on u
// DFA State 263 [nonAccepting]
//   goto 242 on t
// DFA State 264 [nonAccepting]
//   goto 240 on r
// DFA State 265 [nonAccepting]
//   goto 244 on c
// DFA State 266 [nonAccepting]
//   goto 245 on r
// DFA State 267 [nonAccepting]
//   goto 247 on c
// DFA State 268 [nonAccepting]
//   goto 248 on r
// DFA State 269 [nonAccepting]
//   goto 249 on c
// DFA State 270 [nonAccepting]
//   goto 250 on r
// DFA State 271 [nonAccepting]
//   goto 251 on c
// DFA State 272 [nonAccepting]
//   goto 252 on r
// DFA State 273 [nonAccepting]
//   goto 253 on c
// DFA State 274 [nonAccepting]
//   goto 254 on r
// DFA State 275 [nonAccepting]
//   goto 255 on c
// DFA State 276 [nonAccepting]
//   goto 256 on r
// DFA State 277 [nonAccepting]
//   goto 257 on c
// DFA State 278 [nonAccepting]
//   goto 258 on r
// DFA State 279 [nonAccepting]
//   goto 259 on c
// DFA State 280 [nonAccepting]
//   goto 260 on r
// DFA State 281 [nonAccepting]
//   goto 261 on c
// DFA State 282 [nonAccepting]
//   goto 262 on c
// DFA State 283 [nonAccepting]
//   goto 282 on a

// The lexCharMap[] and lexStateMap arrays are used as follows:
//
// nextState = lexNext[lexStateMap[currentState]][lexCharMap[inputChar]];
//
// Character positions in the lexCharMap Array are:
//
//\x00 \x01 \x02 \x03 \x04 \x05 \x06 \x07 \b   \t   \n   \x0b \f   \r   \x0e \x0f
//\x10 \x11 \x12 \x13 \x14 \x15 \x16 \x17 \x18 \x19 \x1a \x1b \x1c \x1d \x1e \x1f
//\s   !    "    #    $    %    &    \'   (    )    *    +    ,    -    .    /
//0    1    2    3    4    5    6    7    8    9    :    ;    <    =    >    ?
//@    A    B    C    D    E    F    G    H    I    J    K    L    M    N    O
//P    Q    R    S    T    U    V    W    X    Y    Z    [    \\   ]    ^    _
//`    a    b    c    d    e    f    g    h    i    j    k    l    m    n    o
//p    q    r    s    t    u    v    w    x    y    z    {    |    }    ~    \x7f
//\x80 \x81 \x82 \x83 \x84 \x85 \x86 \x87 \x88 \x89 \x8a \x8b \x8c \x8d \x8e \x8f
//\x90 \x91 \x92 \x93 \x94 \x95 \x96 \x97 \x98 \x99 \x9a \x9b \x9c \x9d \x9e \x9f
//\xa0 \xa1 \xa2 \xa3 \xa4 \xa5 \xa6 \xa7 \xa8 \xa9 \xaa \xab \xac \xad \xae \xaf
//\xb0 \xb1 \xb2 \xb3 \xb4 \xb5 \xb6 \xb7 \xb8 \xb9 \xba \xbb \xbc \xbd \xbe \xbf
//\xc0 \xc1 \xc2 \xc3 \xc4 \xc5 \xc6 \xc7 \xc8 \xc9 \xca \xcb \xcc \xcd \xce \xcf
//\xd0 \xd1 \xd2 \xd3 \xd4 \xd5 \xd6 \xd7 \xd8 \xd9 \xda \xdb \xdc \xdd \xde \xdf
//\xe0 \xe1 \xe2 \xe3 \xe4 \xe5 \xe6 \xe7 \xe8 \xe9 \xea \xeb \xec \xed \xee \xef
//\xf0 \xf1 \xf2 \xf3 \xf4 \xf5 \xf6 \xf7 \xf8 \xf9 \xfa \xfb \xfc \xfd \xfe \xff

static const unsigned char lexCharMap[256] = {
     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   0,   0,   2,   0,   0,
     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
     0,   0,   0,   0,   0,   0,   3,   0,   0,   0,   0,   0,   0,   0,   0,   0,
     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   0,   0,   0,   0,
     0,   5,   0,   6,   0,   7,   0,   0,   0,   8,   0,   0,   0,   0,   9,  10,
     0,   0,   0,   0,   0,  11,   0,   0,   0,  12,   0,   0,   0,   0,   0,   0,
     0,  13,   0,  14,  15,  16,   0,  17,  18,  19,   0,   0,  20,  21,  22,  23,
     0,   0,  24,  25,  26,  27,  28,   0,   0,  29,  30,   0,   0,   0,   0,   0,
     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
     0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0
};

static const unsigned char lexStateMap[284] = {
  /*   0 */  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
  /*  20 */  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
  /*  40 */  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  3,  4,  5,  6,  7,  8,  9,
  /*  60 */ 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
  /*  80 */ 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
  /* 100 */ 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69,
  /* 120 */ 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89,
  /* 140 */ 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,100,101,102,103,104,105,106,107,108,109,
  /* 160 */110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,
  /* 180 */130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,
  /* 200 */150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,
  /* 220 */170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,
  /* 240 */190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,
  /* 260 */210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,
  /* 280 */230,231,232,233
};

static const short lexNext[234][31] = {
  /*   0 */ {  1,  2, -1, 53,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1},
  /*   1 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /*   2 */ { -1, -1, -1, -1, -1, -1, -1, 63, -1, -1, -1, -1, -1,135, -1, -1, -1, 64, -1, -1, -1, -1, -1, -1, 65, -1, -1, 66, -1, -1, -1},
  /*   3 */ { -1, -1, -1, -1, -1, 52, 54, 55, 56, 57, 58,237, 59, 60,235, -1,236, -1, -1,243, -1, -1,263, 61, -1, 62, -1,246, -1,283, -1},
  /*   4 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 67, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /*   5 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 68,137, -1, -1,264, -1, -1, -1, -1, -1, -1, -1, -1, -1,188, -1, -1, -1},
  /*   6 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,265, -1, -1, -1,266, -1, -1, -1, -1, -1, -1, -1, -1, -1,201, -1, -1, -1},
  /*   7 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,148, -1, -1, -1, -1},
  /*   8 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,267, -1, -1, -1,268, -1, -1, -1, -1, -1, -1, -1,136, -1,206, -1, -1, -1},
  /*   9 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,271, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /*  10 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,273,197, -1,147,272, -1, -1, -1, -1, -1, -1,238, -1, -1,216, -1, -1, -1},
  /*  11 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,279,215, -1, -1,278, -1, -1, -1, -1, -1, -1, -1,241, -1,227, -1, -1, -1},
  /*  12 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,199},
  /*  13 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,153, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /*  14 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 70, -1, -1, -1, -1, -1, -1},
  /*  15 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 71, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /*  16 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 72, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /*  17 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 73, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /*  18 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,239, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /*  19 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 77, -1, -1, -1},
  /*  20 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 78, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /*  21 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,142, -1, -1, -1, -1, -1, -1, -1, -1},
  /*  22 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 79, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /*  23 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,141, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /*  24 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 80, -1, -1, -1, -1, -1, -1},
  /*  25 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,150, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /*  26 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 93, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /*  27 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 94, -1, -1, -1, -1},
  /*  28 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,144, -1, -1},
  /*  29 */ { -1, -1, -1, -1,  3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /*  30 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 97, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /*  31 */ { -1, -1, -1, -1,  4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /*  32 */ { -1, -1, -1, -1,  5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /*  33 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,166, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /*  34 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 98, -1, -1, -1, -1, -1},
  /*  35 */ { -1, -1, -1, -1,  6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /*  36 */ { -1, -1, -1, -1,  7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /*  37 */ { -1, -1, -1, -1,  8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /*  38 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,145, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /*  39 */ { -1, -1, -1, -1,  9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /*  40 */ { -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /*  41 */ { -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /*  42 */ { -1, -1, -1, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /*  43 */ { -1, -1, -1, -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /*  44 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,107, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /*  45 */ { -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /*  46 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,109, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /*  47 */ { -1, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /*  48 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,117, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /*  49 */ { -1, -1, -1, -1, 16, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /*  50 */ { -1, -1, -1, -1, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /*  51 */ { -1, -1, -1, -1, 18, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /*  52 */ { -1, -1, -1, -1, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /*  53 */ { -1, -1, -1, -1, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /*  54 */ { -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /*  55 */ { -1, -1, -1, -1, 22, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /*  56 */ { -1, -1, -1, -1, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /*  57 */ { -1, -1, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /*  58 */ { -1, -1, -1, -1, 25, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /*  59 */ { -1, -1, -1, -1, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /*  60 */ { -1, -1, -1, -1, 27, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /*  61 */ { -1, -1, -1, -1, 28, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /*  62 */ { -1, -1, -1, -1, 29, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /*  63 */ { -1, -1, -1, -1, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /*  64 */ { -1, -1, -1, -1, 31, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /*  65 */ { -1, -1, -1, -1, 32, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /*  66 */ { -1, -1, -1, -1, 33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /*  67 */ { -1, -1, -1, -1, 34, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /*  68 */ { -1, -1, -1, -1, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /*  69 */ { -1, -1, -1, -1, 36, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /*  70 */ { -1, -1, -1, -1, 37, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /*  71 */ { -1, -1, -1, -1, 38, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /*  72 */ { -1, -1, -1, -1, 39, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /*  73 */ { -1, -1, -1, -1, 40, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /*  74 */ { -1, -1, -1, -1, 41, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /*  75 */ { -1, -1, -1, -1, 42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /*  76 */ { -1, -1, -1, -1, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /*  77 */ { -1, -1, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /*  78 */ { -1, -1, -1, -1, 45, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /*  79 */ { -1, -1, -1, -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /*  80 */ { -1, -1, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /*  81 */ { -1, -1, -1, -1, 48, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /*  82 */ { -1, -1, -1, -1, 49, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /*  83 */ { -1, -1, -1, -1, 50, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /*  84 */ { -1, -1, -1, -1, 51, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /*  85 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 69, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /*  86 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,138, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /*  87 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 74, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /*  88 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 84, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /*  89 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 81, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /*  90 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 88, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /*  91 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 96, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /*  92 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 95, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /*  93 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 99, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /*  94 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,108, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /*  95 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,123, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /*  96 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,131, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /*  97 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 75, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /*  98 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,154, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /*  99 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 82, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 100 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,100, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 101 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,102, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 102 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,110, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 103 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 76, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 104 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 83, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 105 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,101, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 106 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,103, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 107 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,111, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 108 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 85, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 109 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,105, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 110 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,104, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 111 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,112, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 112 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 86, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 113 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,106, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 114 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,113, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 115 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 87, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 116 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,114, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 117 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 89, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 118 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 119 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 90, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 120 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,116, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 121 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 91, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 122 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,118, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 123 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 92, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 124 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,119, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 125 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,120, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 126 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,121, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 127 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,122, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 128 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,124, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 129 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,125, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 130 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,126, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 131 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,127, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 132 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,128, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 133 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,129, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 134 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 135 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,132, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 136 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,133, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 137 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,134, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 138 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,139, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 139 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,140, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 140 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,155, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 141 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,143, -1, -1, -1, -1, -1, -1},
  /* 142 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,159, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 143 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,152, -1, -1, -1, -1},
  /* 144 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,157, -1, -1},
  /* 145 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,182, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 146 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,146, -1, -1, -1, -1, -1},
  /* 147 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,191, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 148 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,196, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 149 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,192, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 150 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,195, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 151 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,149, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 152 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,151, -1, -1, -1, -1, -1, -1},
  /* 153 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,161, -1, -1, -1, -1},
  /* 154 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,164, -1, -1},
  /* 155 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,202, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 156 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,158, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 157 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,156, -1, -1, -1, -1, -1, -1},
  /* 158 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,168, -1, -1, -1, -1},
  /* 159 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,170, -1, -1},
  /* 160 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,207, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 161 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,162, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 162 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,160, -1, -1, -1, -1, -1, -1},
  /* 163 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,172, -1, -1, -1, -1},
  /* 164 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,174, -1, -1},
  /* 165 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 166 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,165, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 167 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,163, -1, -1, -1, -1, -1, -1},
  /* 168 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,175, -1, -1, -1, -1},
  /* 169 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,177, -1, -1},
  /* 170 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 171 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,167, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 172 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,176, -1, -1, -1, -1},
  /* 173 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,179, -1, -1},
  /* 174 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,169, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 175 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,178, -1, -1, -1, -1},
  /* 176 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,181, -1, -1},
  /* 177 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,171, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 178 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,180, -1, -1, -1, -1},
  /* 179 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,184, -1, -1},
  /* 180 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,173, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 181 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,183, -1, -1, -1, -1},
  /* 182 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,186, -1, -1},
  /* 183 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,185, -1, -1, -1, -1},
  /* 184 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,187, -1, -1, -1, -1},
  /* 185 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,189, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 186 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,275,205, -1, -1,274, -1, -1, -1, -1, -1, -1, -1, -1, -1,221, -1, -1, -1},
  /* 187 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,269, -1, -1, -1,270, -1, -1, -1, -1, -1, -1, -1, -1, -1,211, -1, -1, -1},
  /* 188 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,190, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 189 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,193, -1, -1, -1},
  /* 190 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,194, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 191 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,198, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 192 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,200, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 193 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,277,210, -1, -1,276, -1, -1, -1, -1, -1, -1, -1, -1, -1,224, -1, -1, -1},
  /* 194 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,203, -1, -1, -1},
  /* 195 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,204, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 196 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,281,220, -1, -1,280, -1, -1, -1, -1, -1, -1, -1, -1, -1,230, -1, -1, -1},
  /* 197 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,208, -1, -1, -1},
  /* 198 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,209, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 199 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,213, -1, -1, -1},
  /* 200 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,214, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 201 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,218, -1, -1, -1},
  /* 202 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,219, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 203 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,222, -1, -1, -1},
  /* 204 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,223, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 205 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,225, -1, -1, -1},
  /* 206 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,226, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 207 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,228, -1, -1, -1},
  /* 208 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,229, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 209 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,231, -1, -1, -1},
  /* 210 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,232, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 211 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,233, -1, -1, -1},
  /* 212 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,234, -1, -1, -1},
  /* 213 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,242, -1, -1, -1, -1},
  /* 214 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,240, -1, -1, -1, -1, -1, -1},
  /* 215 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,244, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 216 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,245, -1, -1, -1, -1, -1, -1},
  /* 217 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,247, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 218 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,248, -1, -1, -1, -1, -1, -1},
  /* 219 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,249, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 220 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,250, -1, -1, -1, -1, -1, -1},
  /* 221 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,251, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 222 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,252, -1, -1, -1, -1, -1, -1},
  /* 223 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,253, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 224 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,254, -1, -1, -1, -1, -1, -1},
  /* 225 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,255, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 226 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,256, -1, -1, -1, -1, -1, -1},
  /* 227 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,257, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 228 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,258, -1, -1, -1, -1, -1, -1},
  /* 229 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,259, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 230 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,260, -1, -1, -1, -1, -1, -1},
  /* 231 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,261, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 232 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,262, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
  /* 233 */ { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,282, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}
};

static const char lexAccept[284] = {
  /*   0 */ 0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4
  /*  20 */,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4
  /*  40 */,4,4,4,4,4,4,4,4,4,4,4,4,0,4,0,0,0,0,0,0
  /*  60 */,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  /*  80 */,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  /* 100 */,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  /* 120 */,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  /* 140 */,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  /* 160 */,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  /* 180 */,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  /* 200 */,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  /* 220 */,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  /* 240 */,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  /* 260 */,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  /* 280 */,0,0,0,0
};

#line 9 "C:\\mytools2015\\ParserGen\\lib\\lexgencpp.par"

// nextState(state,c) is given the current state number and input
// character and evaluates to the next state.
#define nextState(state,c) (lexNext[lexStateMap[state]][lexCharMap[c]])

int TranscharLex::getNextLexeme() {
  int  state           = 0;     // Current state
  int  lastAcceptState = 0;     // Most recently seen accept state
  int  prevState;               // State before lastAcceptState
  int  nextState;               // Next state
  unsigned int  lookahead;      // Lookahead character
  int  anchor;                  // Anchor mode for most recently seen accepting state

  unTerminateLexeme();
  initMore();
  markStart();

  for(;;) {
    // Check end of file. If there's an unprocessed accepting state,
    // lastAcceptState will be nonzero. In this case, ignore EOF for now so
    // that you can do the accepting action; otherwise, try to open another
    // file and return if you can't.

    for(;;) {
      if(((int)(lookahead = look(1))) != EOF) {
        assert(lookahead < 256);
        nextState = nextState(state, lookahead);
        break;
      } else if(lastAcceptState != 0) {   // still something to do
        nextState = -1;
        break;
      } else if(isWrap()) {               // another file?
        terminateLexeme();
        return 0;                         // EOI
      }
    }
    if(m_debug) {
      debugState(_T("--------"), state, lookahead);
    }

    if(nextState != -1) {
      if(advance() < 0) {                 // Buffer full
        const TCHAR *tooLongMessage = _T("Lexeme too long. Discarding extra characters.");
        error(getPos(), tooLongMessage);

        flush(true);

        if(m_debug) {
          debug(tooLongMessage);
          debugState(_T("--------"), state, look(1));
        }
      }

      if(anchor = lexAccept[nextState]) { // Is this an accept state
        prevState       = state;
        lastAcceptState = nextState;
        markEnd();                        // Mark input at current character
      }                                   // A subsequent gotoMark() returns us to this position.
      state = nextState;
    } else if(lastAcceptState == 0) {     // illegal input
      error(getPos(), _istprint(lookahead)?_T("Ignore bad input:'%c'"):_T("Ignore bad input:%#x"),lookahead);

      if(m_debug) {
        debug(_T("Ignore bad input:'%c'"), lookahead);
      }

      advance();
    } else {
      if(m_debug) {
        debugState(_T("accept--"), lastAcceptState, lookahead);
      }

      gotoMark();                         // Back up to previous accept state
      if(anchor & ANCHOR_END) {           // If end anchor is active
        pushback(1);                      // Push back the CR or LF
      }
      if(anchor & ANCHOR_START) {         // If start anchor is active
        moveStart();                      // Skip the leading newline
      }
      terminateLexeme();                  // Null-terminate the string

      switch(lastAcceptState) {
      case 1:
      case 53:
#line 77 "C:\\Mytools2015\\ParserGen\\transchar\\Transchar.lex"
        return getText()[0];
#line 91 "C:\\mytools2015\\ParserGen\\lib\\lexgencpp.par"
        break;
      case 2:
#line 78 "C:\\Mytools2015\\ParserGen\\transchar\\Transchar.lex"
        return getText()[0];
#line 91 "C:\\mytools2015\\ParserGen\\lib\\lexgencpp.par"
        break;
      case 3:
#line 36 "C:\\Mytools2015\\ParserGen\\transchar\\Transchar.lex"
        return 142; /* Ä */
#line 91 "C:\\mytools2015\\ParserGen\\lib\\lexgencpp.par"
        break;
      case 4:
#line 43 "C:\\Mytools2015\\ParserGen\\transchar\\Transchar.lex"
        return 211; /* Ë */
#line 91 "C:\\mytools2015\\ParserGen\\lib\\lexgencpp.par"
        break;
      case 5:
#line 51 "C:\\Mytools2015\\ParserGen\\transchar\\Transchar.lex"
        return 216; /* Ï */
#line 91 "C:\\mytools2015\\ParserGen\\lib\\lexgencpp.par"
        break;
      case 6:
#line 62 "C:\\Mytools2015\\ParserGen\\transchar\\Transchar.lex"
        return 153; /* Ö */
#line 91 "C:\\mytools2015\\ParserGen\\lib\\lexgencpp.par"
        break;
      case 7:
#line 69 "C:\\Mytools2015\\ParserGen\\transchar\\Transchar.lex"
        return 154; /* Ü */
#line 91 "C:\\mytools2015\\ParserGen\\lib\\lexgencpp.par"
        break;
      case 8:
#line 37 "C:\\Mytools2015\\ParserGen\\transchar\\Transchar.lex"
        return 132; /* ä */
#line 91 "C:\\mytools2015\\ParserGen\\lib\\lexgencpp.par"
        break;
      case 9:
#line 44 "C:\\Mytools2015\\ParserGen\\transchar\\Transchar.lex"
        return 137; /* ë */
#line 91 "C:\\mytools2015\\ParserGen\\lib\\lexgencpp.par"
        break;
      case 10:
#line 52 "C:\\Mytools2015\\ParserGen\\transchar\\Transchar.lex"
        return 139; /* ï */
#line 91 "C:\\mytools2015\\ParserGen\\lib\\lexgencpp.par"
        break;
      case 11:
#line 63 "C:\\Mytools2015\\ParserGen\\transchar\\Transchar.lex"
        return 148; /* ö */
#line 91 "C:\\mytools2015\\ParserGen\\lib\\lexgencpp.par"
        break;
      case 12:
#line 70 "C:\\Mytools2015\\ParserGen\\transchar\\Transchar.lex"
        return 129; /* ü */
#line 91 "C:\\mytools2015\\ParserGen\\lib\\lexgencpp.par"
        break;
      case 13:
#line 28 "C:\\Mytools2015\\ParserGen\\transchar\\Transchar.lex"
        return 146; /* Æ */
#line 91 "C:\\mytools2015\\ParserGen\\lib\\lexgencpp.par"
        break;
      case 14:
#line 30 "C:\\Mytools2015\\ParserGen\\transchar\\Transchar.lex"
        return 143; /* Å */
#line 91 "C:\\mytools2015\\ParserGen\\lib\\lexgencpp.par"
        break;
      case 15:
#line 45 "C:\\Mytools2015\\ParserGen\\transchar\\Transchar.lex"
        return 210; /* Ê */
#line 91 "C:\\mytools2015\\ParserGen\\lib\\lexgencpp.par"
        break;
      case 16:
#line 38 "C:\\Mytools2015\\ParserGen\\transchar\\Transchar.lex"
        return 131; /* â */
#line 91 "C:\\mytools2015\\ParserGen\\lib\\lexgencpp.par"
        break;
      case 17:
#line 29 "C:\\Mytools2015\\ParserGen\\transchar\\Transchar.lex"
        return 145; /* æ */
#line 91 "C:\\mytools2015\\ParserGen\\lib\\lexgencpp.par"
        break;
      case 18:
#line 31 "C:\\Mytools2015\\ParserGen\\transchar\\Transchar.lex"
        return 134; /* å */
#line 91 "C:\\mytools2015\\ParserGen\\lib\\lexgencpp.par"
        break;
      case 19:
#line 46 "C:\\Mytools2015\\ParserGen\\transchar\\Transchar.lex"
        return 136; /* ê */
#line 91 "C:\\mytools2015\\ParserGen\\lib\\lexgencpp.par"
        break;
      case 20:
#line 53 "C:\\Mytools2015\\ParserGen\\transchar\\Transchar.lex"
        return 140; /* î */
#line 91 "C:\\mytools2015\\ParserGen\\lib\\lexgencpp.par"
        break;
      case 21:
#line 64 "C:\\Mytools2015\\ParserGen\\transchar\\Transchar.lex"
        return 147; /* ô */
#line 91 "C:\\mytools2015\\ParserGen\\lib\\lexgencpp.par"
        break;
      case 22:
#line 74 "C:\\Mytools2015\\ParserGen\\transchar\\Transchar.lex"
        return 225; /* ss */
#line 91 "C:\\mytools2015\\ParserGen\\lib\\lexgencpp.par"
        break;
      case 23:
#line 71 "C:\\Mytools2015\\ParserGen\\transchar\\Transchar.lex"
        return 150; /* û */
#line 91 "C:\\mytools2015\\ParserGen\\lib\\lexgencpp.par"
        break;
      case 24:
#line 34 "C:\\Mytools2015\\ParserGen\\transchar\\Transchar.lex"
        return 181; /* Á */
#line 91 "C:\\mytools2015\\ParserGen\\lib\\lexgencpp.par"
        break;
      case 25:
#line 32 "C:\\Mytools2015\\ParserGen\\transchar\\Transchar.lex"
        return 183; /* À */
#line 91 "C:\\mytools2015\\ParserGen\\lib\\lexgencpp.par"
        break;
      case 26:
#line 76 "C:\\Mytools2015\\ParserGen\\transchar\\Transchar.lex"
        return 128; /* C */
#line 91 "C:\\mytools2015\\ParserGen\\lib\\lexgencpp.par"
        break;
      case 27:
#line 41 "C:\\Mytools2015\\ParserGen\\transchar\\Transchar.lex"
        return 144; /* É */
#line 91 "C:\\mytools2015\\ParserGen\\lib\\lexgencpp.par"
        break;
      case 28:
#line 39 "C:\\Mytools2015\\ParserGen\\transchar\\Transchar.lex"
        return 212; /* È */
#line 91 "C:\\mytools2015\\ParserGen\\lib\\lexgencpp.par"
        break;
      case 29:
#line 49 "C:\\Mytools2015\\ParserGen\\transchar\\Transchar.lex"
        return 214; /* Í */
#line 91 "C:\\mytools2015\\ParserGen\\lib\\lexgencpp.par"
        break;
      case 30:
#line 47 "C:\\Mytools2015\\ParserGen\\transchar\\Transchar.lex"
        return 222; /* Ì */
#line 91 "C:\\mytools2015\\ParserGen\\lib\\lexgencpp.par"
        break;
      case 31:
#line 54 "C:\\Mytools2015\\ParserGen\\transchar\\Transchar.lex"
        return 165; /* Ñ */
#line 91 "C:\\mytools2015\\ParserGen\\lib\\lexgencpp.par"
        break;
      case 32:
#line 60 "C:\\Mytools2015\\ParserGen\\transchar\\Transchar.lex"
        return 224; /* Ó */
#line 91 "C:\\mytools2015\\ParserGen\\lib\\lexgencpp.par"
        break;
      case 33:
#line 58 "C:\\Mytools2015\\ParserGen\\transchar\\Transchar.lex"
        return 227; /* Ò */
#line 91 "C:\\mytools2015\\ParserGen\\lib\\lexgencpp.par"
        break;
      case 34:
#line 56 "C:\\Mytools2015\\ParserGen\\transchar\\Transchar.lex"
        return 157; /* Ø */
#line 91 "C:\\mytools2015\\ParserGen\\lib\\lexgencpp.par"
        break;
      case 35:
#line 67 "C:\\Mytools2015\\ParserGen\\transchar\\Transchar.lex"
        return 233; /* Ú */
#line 91 "C:\\mytools2015\\ParserGen\\lib\\lexgencpp.par"
        break;
      case 36:
#line 65 "C:\\Mytools2015\\ParserGen\\transchar\\Transchar.lex"
        return 235; /* Ù */
#line 91 "C:\\mytools2015\\ParserGen\\lib\\lexgencpp.par"
        break;
      case 37:
#line 72 "C:\\Mytools2015\\ParserGen\\transchar\\Transchar.lex"
        return 237; /* Ý */
#line 91 "C:\\mytools2015\\ParserGen\\lib\\lexgencpp.par"
        break;
      case 38:
#line 35 "C:\\Mytools2015\\ParserGen\\transchar\\Transchar.lex"
        return 160; /* á */
#line 91 "C:\\mytools2015\\ParserGen\\lib\\lexgencpp.par"
        break;
      case 39:
#line 33 "C:\\Mytools2015\\ParserGen\\transchar\\Transchar.lex"
        return 133; /* à */
#line 91 "C:\\mytools2015\\ParserGen\\lib\\lexgencpp.par"
        break;
      case 40:
#line 75 "C:\\Mytools2015\\ParserGen\\transchar\\Transchar.lex"
        return 135; /* c */
#line 91 "C:\\mytools2015\\ParserGen\\lib\\lexgencpp.par"
        break;
      case 41:
#line 42 "C:\\Mytools2015\\ParserGen\\transchar\\Transchar.lex"
        return 130; /* é */
#line 91 "C:\\mytools2015\\ParserGen\\lib\\lexgencpp.par"
        break;
      case 42:
#line 40 "C:\\Mytools2015\\ParserGen\\transchar\\Transchar.lex"
        return 138; /* è */
#line 91 "C:\\mytools2015\\ParserGen\\lib\\lexgencpp.par"
        break;
      case 43:
#line 50 "C:\\Mytools2015\\ParserGen\\transchar\\Transchar.lex"
        return 161; /* í */
#line 91 "C:\\mytools2015\\ParserGen\\lib\\lexgencpp.par"
        break;
      case 44:
#line 48 "C:\\Mytools2015\\ParserGen\\transchar\\Transchar.lex"
        return 141; /* ì */
#line 91 "C:\\mytools2015\\ParserGen\\lib\\lexgencpp.par"
        break;
      case 45:
#line 55 "C:\\Mytools2015\\ParserGen\\transchar\\Transchar.lex"
        return 164; /* ñ */
#line 91 "C:\\mytools2015\\ParserGen\\lib\\lexgencpp.par"
        break;
      case 46:
#line 61 "C:\\Mytools2015\\ParserGen\\transchar\\Transchar.lex"
        return 162; /* ó */
#line 91 "C:\\mytools2015\\ParserGen\\lib\\lexgencpp.par"
        break;
      case 47:
#line 59 "C:\\Mytools2015\\ParserGen\\transchar\\Transchar.lex"
        return 149; /* ò */
#line 91 "C:\\mytools2015\\ParserGen\\lib\\lexgencpp.par"
        break;
      case 48:
#line 57 "C:\\Mytools2015\\ParserGen\\transchar\\Transchar.lex"
        return 155; /* ø */
#line 91 "C:\\mytools2015\\ParserGen\\lib\\lexgencpp.par"
        break;
      case 49:
#line 68 "C:\\Mytools2015\\ParserGen\\transchar\\Transchar.lex"
        return 163; /* ú */
#line 91 "C:\\mytools2015\\ParserGen\\lib\\lexgencpp.par"
        break;
      case 50:
#line 66 "C:\\Mytools2015\\ParserGen\\transchar\\Transchar.lex"
        return 151; /* ù */
#line 91 "C:\\mytools2015\\ParserGen\\lib\\lexgencpp.par"
        break;
      case 51:
#line 73 "C:\\Mytools2015\\ParserGen\\transchar\\Transchar.lex"
        return 236; /* ý */
#line 91 "C:\\mytools2015\\ParserGen\\lib\\lexgencpp.par"
        break;
#line 93 "C:\\mytools2015\\ParserGen\\lib\\lexgencpp.par"
      default:
        throwException(_T("%s:Unknown accept state:%d, text=<%s>"), __TFUNCTION__, lastAcceptState,getText());
        break;
      }

      unTerminateLexeme();
      lastAcceptState = 0;

      if(isMore()) {
        state = prevState;                // Back up
        initMore();
      } else {
        state = 0;
        markStart();
      }
    }
  }
}

#line 81 "C:\\Mytools2015\\ParserGen\\transchar\\Transchar.lex"

#line 112 "C:\\mytools2015\\ParserGen\\lib\\lexgencpp.par"
